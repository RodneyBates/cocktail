
(* This file was mechanically generated by puma. *)

IMPLEMENTATION MODULE GramC;








IMPORT SYSTEM, System, IO, Tree;
(* line 12 "" *)


FROM IO		IMPORT WriteS, WriteNl;
FROM Strings	IMPORT tString, ArrayToString;
FROM StringMem	IMPORT WriteString;
FROM Idents	IMPORT NoIdent, tIdent, MakeIdent;
FROM Texts	IMPORT WriteText;
FROM Sets	IMPORT IsElement, Include;
FROM IOUtils    IMPORT WriteBackslash ; 

FROM Tree	IMPORT
   NoTree	, tTree		, Input		, Reverse	,
   Class	, NoClass	, Child		, Attribute	,
   ActionPart	, HasSelector	, HasAttributes	, NoCodeAttr	,
   Referenced	, Options	, TreeRoot	, QueryTree	,
   ClassCount	, iNoTree	, itTree	, Generated	,
   f		, WI, WE, WN	, ForallClasses	, ForallAttributes,
   Nonterminal	, Terminal	, IdentifyAttribute,
   String	, iPosition	;

IMPORT Strings;

VAR
   Node, ActClass, TheClass, TheAttr	: tTree;
   iOper, iLeft, iRight, iNone, iPrec, iRule	: tIdent;
   ActActionIndex, PrevActionIndex	: SHORTCARD;
   IsImplicit				: BOOLEAN;
   s					: tString;

PROCEDURE GetBaseClass (Class: tTree): tTree;
   BEGIN
      WHILE Class^.Class.BaseClass^.Kind # NoClass DO
	 Class := Class^.Class.BaseClass;
      END;
      RETURN Class;
   END GetBaseClass;

PROCEDURE IsLast (Class, Action: tTree): BOOLEAN;
   VAR Found, Last: BOOLEAN;
   BEGIN
      IsLast2 (Class, Action, Found, Last);
      RETURN Last;
   END IsLast;

PROCEDURE IsLast2 (t, Action: tTree; VAR pFound, pLast: BOOLEAN);
   VAR Found, Last: BOOLEAN;
   BEGIN
      CASE t^.Kind OF
      | Class:
	    IsLast2 (t^.Class.Attributes, Action, pFound, pLast);
	    IF pFound OR NOT pLast THEN RETURN; END;
	    IsLast2 (t^.Class.BaseClass, Action, pFound, pLast);
      | Child:
	    IsLast2 (t^.Child.Next, Action, Found, Last);
	    pFound := Found;
	    IF Found THEN
	       pLast := Last;
	    ELSE
	       pLast := FALSE;
	    END;
      | Attribute:
	    IsLast2 (t^.Attribute.Next, Action, pFound, pLast);
      | ActionPart:
	    IsLast2 (t^.ActionPart.Next, Action, Found, Last);
	    pFound := Found OR (Action = t);
	    IF Found THEN
	       pLast := Last;
	    ELSE
	       pLast := Last AND (Action = t);
	    END;
      ELSE
	    pFound := FALSE;
	    pLast  := TRUE;
      END;
   END IsLast2;

PROCEDURE Prefix;
   BEGIN
      IF TreeRoot^.Ag.ScannerName # NoIdent THEN WI (TreeRoot^.Ag.ScannerName); WriteS (f, "_"); END;
   END Prefix;






































































































PROCEDURE yyAbort (yyFunction: ARRAY OF CHAR);
 BEGIN
  IO.WriteS (IO.StdError, 'Error: module GramC, routine ');
  IO.WriteS (IO.StdError, yyFunction);
  IO.WriteS (IO.StdError, ' failed');
  IO.WriteNl (IO.StdError);
  Exit;
 END yyAbort;

PROCEDURE yyIsEqual (yya, yyb: ARRAY OF SYSTEM.BYTE): BOOLEAN;
 VAR yyi       : INTEGER;
 BEGIN
  FOR yyi := 0 TO INTEGER (HIGH (yya)) DO
   IF yya [yyi] # yyb [yyi] THEN RETURN FALSE; END;
  END;
  RETURN TRUE;
 END yyIsEqual;

PROCEDURE ParsSpec (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.Ag:
(* line 105 "" *)
     WITH t^.Ag DO
(* line 105 "" *)
      
	IF ScannerName # NoIdent THEN
	   WriteS (f, "SCANNER "); WI (ScannerName);
	END;
	WriteS (f, " PARSER "); WI (ParserName); WriteNl (f);
	WriteS (f, "GLOBAL {"); WriteNl (f);
	WriteText (f, ParserCodes^.Codes.Global);
	Node := Modules;
	WHILE Node^.Kind = Tree.Module DO
	   WriteText (f, Node^.Module.ParserCodes^.Codes.Global);
	   Node := Node^.Module.Next;
	END;
        ParsVariant (Classes);
	WriteNl (f);
	WriteS (f, "typedef union {"); WriteNl (f);
	WriteS (f, " "); Prefix; WriteS (f, "tScanAttribute Scan;"); WriteNl (f);
	Node := Classes;
	WHILE Node^.Kind = Class DO
	  WITH Node^.Class DO
	     IF {Nonterminal, Referenced, HasAttributes} <= Properties THEN
	       IF (String IN Properties) AND NOT (HasSelector IN Properties) THEN
		 WriteS (f, " yy"); WN (Name); WriteS (f, " /* "); WE (Name); WriteS (f, " */ yy"); WN (Name); WriteS (f, ";"); WriteNl (f);
	       ELSE
		 WriteS (f, " yy"); WI (Selector); WriteS (f, " "); WI (Selector); WriteS (f, ";"); WriteNl (f);
	       END;
	     END;
	     Node := Next;
	  END;
	END;
	WriteS (f, "} tParsAttribute;"); WriteNl (f);
	WriteS (f, "}"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "EXPORT {"); WriteNl (f);
	WriteText (f, ParserCodes^.Codes.Export);
	Node := Modules;
	WHILE Node^.Kind = Tree.Module DO
	  WriteText (f, Node^.Module.ParserCodes^.Codes.Export);
	  Node := Node^.Module.Next;
	END;
	WriteS (f, "}"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "LOCAL {"); WriteNl (f);
	WriteText (f, ParserCodes^.Codes.Local);
	Node := Modules;
	WHILE Node^.Kind = Tree.Module DO
	  WriteText (f, Node^.Module.ParserCodes^.Codes.Local);
	  Node := Node^.Module.Next;
	END;
	WriteS (f, "}"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "BEGIN {"); WriteNl (f);
	WriteText (f, ParserCodes^.Codes.Begin);
	Node := Modules;
	WHILE Node^.Kind = Tree.Module DO
	  WriteText (f, Node^.Module.ParserCodes^.Codes.Begin);
	  Node := Node^.Module.Next;
	END;
	WriteS (f, "}"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "CLOSE {"); WriteNl (f);
	WriteText (f, ParserCodes^.Codes.Close);
	Node := Modules;
	WHILE Node^.Kind = Tree.Module DO
	  WriteText (f, Node^.Module.ParserCodes^.Codes.Close);
	  Node := Node^.Module.Next;
	END;
	WriteS (f, "}"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "TOKEN"); WriteNl (f);
	WriteNl (f);
	ForallClasses (Classes, Token);
	WriteNl (f);
	WriteS (f, "OPER"); WriteNl (f);
	WriteNl (f);
	PrecDefs (Precs);
	WriteNl (f);
	WriteS (f, "RULE"); WriteNl (f);
	WriteNl (f);
	ForallClasses (Classes, ParsSpec);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Class:
(* line 185 "" *)
     WITH t^.Class DO
(* line 185 "" *)
      
	IF {Nonterminal, Referenced} <= Properties THEN
	   TheClass := t;
	   Grammar (t);
	END;
;
      RETURN;
     END (* WITH *) ;

  ELSE END;

 END ParsSpec;

PROCEDURE ScanSpec (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.Ag:
(* line 195 "" *)
     WITH t^.Ag DO
(* line 195 "" *)
      
	WriteS (f, "c"); WriteNl (f);
	WriteS (f, "# if defined __STDC__ | defined __cplusplus"); WriteNl (f);
	WriteS (f, "# define ARGS(parameters)	parameters"); WriteNl (f);
	WriteS (f, "# else"); WriteNl (f);
	WriteS (f, "# define ARGS(parameters)	()"); WriteNl (f);
	WriteS (f, "# endif"); WriteNl (f);
	WriteNl (f);
	ForallClasses (Classes, ScanVariant);
	WriteNl (f);
	WriteS (f, "typedef union {"); WriteNl (f);
	WriteS (f, " tPosition Position;"); WriteNl (f);
	ForallClasses (Classes, ScanAttr);
	WriteS (f, "} "); Prefix; WriteS (f, "tScanAttribute;"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "extern void "); Prefix; WriteS (f, "ErrorAttribute ARGS((int Token, "); Prefix; WriteS (f, "tScanAttribute * pAttribute));"); WriteNl (f);
	WriteS (f, "%%"); WriteNl (f);
	WriteS (f, "void "); Prefix; WriteS (f, "ErrorAttribute"); WriteNl (f);
	WriteS (f, "# if defined __STDC__ | defined __cplusplus"); WriteNl (f);
	WriteS (f, " (int Token, "); Prefix; WriteS (f, "tScanAttribute * pAttribute)"); WriteNl (f);
	WriteS (f, "# else"); WriteNl (f);
	WriteS (f, " (Token, pAttribute) int Token; "); Prefix; WriteS (f, "tScanAttribute * pAttribute;"); WriteNl (f);
	WriteS (f, "# endif"); WriteNl (f);
	WriteS (f, "{"); WriteNl (f);
	WriteS (f, " pAttribute->Position = "); Prefix; WriteS (f, "Attribute.Position;"); WriteNl (f);
	WriteS (f, " switch (Token) {"); WriteNl (f);
	ForallClasses (Classes, ErrorActions);
	WriteS (f, " }"); WriteNl (f);
	WriteS (f, "}"); WriteNl (f);
	WriteS (f, "%%"); WriteNl (f);
	ForallClasses (Classes, ScanSpec);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Class:
(* line 227 "" *)
     WITH t^.Class DO
(* line 227 "" *)
      
	IF {Terminal, Referenced} <= Properties THEN
	   WN (Code);
	   IF HasAttributes IN Properties THEN	WriteS (f, " S "); 
	   ELSE					WriteS (f, " N "); 
	   END;
	   IF (String IN Properties) AND NOT (HasSelector IN Properties) THEN
	      WriteS (f, "yy"); WN (Code);
	   ELSE
	      WI (Selector);
	   END;
	   WriteS (f, " "); WI (Name); WriteNl (f);
	END;
;
      RETURN;
     END (* WITH *) ;

  ELSE END;

 END ScanSpec;

PROCEDURE ErrorActions (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.Class:
(* line 245 "" *)
     WITH t^.Class DO
(* line 245 "" *)
      
	IF {Terminal, Referenced, HasAttributes} <= Properties THEN
	  WriteS (f, " case /* "); WE (Name); WriteS (f, " */ "); WN (Code); WriteS (f, ": "); WriteNl (f);
	  TheClass := t;
	  ForallAttributes (t, ErrorActions);
	  WriteS (f, " break;"); WriteNl (f);
	END;
;
      RETURN;
     END (* WITH *) ;

  | Tree.ActionPart:
(* line 253 "" *)
     WITH t^.ActionPart DO
(* line 253 "" *)
      
	ErrorActions (Actions);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Assign:
(* line 256 "" *)
     WITH t^.Assign DO
(* line 256 "" *)
      
	ErrorActions (Results); WriteS (f, "="); ErrorActions (Arguments); WriteS (f, ";"); WriteNl (f);
	ErrorActions (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Copy:
(* line 260 "" *)
     WITH t^.Copy DO
(* line 260 "" *)
      
	ErrorActions (Results); WriteS (f, " = "); ErrorActions (Arguments); WriteS (f, ";"); WriteNl (f);
	ErrorActions (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.TargetCode:
(* line 264 "" *)
     WITH t^.TargetCode DO
(* line 264 "" *)
      
	ErrorActions (Code); WriteS (f, ";"); WriteNl (f);
	ErrorActions (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Order:
(* line 268 "" *)
     WITH t^.Order DO
(* line 268 "" *)
      
	ErrorActions (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Check:
(* line 271 "" *)
     WITH t^.Check DO
(* line 271 "" *)
      
	IF Statement # NoTree THEN
	   IF Condition # NoTree THEN
	      WriteS (f, "if ("); ErrorActions (Condition); WriteS (f, ") ; else { "); ErrorActions (Statement); WriteS (f, "; }"); WriteNl (f);
	   ELSE
	      WriteS (f, "{ "); ErrorActions (Statement); WriteS (f, "; }"); WriteNl (f);
	   END;
	ELSE
	   WriteS (f, "(void) ("); ErrorActions (Condition); WriteS (f, ");"); WriteNl (f);
	END;
	ErrorActions (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Designator:
(* line 283 "" *)
     WITH t^.Designator DO
(* line 283 "" *)
      
	WI (Selector); WriteS (f, ":"); WI (Attribute);
	ErrorActions (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Ident:
(* line 287 "" *)
     WITH t^.Ident DO
(* line 287 "" *)
      
	TheAttr := IdentifyAttribute (TheClass, Attribute);
	IF TheAttr # NoTree THEN
	   WriteS (f, "pAttribute->"); 
	   IF Attribute = iPosition THEN
           ELSIF (String IN TheClass^.Class.Properties) AND NOT (HasSelector IN TheClass^.Class.Properties) THEN
	      WriteS (f, "yy"); WN (TheClass^.Class.Code); WriteS (f, "."); 
	   ELSE
	      WI (TheClass^.Class.Selector); WriteS (f, "."); 
	   END;
	END;
	WI (Attribute);
	ErrorActions (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Any:
(* line 301 "" *)
     WITH t^.Any DO
(* line 301 "" *)
      
	WriteString (f, Code);
	ErrorActions (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Anys:
(* line 305 "" *)
     WITH t^.Anys DO
(* line 305 "" *)
      
	ErrorActions (Layouts);
	ErrorActions (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.LayoutAny:
(* line 309 "" *)
     WITH t^.LayoutAny DO
(* line 309 "" *)
      
	WriteString (f, Code);
	ErrorActions (Next);
;
      RETURN;
     END (* WITH *) ;

  ELSE END;

 END ErrorActions;

PROCEDURE ScanVariant (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;
  IF (t^.Kind = Tree.Class) THEN
(* line 317 "" *)
     WITH t^.Class DO
(* line 317 "" *)
      
	IF {Terminal, Referenced, HasAttributes} <= Properties THEN
	  WriteS (f, "typedef struct { tPosition yyPos; "); 
	  TheClass := t;
	  ForallAttributes (t, RecordField);
          IF (String IN Properties) AND NOT (HasSelector IN Properties) THEN
	    WriteS (f, "} /* "); WE (Name); WriteS (f, " */ yy"); WN (Code); WriteS (f, ";"); WriteNl (f);
	  ELSE
	    WriteS (f, "} yy"); WI (Selector); WriteS (f, ";"); WriteNl (f);
	  END;
	END;
;
      RETURN;
     END (* WITH *) ;

  END;
 END ScanVariant;

PROCEDURE ScanAttr (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;
  IF (t^.Kind = Tree.Class) THEN
(* line 333 "" *)
     WITH t^.Class DO
(* line 333 "" *)
      
	IF {Terminal, Referenced, HasAttributes} <= Properties THEN
          IF (String IN Properties) AND NOT (HasSelector IN Properties) THEN
	    WriteS (f, " yy"); WN (Code); WriteS (f, " /* "); WE (Name); WriteS (f, " */ yy"); WN (Code); WriteS (f, ";"); WriteNl (f);
	  ELSE
	    WriteS (f, " yy"); WI (Selector); WriteS (f, " "); WI (Selector); WriteS (f, ";"); WriteNl (f);
	  END;
	END;
;
      RETURN;
     END (* WITH *) ;

  END;
 END ScanAttr;

PROCEDURE ParsVariant (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;
  IF (t^.Kind = Tree.Class) THEN
(* line 346 "" *)
     WITH t^.Class DO
(* line 346 "" *)
      
	IF {Nonterminal, Referenced, HasAttributes} <= Properties THEN
	  WriteS (f, "typedef struct { "); 
	  TheClass := t;
	  ForallAttributes (Attributes, RecordField);
	  GenExt (Extensions);
          IF (String IN Properties) AND NOT (HasSelector IN Properties) THEN
	    WriteS (f, "} /* "); WE (Name); WriteS (f, " */ yy"); WN (Name); WriteS (f, ";"); WriteNl (f);
	  ELSE
	    WriteS (f, "} yy"); WI (Selector); WriteS (f, ";"); WriteNl (f);
	  END;
	END;
	ParsVariant (Next);
;
      RETURN;
     END (* WITH *) ;

  END;
 END ParsVariant;

PROCEDURE GenExt (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;
  IF (t^.Kind = Tree.Class) THEN
(* line 364 "" *)
     WITH t^.Class DO
(* line 364 "" *)
      
	ForallAttributes (Attributes, RecordField);
	GenExt (Extensions);
	GenExt (Next);
;
      RETURN;
     END (* WITH *) ;

  END;
 END GenExt;

PROCEDURE Token (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;
  IF (t^.Kind = Tree.Class) THEN
(* line 373 "" *)
     WITH t^.Class DO
(* line 373 "" *)
      
	IF {Terminal, Referenced} <= Properties THEN
	   WriteName (Name); WriteS (f, " = "); WN (Code); WriteNl (f);
	END;
;
      RETURN;
     END (* WITH *) ;

  END;
 END Token;

PROCEDURE RecordField (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;
  IF (t^.Kind = Tree.Attribute) THEN
(* line 382 "" *)
     WITH t^.Attribute DO
(* line 382 "" *)
      
	IF (NoCodeAttr * Properties) = {} THEN 
	   IF (Nonterminal IN TheClass^.Class.Properties) OR (Name # iPosition) THEN
	      WI (Type); WriteS (f, " "); WI (Name); WriteS (f, "; "); 
	   END;
	END;
;
      RETURN;
     END (* WITH *) ;

  END;
 END RecordField;

PROCEDURE PrecDefs (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.LeftAssoc:
(* line 393 "" *)
     WITH t^.LeftAssoc DO
(* line 393 "" *)
      
	WriteS (f, "LEFT "); PrecDefs (Names); WriteNl (f);
	PrecDefs (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.RightAssoc:
(* line 397 "" *)
     WITH t^.RightAssoc DO
(* line 397 "" *)
      
	WriteS (f, "RIGHT"); PrecDefs (Names); WriteNl (f);
	PrecDefs (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.NonAssoc:
(* line 401 "" *)
     WITH t^.NonAssoc DO
(* line 401 "" *)
      
	WriteS (f, "NONE "); PrecDefs (Names); WriteNl (f);
	PrecDefs (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Name:
(* line 405 "" *)
     WITH t^.Name DO
(* line 405 "" *)
      
	WriteS (f, " "); WI (Name);
	PrecDefs (Next);
;
      RETURN;
     END (* WITH *) ;

  ELSE END;

 END PrecDefs;

PROCEDURE Grammar (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;
  IF (t^.Kind = Tree.Class) THEN
(* line 413 "" *)
     WITH t^.Class DO
(* line 413 "" *)
      
	IF Extensions^.Kind = Tree.NoClass THEN		
	   WITH TheClass^.Class DO
	      IF String IN Properties THEN WriteS (f, "yy"); WN (Name); ELSE WriteName (Name); END;
	   END;
	   WriteS (f, " : "); 
	   ActClass := t;
	   PrevActionIndex := 0;
	   IsImplicit := FALSE;
	   ForallAttributes (t, Rule);
	   IF Prec # NoIdent THEN WriteS (f, "PREC "); WI (Prec); WriteS (f, " "); END;
	   WriteS (f, "."); WriteNl (f);
	   PrevActionIndex := 0;
	   IsImplicit := TRUE;
	   ForallAttributes (t, Implicit);
	ELSE
	   Rule (Extensions);
	END;
;
      RETURN;
     END (* WITH *) ;

  END;
 END Grammar;

PROCEDURE Rule (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.Class:
(* line 436 "" *)
     WITH t^.Class DO
(* line 436 "" *)
      
	Grammar (t);
	Rule (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Child:
(* line 440 "" *)
     WITH t^.Child DO
(* line 440 "" *)
      
	IF {String, Nonterminal} <= Class^.Class.Properties THEN WriteS (f, "yy"); WN (Type); ELSE WriteName (Type); END; WriteS (f, " "); 
;
      RETURN;
     END (* WITH *) ;

  | Tree.ActionPart:
(* line 443 "" *)
     WITH t^.ActionPart DO
(* line 443 "" *)
      
	IF IsLast (ActClass, t) THEN
	   WriteS (f, "{"); 
	   IF PrevActionIndex # 0 THEN
	      Node := GetBaseClass (TheClass);
	      WITH Node^.Class DO
		 IF HasAttributes IN Properties THEN
		    WriteS (f, " $$."); 
		    IF String IN Properties THEN WriteS (f, "yy"); WN (Name); ELSE WI (Name); END;
		    WriteS (f, " = $"); WN (PrevActionIndex); WriteS (f, "."); 
		    IF String IN Properties THEN WriteS (f, "yy"); WN (Name); ELSE WI (Name); END;
		    WriteS (f, ";"); WriteNl (f);
		 END;
	      END;
	   END;
	   Rule (Actions);
	   WriteS (f, "} "); 
	ELSE
	   WriteS (f, "xx"); WN (Name); WriteS (f, " "); 
	END;
	PrevActionIndex := ParsIndex;
;
      RETURN;
     END (* WITH *) ;

  | Tree.Assign:
(* line 465 "" *)
     WITH t^.Assign DO
(* line 465 "" *)
      
	Rule (Results); WriteS (f, "="); Rule (Arguments); WriteS (f, ";"); WriteNl (f);
	Rule (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Copy:
(* line 469 "" *)
     WITH t^.Copy DO
(* line 469 "" *)
      
	Rule (Results); WriteS (f, " = "); Rule (Arguments); WriteS (f, ";"); WriteNl (f);
	Rule (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.TargetCode:
(* line 473 "" *)
     WITH t^.TargetCode DO
(* line 473 "" *)
      
	Rule (Code); WriteS (f, ";"); WriteNl (f);
	Rule (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Order:
(* line 477 "" *)
     WITH t^.Order DO
(* line 477 "" *)
      
	Rule (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Check:
(* line 480 "" *)
     WITH t^.Check DO
(* line 480 "" *)
      
	IF Statement # NoTree THEN
	   IF Condition # NoTree THEN
	      WriteS (f, "if ("); Rule (Condition); WriteS (f, ") ; else { "); Rule (Statement); WriteS (f, "; }"); WriteNl (f);
	   ELSE
	      WriteS (f, "{ "); Rule (Statement); WriteS (f, "; }"); 
	   END;
	ELSE
	   WriteS (f, "(void) ("); Rule (Condition); WriteS (f, ");"); WriteNl (f);
	END;
	Rule (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Designator:
(* line 492 "" *)
     WITH t^.Designator DO
(* line 492 "" *)
      
	TheAttr := IdentifyAttribute (ActClass, Selector);
	IF TheAttr # NoTree THEN
	  Node := TheAttr^.Child.Class;
	  IF Node # NoTree THEN
	    WriteS (f, "$"); 
	    IF NOT IsImplicit THEN
	       WN (TheAttr^.Child.ParsIndex);
	    ELSE
	       WN (SHORTINT (TheAttr^.Child.ParsIndex + 1 - ActActionIndex));
	    END;
	    IF Nonterminal IN Node^.Class.Properties THEN	
	      Node := GetBaseClass (Node);
	      IF (String IN Node^.Class.Properties) AND NOT (HasSelector IN Node^.Class.Properties) THEN
	        WriteS (f, ".yy"); WN (Node^.Class.Name);
	      ELSE
	        WriteS (f, "."); WI (Node^.Class.Name);
	      END;
	    ELSE						
	      WriteS (f, ".Scan"); 
	      IF Attribute = iPosition THEN
	      ELSIF (String IN Node^.Class.Properties) AND NOT (HasSelector IN Node^.Class.Properties) THEN
	        WriteS (f, ".yy"); WN (Node^.Class.Code);
	      ELSE
	        WriteS (f, "."); WI (Node^.Class.Selector);
	      END;
	    END;
	    WriteS (f, "."); WI (Attribute);
	  ELSE
	    WI (Selector); WriteS (f, ":"); WI (Attribute);
	  END;
	ELSE
	  WI (Selector); WriteS (f, ":"); WI (Attribute);
	END;
	Rule (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Ident:
(* line 528 "" *)
     WITH t^.Ident DO
(* line 528 "" *)
      
	TheAttr := IdentifyAttribute (ActClass, Attribute);
	Node := GetBaseClass (TheClass);
	IF TheAttr # NoTree THEN
	  IF (String IN Node^.Class.Properties) AND NOT (HasSelector IN Node^.Class.Properties) THEN
	    WriteS (f, "$$.yy"); WN (Node^.Class.Name); WriteS (f, "."); WI (Attribute);
	  ELSE
	    WriteS (f, "$$."); WI (Node^.Class.Name); WriteS (f, "."); WI (Attribute);
	  END;
	ELSE
	  WI (Attribute);
	END;
	Rule (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Any:
(* line 542 "" *)
     WITH t^.Any DO
(* line 542 "" *)
      
	WriteString (f, Code);
	Rule (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Anys:
(* line 546 "" *)
     WITH t^.Anys DO
(* line 546 "" *)
      
	Rule (Layouts);
	Rule (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.LayoutAny:
(* line 550 "" *)
     WITH t^.LayoutAny DO
(* line 550 "" *)
      
	WriteString (f, Code);
	Rule (Next);
;
      RETURN;
     END (* WITH *) ;

  ELSE END;

 END Rule;

PROCEDURE Implicit (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;
  IF (t^.Kind = Tree.ActionPart) THEN
(* line 558 "" *)
     WITH t^.ActionPart DO
(* line 558 "" *)
      
	IF NOT (Generated IN Properties) AND NOT IsLast (ActClass, t) THEN
	   INCL (Properties, Generated);
	   ActActionIndex := ParsIndex;
	   WriteS (f, "xx"); WN (Name); WriteS (f, " : {"); 
	   IF PrevActionIndex # 0 THEN
	      Node := GetBaseClass (TheClass);
	      WITH Node^.Class DO
		 IF HasAttributes IN Properties THEN
		    WriteS (f, " $$."); 
		    IF String IN Properties THEN WriteS (f, "yy"); WN (Name); ELSE WI (Name); END;
		    WriteS (f, " = $"); WN (SHORTINT (PrevActionIndex + 1 - ActActionIndex)); WriteS (f, "."); 
		    IF String IN Properties THEN WriteS (f, "yy"); WN (Name); ELSE WI (Name); END;
		    WriteS (f, ";"); WriteNl (f);
		 END;
	      END;
	   END;
	   Rule (Actions);
	   WriteS (f, "} ."); WriteNl (f);
	END;
	PrevActionIndex := ParsIndex;
;
      RETURN;
     END (* WITH *) ;

  END;
 END Implicit;

PROCEDURE WriteName (Name: tIdent);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF ( Name  =   (iOper)  ) THEN
(* line 583 "" *)
(* line 588 "" *)
      WriteBackslash (f);
(* line 588 "" *)
      WI (Name);
      RETURN;

  END;
  IF ( Name  =   (iLeft)  ) THEN
(* line 583 "" *)
(* line 588 "" *)
      WriteBackslash (f);
(* line 588 "" *)
      WI (Name);
      RETURN;

  END;
  IF ( Name  =   (iRight)  ) THEN
(* line 583 "" *)
(* line 588 "" *)
      WriteBackslash (f);
(* line 588 "" *)
      WI (Name);
      RETURN;

  END;
  IF ( Name  =   (iNone)  ) THEN
(* line 583 "" *)
(* line 588 "" *)
      WriteBackslash (f);
(* line 588 "" *)
      WI (Name);
      RETURN;

  END;
  IF ( Name  =   (iPrec)  ) THEN
(* line 583 "" *)
(* line 588 "" *)
      WriteBackslash (f);
(* line 588 "" *)
      WI (Name);
      RETURN;

  END;
  IF ( Name  =   (iRule)  ) THEN
(* line 583 "" *)
(* line 588 "" *)
      WriteBackslash (f);
(* line 588 "" *)
      WI (Name);
      RETURN;

  END;
(* line 589 "" *)
(* line 589 "" *)
      WI (Name);
      RETURN;

 END WriteName;

PROCEDURE BeginGramC;
 BEGIN
(* line 94 "" *)

   ArrayToString ("OPER"	, s); iOper	:= MakeIdent (s);
   ArrayToString ("RIGHT"	, s); iRight	:= MakeIdent (s);
   ArrayToString ("LEFT"	, s); iLeft	:= MakeIdent (s);
   ArrayToString ("NONE"	, s); iNone	:= MakeIdent (s);
   ArrayToString ("PREC"	, s); iPrec	:= MakeIdent (s);
   ArrayToString ("RULE"	, s); iRule	:= MakeIdent (s);


 END BeginGramC;

PROCEDURE CloseGramC;
 BEGIN

 END CloseGramC;

PROCEDURE yyExit;
 BEGIN
  IO.CloseIO; System.Exit (1);
 END yyExit;

BEGIN
 yyf   := IO.StdOutput;
 Exit  := yyExit;
 BeginGramC;
END GramC.

