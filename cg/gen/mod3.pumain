(* Ich, Doktor Josef Grosch, Informatiker, 23.5.1989 *)

(* Changes: Rodney M. Bates
   July 99 Add VAR to rule local decls. 
*) 

TRAFO EvalMod
TREE Tree
PUBLIC EvalDefMod EvalImplMod EvalImplHead GenEvaluator

EXPORT { VAR Class: Tree.tTree; }

GLOBAL {

FROM SYSTEM	IMPORT ADR;
FROM IO		IMPORT WriteS, WriteNl;
FROM StringMem	IMPORT WriteString;
FROM Texts	IMPORT WriteText;
FROM Sets	IMPORT IsElement;
FROM TreeMod1	IMPORT BSS;
FROM TreeMod2	IMPORT WriteLine;
FROM EvalMod3	IMPORT ToBit0;

FROM Tree	IMPORT
   NoTree	, tTree		, Child		, NoCodeClass	,
   Computed	, Reverse	, Write		, Read		,
   Inherited	, Synthesized	, Input		, Output	,
   CopyDef	, CopyUse	, Thread	, Virtual	,
   Test		, Left		, Right		,
   NonBaseComp	, First		, Dummy		, Trace		,
   Options	, TreeRoot	, iModule	, iMain		,
   itTree	, ForallClasses	, f		, WI	, WN	,
   IdentifyClass, IdentifyAttribute, GrammarClass, cOAG		,
   MaxVisit	;

VAR
   n		: SHORTCARD;
   Node		,
   Attr		,
   ChildsClass	: tTree;
}

PROCEDURE EvalDefMod (t: Tree)
	
Ag (..) :- {
	WriteS (f, "DEFINITION MODULE "); WI (EvalName); WriteS (f, ";"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "IMPORT "); WI (iMain); WriteS (f, ";"); WriteNl (f);
	WriteLine (EvalCodes^.Codes.ImportLine);
	WriteText (f, EvalCodes^.Codes.Import);
	Node := Modules;
	WHILE Node^.Kind = Tree.Module DO
	   WriteLine (Node^.Module.EvalCodes^.Codes.ImportLine);
	   WriteText (f, Node^.Module.EvalCodes^.Codes.Import);
	   Node := Node^.Module.Next;
	END;
	WriteLine (EvalCodes^.Codes.ExportLine);
	WriteText (f, EvalCodes^.Codes.Export);
	Node := Modules;
	WHILE Node^.Kind = Tree.Module DO
	   WriteLine (Node^.Module.EvalCodes^.Codes.ExportLine);
	   WriteText (f, Node^.Module.EvalCodes^.Codes.Export);
	   Node := Node^.Module.Next;
	END;
	WriteNl (f);
	WriteS (f, "PROCEDURE Eval (yyt: "); WI (iMain); WriteS (f, "."); WI (itTree); WriteS (f, ");"); WriteNl (f);
	WriteS (f, "PROCEDURE Begin"); WI (EvalName); WriteS (f, ";"); WriteNl (f);
	WriteS (f, "PROCEDURE Close"); WI (EvalName); WriteS (f, ";"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "END "); WI (EvalName); WriteS (f, "."); WriteNl (f);
}; .

PROCEDURE EvalImplHead (t: Tree)
	
Ag (..) :- {
	WriteS (f, "# define DEP(a, b) a"); WriteNl (f);
	WriteS (f, "# define SELF yyt"); WriteNl (f);
	WriteS (f, "IMPLEMENTATION MODULE "); WI (EvalName); WriteS (f, ";"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "IMPORT SYSTEM, "); WI (iMain); WriteS (f, ";"); WriteNl (f);
      IF IsElement (ORD ('Y'), Options) OR
         IsElement (ORD ('Z'), Options) THEN
	WriteS (f, "IMPORT Layout, Strings, Idents, Texts, Sets;"); WriteNl (f);
      END;
      IF IsElement (ORD ('Y'), Options) OR
         IsElement (ORD ('Z'), Options) OR
         IsElement (ORD ('L'), Options) OR
         IsElement (ORD ('9'), Options) THEN
	WriteS (f, "IMPORT IO;"); WriteNl (f);
      END;
      IF IsElement (ORD ('9'), Options) THEN
	WriteS (f, "IMPORT General;"); WriteNl (f);
      END;
	WriteLine (EvalCodes^.Codes.GlobalLine);
	WriteText (f, EvalCodes^.Codes.Global);
	Node := Modules;
	WHILE Node^.Kind = Tree.Module DO
	   WriteLine (Node^.Module.EvalCodes^.Codes.GlobalLine);
	   WriteText (f, Node^.Module.EvalCodes^.Codes.Global);
	   Node := Node^.Module.Next;
	END;
	WriteNl (f);
	WriteS (f, "VAR yyb	: BOOLEAN;"); WriteNl (f);
      IF IsElement (ORD ('X'), Options) THEN
	WriteS (f, '# include "yy'); WI (iModule); WriteS (f, '.w"'); WriteNl (f);
	WriteS (f, "# define yyWrite"); WI (iMain); WriteS (f, "(a) "); WI (iMain); WriteS (f, ".Write"); WI (iMain); WriteS (f, " (yyf, a)"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "VAR yyf	: IO.tFile;"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "PROCEDURE yyWriteHex (VAR yyx: ARRAY OF SYSTEM.BYTE);"); WriteNl (f);
	WriteS (f, " VAR yyi	: INTEGER;"); WriteNl (f);
	WriteS (f, " BEGIN"); WriteNl (f);
	WriteS (f, "  IF yyTrace THEN"); WriteNl (f);
	WriteS (f, "   FOR yyi := 0 TO INTEGER (HIGH (yyx)) DO"); WriteNl (f);
	WriteS (f, "    IO.WriteN (yyf, ORD (CHAR (yyx [yyi])), 2, 16);"); WriteNl (f);
	WriteS (f, "    IO.WriteC (yyf, ' ');"); WriteNl (f);
	WriteS (f, "   END;"); WriteNl (f);
	WriteS (f, "  END;"); WriteNl (f);
	WriteS (f, " END yyWriteHex;"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "PROCEDURE yyWriteNl;"); WriteNl (f);
	WriteS (f, " BEGIN IF yyTrace THEN"); WriteNl (f);
	WriteS (f, "  IO.WriteNl (IO.StdOutput); IO.WriteFlush (IO.StdOutput);"); WriteNl (f);
	WriteS (f, " END; END yyWriteNl;"); WriteNl (f);
      END;
      IF IsElement (ORD ('Y'), Options) OR
         IsElement (ORD ('Z'), Options) THEN
	WriteNl (f);
	WriteS (f, "CONST yyTrace = TRUE;"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "PROCEDURE yyWriteS (yys: ARRAY OF CHAR);"); WriteNl (f);
	WriteS (f, " BEGIN"); WriteNl (f);
	WriteS (f, "  IO.WriteS (IO.StdOutput, yys); Layout.WriteSpaces (IO.StdOutput, 15 - INTEGER (HIGH (yys)));"); WriteNl (f);
	WriteS (f, " END yyWriteS;"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "PROCEDURE yyWriteType (yyt: "); WI (iMain); WriteS (f, "."); WI (itTree); WriteS (f, ");"); WriteNl (f);
	WriteS (f, " BEGIN"); WriteNl (f);
	WriteS (f, "  CASE yyt^.Kind OF"); WriteNl (f);
	ForallClasses (Classes, WriteType);
	WriteS (f, "  ELSE"); WriteNl (f);
	WriteS (f, "  END;"); WriteNl (f);
	WriteS (f, " END yyWriteType;"); WriteNl (f);
      END;
      IF IsElement (ORD ('X'), Options) THEN
	WriteNl (f);
	WriteS (f, "PROCEDURE yyWriteEval (yyt: "); WI (iMain); WriteS (f, "."); WI (itTree); WriteS (f, "; yys: ARRAY OF CHAR);"); WriteNl (f);
	WriteS (f, " BEGIN"); WriteNl (f);
	WriteS (f, "  IF yyTrace THEN"); WriteNl (f);
	WriteS (f, "   yyWriteType (yyt);"); WriteNl (f);
	WriteS (f, "   IO.WriteS (IO.StdOutput, ' e ');"); WriteNl (f);
	WriteS (f, "   IO.WriteS (IO.StdOutput, yys);"); WriteNl (f);
	WriteS (f, "   Layout.WriteSpaces (IO.StdOutput, 23 - INTEGER (HIGH (yys)));"); WriteNl (f);
	WriteS (f, "   IO.WriteS (IO.StdOutput, ' = ');"); WriteNl (f);
	WriteS (f, "   IO.WriteFlush (IO.StdOutput);"); WriteNl (f);
	WriteS (f, "  END;"); WriteNl (f);
	WriteS (f, " END yyWriteEval;"); WriteNl (f);
      ELSIF IsElement (ORD ('Y'), Options) THEN
	WriteNl (f);
	WriteS (f, "PROCEDURE yyWriteEval (yyt: "); WI (iMain); WriteS (f, "."); WI (itTree); WriteS (f, "; yys: ARRAY OF CHAR);"); WriteNl (f);
	WriteS (f, " BEGIN"); WriteNl (f);
	WriteS (f, "  IF yyTrace THEN"); WriteNl (f);
	WriteS (f, "   yyWriteType (yyt);"); WriteNl (f);
	WriteS (f, "   IO.WriteS (IO.StdOutput, ' e ');"); WriteNl (f);
	WriteS (f, "   IO.WriteS (IO.StdOutput, yys);"); WriteNl (f);
	WriteS (f, "   IO.WriteNl (IO.StdOutput);"); WriteNl (f);
	WriteS (f, "   IO.WriteFlush (IO.StdOutput);"); WriteNl (f);
	WriteS (f, "  END;"); WriteNl (f);
	WriteS (f, " END yyWriteEval;"); WriteNl (f);
      END;
      IF IsElement (ORD ('Z'), Options) THEN
	WriteNl (f);
	WriteS (f, "PROCEDURE yyWriteVisit (yyt: "); WI (iMain); WriteS (f, "."); WI (itTree); WriteS (f, "; yys: ARRAY OF CHAR);"); WriteNl (f);
	WriteS (f, " BEGIN"); WriteNl (f);
	WriteS (f, "  IF yyTrace THEN"); WriteNl (f);
	WriteS (f, "   yyWriteType (yyt);"); WriteNl (f);
	WriteS (f, "   IO.WriteS (IO.StdOutput, ' v ');"); WriteNl (f);
	WriteS (f, "   IO.WriteS (IO.StdOutput, yys);"); WriteNl (f);
	WriteS (f, "   IO.WriteNl (IO.StdOutput);"); WriteNl (f);
	WriteS (f, "   IO.WriteFlush (IO.StdOutput);"); WriteNl (f);
	WriteS (f, "  END;"); WriteNl (f);
	WriteS (f, " END yyWriteVisit;"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "PROCEDURE yyVisitParent (yyt: "); WI (iMain); WriteS (f, "."); WI (itTree); WriteS (f, ");"); WriteNl (f);
	WriteS (f, " BEGIN yyWriteVisit (yyt, 'parent'); END yyVisitParent;"); WriteNl (f);
      END;
}; .

PROCEDURE EvalImplMod (t: Tree)
	
Ag (..) :- {
	EvalImplHead (t);
      IF NOT IsElement (ORD ('9'), Options) THEN
	WriteNl (f);
	WriteS (f, "PROCEDURE Eval (yyt: "); WI (iMain); WriteS (f, "."); WI (itTree); WriteS (f, ");"); WriteNl (f);
	WriteS (f, " BEGIN "); 
	IF MaxVisit > 0 THEN WriteS (f, "yyVisit1 (yyt); "); END;
	WriteS (f, "END Eval;"); WriteNl (f);
      ELSE
	WriteNl (f);
	WriteS (f, "VAR xxStack: CARDINAL;"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "PROCEDURE Eval (yyt: "); WI (iMain); WriteS (f, "."); WI (itTree); WriteS (f, ");"); WriteNl (f);
	WriteS (f, " VAR xxHigh: BOOLEAN;"); WriteNl (f);
	WriteS (f, " BEGIN"); WriteNl (f);
	WriteS (f, "  xxStack := MAX (INTEGER);"); WriteNl (f);
	IF MaxVisit > 0 THEN
	WriteS (f, "  yyVisit1 (yyt);"); WriteNl (f);
	END;
	WriteS (f, "  IO.WriteS (IO.StdOutput, 'Stacksize ');"); WriteNl (f);
	WriteS (f, "  IO.WriteI (IO.StdOutput, CARDINAL (SYSTEM.ADR (xxHigh)) - xxStack, 0);"); WriteNl (f);
	WriteS (f, "  IO.WriteNl (IO.StdOutput);"); WriteNl (f);
	WriteS (f, " END Eval;"); WriteNl (f);
      END;
	WriteNl (f);
	FOR n := 1 TO MaxVisit DO
	   WriteS (f, "PROCEDURE yyVisit"); WN (n); WriteS (f, " (yyt: "); WI (iMain); WriteS (f, "."); WI (itTree); WriteS (f, ");"); WriteNl (f);
	   WriteLine (EvalCodes^.Codes.LocalLine);
	   WriteText (f, EvalCodes^.Codes.Local);
	   Node := Modules;
	   WHILE Node^.Kind = Tree.Module DO
	      WriteLine (Node^.Module.EvalCodes^.Codes.LocalLine);
	      WriteText (f, Node^.Module.EvalCodes^.Codes.Local);
	      Node := Node^.Module.Next;
	   END;
      IF IsElement (ORD ('9'), Options) THEN
	   WriteS (f, " VAR xxLow: BOOLEAN;"); WriteNl (f);
	   WriteS (f, " BEGIN"); WriteNl (f);
	   WriteS (f, "  xxStack := General.Min (xxStack, CARDINAL (SYSTEM.ADR (xxLow)));"); WriteNl (f);
      ELSE
	   WriteS (f, " BEGIN"); WriteNl (f);
      END;
	   WriteS (f, "  CASE yyt^.Kind OF"); WriteNl (f);
	   IF cOAG IN GrammarClass THEN		(* generate evaluator	*)
	      ForallClasses (Classes, GenEvaluator);
	   END;
	   WriteS (f, "  ELSE"); WriteNl (f);
      IF IsElement (ORD ('Z'), Options) THEN
	   WriteS (f, "   yyVisitParent (yyt);"); WriteNl (f);
      END;
	   WriteS (f, "  END;"); WriteNl (f);
	   WriteS (f, " END yyVisit"); WN (n); WriteS (f, ";"); WriteNl (f);
	   WriteNl (f);
	END;
	WriteS (f, "PROCEDURE Begin"); WI (EvalName); WriteS (f, ";"); WriteNl (f);
	WriteS (f, " BEGIN"); WriteNl (f);
	WriteLine (EvalCodes^.Codes.BeginLine);
	WriteText (f, EvalCodes^.Codes.Begin);
	Node := Modules;
	WHILE Node^.Kind = Tree.Module DO
	   WriteLine (Node^.Module.EvalCodes^.Codes.BeginLine);
	   WriteText (f, Node^.Module.EvalCodes^.Codes.Begin);
	   Node := Node^.Module.Next;
	END;
	WriteS (f, " END Begin"); WI (EvalName); WriteS (f, ";"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "PROCEDURE Close"); WI (EvalName); WriteS (f, ";"); WriteNl (f);
	WriteS (f, " BEGIN"); WriteNl (f);
	WriteLine (EvalCodes^.Codes.CloseLine);
	WriteText (f, EvalCodes^.Codes.Close);
	Node := Modules;
	WHILE Node^.Kind = Tree.Module DO
	   WriteLine (Node^.Module.EvalCodes^.Codes.CloseLine);
	   WriteText (f, Node^.Module.EvalCodes^.Codes.Close);
	   Node := Node^.Module.Next;
	END;
	WriteS (f, " END Close"); WI (EvalName); WriteS (f, ";"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "BEGIN"); WriteNl (f);
      IF IsElement (ORD ('X'), Options) THEN
	WriteS (f, " yyf := IO.StdOutput;"); WriteNl (f);
      END;
	WriteS (f, "END "); WI (EvalName); WriteS (f, "."); WriteNl (f);
}; .


PROCEDURE WriteType (t: Tree)

Class (..) :-
	NoCodeClass * Properties = {{}};
	Trace IN Properties;
	WriteS (f, "| "); WI (TreeRoot^.Ag.TreeName); WriteS (f, "."); WI (Name); WriteS (f, ": yyWriteS ('"); WI (Name); WriteS (f, "');"); WriteNl (f);
	.

PROCEDURE GenEvaluator (t: Tree)

Class (..) :-
	NoCodeClass * Properties = {{}};
{	IF (Generated = InstCount) OR (Visits < n) THEN RETURN; END;
	WriteS (f, "| "); WI (TreeRoot^.Ag.TreeName); WriteS (f, "."); WI (Name); WriteS (f, ":"); WriteNl (f);
	Class := t;
	LOOP
	   IF Generated = InstCount THEN EXIT; END;
	   INC (Generated);
	   WITH Instance^ [Instance^ [Generated].Order] DO
	      IF (Left IN Properties) AND (Attribute^.Child.Partition > n) THEN
	         DEC (Generated); EXIT;
	      END;
	      IF ({Inherited, Right, First} <= Properties) AND NOT (Virtual IN Properties) THEN
      IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN
		 WriteS (f, "yyWriteEval (yyt, '"); WI (Selector^.Child.Name); WriteS (f, ":"); WI (Attribute^.Child.Name); WriteS (f, "');"); WriteNl (f);
		 IF Action # ADR (Action) THEN GenEvaluator (Action); END; WriteNl (f);
		 IF (Attribute^.Kind = Tree.Child) OR (Attribute^.Attribute.Type = itTree) THEN
		    WriteS (f, "write"); WI (itTree);
		    WriteS (f, " (yyt^."); WI (Name); WriteS (f, "."); WI (Selector^.Child.Name);
		    WriteS (f, "^."); WI (Selector^.Child.Type); WriteS (f, "."); WI (Attribute^.Child.Name); WriteS (f, ")"); WriteNl (f);
		 ELSE
		    WriteS (f, "write"); WI (Attribute^.Child.Type);
		    WriteS (f, " (yyt^."); WI (Name); WriteS (f, "."); WI (Selector^.Child.Name);
		    WriteS (f, "^."); WI (Selector^.Child.Type); WriteS (f, "."); WI (Attribute^.Child.Name); WriteS (f, ") yyWriteNl;"); WriteNl (f);
		 END;
      ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN
		 WriteS (f, "yyWriteEval (yyt, '"); WI (Selector^.Child.Name); WriteS (f, ":"); WI (Attribute^.Child.Name); WriteS (f, "');"); WriteNl (f);
		 IF Action # ADR (Action) THEN GenEvaluator (Action); END;
      ELSE
		 IF Action # ADR (Action) THEN GenEvaluator (Action); END;
      END;
	      END;
	      IF ({Synthesized, Left, First} <= Properties) AND ({Dummy, Virtual} * Properties = {}) THEN
      IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN
		 WriteS (f, "yyWriteEval (yyt, '"); WI (Attribute^.Child.Name); WriteS (f, "');"); WriteNl (f);
		 IF Action # ADR (Action) THEN GenEvaluator (Action); END; WriteNl (f);
		 IF Test IN Properties THEN
		    WriteS (f, "writeBOOLEAN (yyb) yyWriteNl;"); WriteNl (f);
		 ELSIF (Attribute^.Kind = Tree.Child) OR (Attribute^.Attribute.Type = itTree) THEN
		    WriteS (f, "write"); WI (itTree);
		    WriteS (f, " (yyt^."); WI (Name); WriteS (f, "."); WI (Attribute^.Child.Name); WriteS (f, ")"); 
		 ELSE
		    WriteS (f, "write"); WI (Attribute^.Child.Type);
		    WriteS (f, " (yyt^."); WI (Name); WriteS (f, "."); WI (Attribute^.Child.Name); WriteS (f, ") yyWriteNl;"); WriteNl (f);
		 END;
      ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN
		 WriteS (f, "yyWriteEval (yyt, '"); WI (Attribute^.Child.Name); WriteS (f, "');"); WriteNl (f);
		 IF Action # ADR (Action) THEN GenEvaluator (Action); END;
      ELSE
		 IF Action # ADR (Action) THEN GenEvaluator (Action); END;
      END;
	      END;
	      IF ({Synthesized, Right, First} <= Properties) AND
		 (Attribute^.Child.Partition <= Selector^.Child.Class^.Class.Visits) THEN
      IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
		 WriteS (f, "yyWriteVisit (yyt, '"); WI (Selector^.Child.Name); WriteS (f, " "); 
		 WN (Attribute^.Child.Partition); WriteS (f, "');"); WriteNl (f);
      END;
		 WriteS (f, "yyVisit"); WN (Attribute^.Child.Partition);
		 WriteS (f, " (yyt^."); WI (Name); WriteS (f, "."); WI (Selector^.Child.Name); WriteS (f, ");"); WriteNl (f);
	      END;
	   END;
	END;
      IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
	WriteS (f, "yyVisitParent (yyt);"); WriteNl (f);
      END;
}; .
Assign (..) :- {
	WriteLine (Pos);
	GenEvaluator (Results); WriteS (f, ":="); GenEvaluator (Arguments); WriteS (f, ";"); WriteNl (f);
}; .
Copy (..) :- {
	WriteLine (Pos);
	GenEvaluator (Results); WriteS (f, ":="); GenEvaluator (Arguments); WriteS (f, ";"); WriteNl (f);
}; .
TargetCode (..) :- {
	WriteLine (Pos);
	GenEvaluator (Code); WriteNl (f);
}; .
Check (..) :- {
	WriteLine (Pos);
	IF Condition # NoTree THEN
      IF IsElement (ORD ('X'), Options) THEN
	   WriteS (f, "yyb := "); GenEvaluator (Condition); WriteS (f, "; IF NOT yyb THEN "); 
      ELSE
	   WriteS (f, "IF NOT ("); GenEvaluator (Condition); WriteS (f, ") THEN "); 
      END;
	   GenEvaluator (Statement); WriteNl (f);
	   IF Actions^.Kind = Tree.Check THEN
	      WriteS (f, "ELSE"); WriteNl (f);
	      GenEvaluator (Actions);
	   END;
	   WriteS (f, " END;"); WriteNl (f);
	ELSE
      IF IsElement (ORD ('X'), Options) THEN
	   WriteS (f, "yyb := FALSE; "); 
      END;
	   GenEvaluator (Statement); WriteS (f, ";"); WriteNl (f);
	   GenEvaluator (Actions);
	END;
}; .
Designator (..) :- {
	Attr := IdentifyAttribute (Class, Selector);
	IF Attr # NoTree THEN
	   ChildsClass := Attr^.Child.Class;
	   Attr := IdentifyAttribute (ChildsClass, Attribute);
	   IF NOT (Virtual IN Attr^.Attribute.Properties) THEN
	      WriteS (f, "yyt^."); WI (Class^.Class.Name); WriteS (f, "."); 
	      WI (Selector); WriteS (f, "^."); WI (ChildsClass^.Class.Name); WriteS (f, "."); WI (Attribute);
	   END;
	ELSE
	   WI (Selector); WriteS (f, ":"); WI (Attribute);
	END;
	GenEvaluator (Next);
}; .
Ident (..) :- {
	Attr := IdentifyAttribute (Class, Attribute);
	IF Attr # NoTree THEN
	   IF NOT (Virtual IN Attr^.Attribute.Properties) THEN
	      WriteS (f, "yyt^."); WI (Class^.Class.Name); WriteS (f, "."); WI (Attribute);
	   END;
	ELSE
	   WI (Attribute);
	END;
	GenEvaluator (Next);
}; .
Remote (..) :-
   VAR TheClass : Class ; 
   VAR k : INTEGER ;
   TheClass := IdentifyClass (TreeRoot^.Ag.Classes, Type);
{  IF TheClass # NoTree THEN
      Attr := IdentifyAttribute (TheClass, Attribute);
      IF Attr # NoTree THEN
	 WITH Attr^.Attribute DO
	    k := ToBit0 (TheClass, AttrIndex);
	    IF Synthesized IN Properties THEN
	       WriteS (f, "REMOTE_SYN (yyIsComp"); WN (k DIV BSS); WriteS (f, ", "); WN (k MOD BSS); WriteS (f, ", yyS"); WN (k); WriteS (f, ", "); 
	       GenEvaluator (Designators); WriteS (f, ", "); WI (t^.Remote.Type); WriteS (f, ", "); WI (Attribute); WriteS (f, ")"); 
	    ELSIF Inherited IN Properties THEN
	       WriteS (f, "REMOTE_INH (yyIsComp"); WN (k DIV BSS); WriteS (f, ", "); WN (k MOD BSS); WriteS (f, ", "); WN (k); WriteS (f, ", "); 
	       GenEvaluator (Designators); WriteS (f, ", "); WI (t^.Remote.Type); WriteS (f, ", "); WI (Attribute); WriteS (f, ")"); 
	    ELSE
	       GenEvaluator (Designators); WriteS (f, "^."); WI (t^.Remote.Type); WriteS (f, "."); WI (Attribute);
	    END;
	 END;
      END;
   END;
   GenEvaluator (Next);
}; .
Any (..) :- {
	WriteString (f, Code);
	GenEvaluator (Next);
}; .
Anys (..) :- {
	GenEvaluator (Layouts);
	GenEvaluator (Next);
}; .
LayoutAny (..) :- {
	WriteString (f, Code);
	GenEvaluator (Next);
}; .

