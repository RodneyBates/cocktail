
(* file MThree6.puma 

   Generation of specialized tree converter from Gnat tree to 
   semantically equivalent cg tree. 
   Rodney M. Bates 10-97 

*)

TRAFO GenGnat 
TREE Tree
PUBLIC GnatModule 

GLOBAL {

(* IMPORT IO; This is already generated by puma *) 
FROM IO		IMPORT WriteS, WriteNl;
IMPORT Idents , Errors ; 
FROM Idents	IMPORT tIdent;
FROM Sets       IMPORT IsElement;
FROM Tree	IMPORT
   NoTree	, tTree		, 
   Class	, Child		, Attribute	, 
   NoCodeAttr	, NoCodeClass	, Low           , 
   iNoTree	, Options       , 
   itTree	, iMain		, iModule	, f		,
   WI	        , ForallClasses	, ForallAttributes, 
   IdentifyClass ;

IMPORT Positions , Strings;

VAR Node : tTree;
VAR gNClassNonEmptyClass : tTree ; 
VAR gEntityClass : tTree ; 
VAR gIdentNext : tIdent ;
VAR gIdentPrev : tIdent ;
VAR gIdentIsListMember : tIdent ;
VAR gIdentLink : tIdent ;
VAR gIdentSloc : tIdent ;
VAR gIdentIsRewriteSubstitution : tIdent ;
VAR gIdentIsRewriteInsertion : tIdent ;
VAR gIdentComesFromSource : tIdent ;
VAR gIdentAnalyzed : tIdent ;
VAR gIdentErrorPosted : tIdent ;
VAR gIdentParenCount : tIdent ;
VAR gIdentHasDynamicLengthCheck : tIdent ;
VAR gIdentHasDynamicRangeCheck : tIdent ;
VAR gIdentDiscriminantConstraint : tIdent ;
VAR gIdentPrimitiveOperations : tIdent ;
VAR gIdentPrivalsChain : tIdent ;
VAR gIdentChars : tIdent ;
VAR gIdentNextEntity : tIdent ;
VAR gIdentScope : tIdent ;
VAR gIdentHomonym : tIdent ;
VAR gIdentEtype : tIdent ;
VAR gIdentEinfo : tIdent ;
VAR gIdentSinfo : tIdent ;
VAR gIdentNClassNonEmpty : tIdent ;
VAR gIdentNClassEntity : tIdent ;
VAR gFieldInterface : tIdent ;
VAR gString : Strings . tString ; 

PROCEDURE WG ( Ident : tIdent ) 
; VAR I : CARDINAL 
; VAR LString : Strings . tString 
; VAR LPrevChar , LChar , LNextChar : CHAR 
; VAR LLength : CARDINAL 
; BEGIN 
    Idents . GetString ( Ident , LString ) 
  ; LLength := Strings . Length ( LString )  
  ; IF LLength > 0 
    THEN 
    ; I := 1 
    ; LPrevChar := ' ' 
    ; LChar := Strings . Char ( LString , 1 ) 
    ; LOOP 
        IF I < LLength 
        THEN 
          INC ( I )
        ; LNextChar := Strings . Char ( LString , I ) 
        ELSIF I = LLength  
        THEN 
          INC ( I )
        ; LNextChar := ' ' 
        ELSE EXIT 
        END (* IF *) 
      ; IF  ( ( ( 'a' <= LPrevChar ) AND ( LPrevChar <= 'z' ) ) 
              AND ( ( ( '0' <= LChar ) AND ( LChar <= '9' ) ) 
                    OR ( ( 'A' <= LChar ) AND ( LChar <= 'Z' ) ) 
                  ) 
            ) OR ( ( ( 'A' <= LPrevChar ) AND ( LPrevChar <= 'Z' ) ) 
                   AND ( ( 'A' <= LChar ) AND ( LChar <= 'Z' ) ) 
                   AND ( ( 'a' <= LNextChar ) AND ( LNextChar <= 'z' ) ) 
                 ) 
        THEN IO . WriteC ( f , '_' ) 
        END (* IF *) 
      ; IO . WriteC ( f , LChar ) 
      ; LPrevChar := LChar 
      ; LChar := LNextChar 
      END (* LOOP *) 
    END (* IF *) 
  END WG; 

PROCEDURE IsDescendedFrom ( Descendent : tTree ; Ancestor : tTree ) : BOOLEAN 
; VAR LClass : tTree 
; BEGIN
    IF Ancestor = NoTree THEN RETURN FALSE 
    ELSIF Tree . IsType ( Ancestor , Tree . NoClass ) THEN RETURN FALSE 
    ELSIF NOT Tree . IsType ( Ancestor , Tree . Class ) 
    THEN 
      Errors . MessageI
        ( 'IsDescendedFrom, Ancestor not Class' 
        , Errors . Fatal 
        , Positions . NoPosition 
        , Errors . Integer 
        , SYSTEM . ADR ( Ancestor ^ . Kind )  
        ) 
    ELSE 
      LClass := Descendent 
    ; LOOP 
        IF LClass = Ancestor THEN RETURN TRUE 
        ELSIF LClass  = NoTree THEN RETURN FALSE 
        ELSIF Tree . IsType ( LClass , Tree . NoClass ) THEN RETURN FALSE 
        ELSIF NOT Tree . IsType ( LClass , Tree . Class ) 
        THEN 
          Errors . MessageI
            ( 'IsDescendedFrom, LClass not Class' 
            , Errors . Fatal 
            , Positions . NoPosition 
            , Errors . Integer 
            , SYSTEM . ADR ( LClass ^ . Kind )
            ) 
        ELSE 
          LClass := LClass ^ . Class . BaseClass 
        END (* IF *) 
      END (* LOOP *) 
    END (* IF *) 
  END IsDescendedFrom ; 
}


(*
BEGIN 
  {  }
*)

PROCEDURE GnatModule (t: Tree)

Ag (..) :- {
      IF IsElement (ORD ('~'), Options) THEN

        Strings . ArrayToString ( 'Next' , gString ) ; 
        gIdentNext := Idents . MakeIdent ( gString ) ;
        Strings . ArrayToString ( 'Prev' , gString ) ; 
        gIdentPrev := Idents . MakeIdent ( gString ) ;
        Strings . ArrayToString ( 'IsListMember' , gString ) ; 
        gIdentIsListMember := Idents . MakeIdent ( gString ) ;
        Strings . ArrayToString ( 'Link' , gString ) ; 
        gIdentLink := Idents . MakeIdent ( gString ) ;
        Strings . ArrayToString ( 'Sloc' , gString ) ; 
        gIdentSloc := Idents . MakeIdent ( gString ) ;
        Strings . ArrayToString ( 'IsRewriteSubstitution' , gString ) ; 
        gIdentIsRewriteSubstitution := Idents . MakeIdent ( gString ) ;
        Strings . ArrayToString ( 'IsRewriteInsertion' , gString ) ; 
        gIdentIsRewriteInsertion := Idents . MakeIdent ( gString ) ;
        Strings . ArrayToString ( 'ComesFromSource' , gString ) ; 
        gIdentComesFromSource := Idents . MakeIdent ( gString ) ;
        Strings . ArrayToString ( 'Analyzed' , gString ) ; 
        gIdentAnalyzed := Idents . MakeIdent ( gString ) ;
        Strings . ArrayToString ( 'ErrorPosted' , gString ) ; 
        gIdentErrorPosted := Idents . MakeIdent ( gString ) ;
        Strings . ArrayToString ( 'ParenCount' , gString ) ; 
        gIdentParenCount := Idents . MakeIdent ( gString ) ;
        Strings . ArrayToString ( 'HasDynamicLengthCheck' , gString ) ; 
        gIdentHasDynamicLengthCheck := Idents . MakeIdent ( gString ) ;
        Strings . ArrayToString ( 'DiscriminantConstraint' , gString ) ; 
        gIdentDiscriminantConstraint := Idents . MakeIdent ( gString ) ;
        Strings . ArrayToString ( 'PrimitiveOperations' , gString ) ; 
        gIdentPrimitiveOperations := Idents . MakeIdent ( gString ) ;
        Strings . ArrayToString ( 'PrivalsChain' , gString ) ; 
        gIdentPrivalsChain := Idents . MakeIdent ( gString ) ;
        Strings . ArrayToString ( 'HasDynamicRangeCheck' , gString ) ; 
        gIdentHasDynamicRangeCheck := Idents . MakeIdent ( gString ) ;
        Strings . ArrayToString ( 'Chars' , gString ) ; 
        gIdentChars := Idents . MakeIdent ( gString ) ;
        Strings . ArrayToString ( 'NextEntity' , gString ) ; 
        gIdentNextEntity := Idents . MakeIdent ( gString ) ;
        Strings . ArrayToString ( 'Scope' , gString ) ; 
        gIdentScope := Idents . MakeIdent ( gString ) ;
        Strings . ArrayToString ( 'Homonym' , gString ) ; 
        gIdentHomonym := Idents . MakeIdent ( gString ) ;
        Strings . ArrayToString ( 'Etype' , gString ) ; 
        gIdentEtype := Idents . MakeIdent ( gString ) ;
        Strings . ArrayToString ( 'Einfo' , gString ) ; 
        gIdentEinfo := Idents . MakeIdent ( gString ) ;
        Strings . ArrayToString ( 'Sinfo' , gString ) ; 
        gIdentSinfo := Idents . MakeIdent ( gString ) ;
        Strings . ArrayToString ( 'NClassNonEmpty' , gString ) ; 
        gIdentNClassNonEmpty := Idents . MakeIdent ( gString ) ;
        gNClassNonEmptyClass := IdentifyClass ( NoTree , gIdentNClassNonEmpty ) ; 
        Strings . ArrayToString ( 'NClassEntity' , gString ) ; 
        gIdentNClassEntity := Idents . MakeIdent ( gString ) ;
        gEntityClass := IdentifyClass ( NoTree , gIdentNClassEntity ) ; 


	!TYPE yyPtrtTree	= UNTRACED REF ! WI (itTree); !;!
	!!
	!TYPE yytMapArray = ARRAY OF ! WI (itTree); ! ;!
	!TYPE yytMapRef = REF yytMapArray ;!
	!!
        !VAR yyNodeMapRef : yytMapRef ;!
        !VAR yyListMapRef : yytMapRef ;!
        !VAR yyElistMapRef : yytMapRef ;!
        !VAR yyElmtMapRef : yytMapRef ;!
        !!
	!PROCEDURE yyConvert! WI (iMain); !!
        !   ( yyt : GnatTypes . Union_Id ; yyNew : yyPtrtTree )!
        !=VAR LKind : ! WI ( iMain ) ; ! . SHORTCARD ;!
        ! BEGIN!
	!  LOOP!
        !    IF GnatTypes . List_Low_Bound <= yyt AND yyt <= GnatTypes . List_High_Bound!
        !    THEN (* This is a list node. *) !
	!      IF yyt = GnatTypes . No_List!
        !      THEN yyNew ^ := NEW ( ! WI ( iMain ) ; ! . NoList )!
        !                   (* Multiple copies of NoList nodes *)!
        !      ; yyNew ^ . Kind := Tree . NkNoList!
        !      ; RETURN!
        !      END (* IF *) !
        !    ; WITH WNewRef = yyListMapRef ^ [ yyt - GnatTypes . List_Low_Bound ] !
        !      DO!
        !        IF WNewRef # ! WI ( iNoTree ) ; !!
        !        THEN yyNew ^ := WNewRef ; RETURN END (* IF *) !
        !      ; VAR LNewList : Tree . List := NEW ( ! WI ( iMain ) ; ! . List ) !
        !        ; BEGIN!
        !            WNewRef := LNewList!
        !          ; yyNew ^ := LNewList!
        !          ; yyNew ^ . Kind := Tree . NkList!
        !          ; yyConvert! WI (iMain); ! ( Nlists . Parent ( yyt ) , ADR ( LNewList . Parent ) ) !
        !          ; yyConvert! WI (iMain); ! ( Nlists . Last ( yyt ) , ADR ( LNewList . Last ) ) !
        !          ; yyt := Nlists . First ( yyt ) !
        !          ; yyNew := ADR ( LNewList . Last )!
        !          END (* BEGIN *) !
        !      END (* WITH WNewRef *) !
        !    ELSIF GnatTypes . Elist_Low_Bound <= yyt AND yyt <= GnatTypes . Elist_High_Bound!
        !    THEN (* This is an Elist node. *) !
	!      IF yyt = GnatTypes . No_Elist!
        !      THEN yyNew ^ := NEW ( ! WI ( iMain ) ; ! . NoElist ) !
        !      ; yyNew ^ . Kind := Tree . NkNoElist!
        !      ; RETURN  !
        !      END (* IF *) !
        !    ; WITH WNewRef = yyElistMapRef ^ [ yyt - GnatTypes . Elist_Low_Bound ] !
        !      DO!
        !        IF WNewRef # ! WI ( iNoTree ) ; !!
        !        THEN yyNew ^ := WNewRef ; RETURN END (* IF *) !
        !      ; VAR LNewElist : Tree . Elist := NEW ( ! WI ( iMain ) ; ! . Elist ) !
        !        ; BEGIN!
        !            WNewRef := LNewElist!
        !          ; yyNew ^ := LNewElist!
        !          ; yyNew ^ . Kind := Tree . NkElist!
        !          ; yyConvert! WI (iMain); ! ( Elists . Last_Elmt ( yyt ) , ADR ( LNewElist . LastElmt ) ) !
        !          ; yyt := Elists . First_Elmt ( yyt ) !
        !          ; yyNew := ADR ( LNewElist . LastElmt )!
        !          END (* BEGIN *) !
        !      END (* WITH WNewRef *) !
        !    ELSIF GnatTypes . Elmt_Low_Bound <= yyt AND yyt <= GnatTypes . Elmt_High_Bound!
        !    THEN (* This is an Elmt node. *) !
	!      IF yyt = GnatTypes . No_Elmt!
        !      THEN yyNew ^ := NEW ( ! WI ( iMain ) ; ! . NoElmt ) !
        !      ; yyNew ^ . Kind := Tree . NkNoElmt!
        !      ; RETURN !
        !      END (* IF *) !
        !                   (* Multiple copies of NoElmt nodes *)!
        !    ; WITH WNewRef = yyElmtMapRef ^ [ yyt - GnatTypes . Elmt_Low_Bound ] !
        !      DO!
        !        IF WNewRef # ! WI ( iNoTree ) ; !!
        !        THEN yyNew ^ := WNewRef!
        !        ; RETURN!
        !        END (* IF *) !
        !      ; VAR LNewElmt : Tree . Elmt := NEW ( ! WI ( iMain ) ; ! . Elmt ) !
        !        ; BEGIN!
        !            WNewRef := LNewElmt!
        !          ; yyNew ^ := LNewElmt!
        !          ; yyNew ^ . Kind := Tree . NkElmt!
        !          ; yyConvert! WI (iMain); ! ( Elists . Node ( yyt ) , ADR ( LNewElmt . Node ) ) !
        !          ; yyt := Elists . Next_Elmt ( yyt ) !
        !          ; yyNew := ADR ( LNewElmt . NextElmt )!
        !          END (* BEGIN *) !
        !      END (* WITH WNewRef *) !
        !    ELSIF GnatTypes . Node_Low_Bound <= yyt AND yyt <= GnatTypes . Node_High_Bound!
        !    THEN (* This is an ordinary node. *) !
	!      IF yyt = GnatTypes . Empty!
        !      THEN yyNew ^ := NEW ( ! WI ( iMain ) ; ! . NNoNode ) !
        !                   (* Multiple copies of Empty nodes *)!
        !      ; yyNew ^ . Kind := Tree . NkNNoNode!
        !      ; RETURN !
        !      END (* IF *) !
        !    ; WITH WNewRef = yyNodeMapRef [ yyt - GnatTypes . Node_Low_Bound ] !
        !      DO!
        !        IF WNewRef # ! WI ( iNoTree ) ; !!
        !        THEN yyNew ^ := WNewRef!
        !        ; RETURN!
        !        END (* IF *) !
        !      ; LKind := GnatUtils . Kind ( yyt )!
        !      ; CASE LKind OF!
	ForallClasses ( Classes , Convert);
        !        END (* CASE *)!
        !      END (* WITH WNewRef *) !
        !    ELSE <* ASSERT FALSE *> !
        !    END (* IF *) !
        !  END (* LOOP *) !
	! END yyConvert! WI (iMain); !;!
	!!
	!PROCEDURE GnatConvert! WI (iMain); ! ( GnatTree : GnatTypes . Node_Id ) !
        ! : ! WI (itTree); !!
	!=VAR yyNew	: ! WI (itTree); !;!
	! BEGIN!
	!  !
        !  yyNodeMapRef := NEW ( yytMapRef , Atree . Last_Node_Id ( )  - GnatTypes . Node_Low_Bound + 1 ) ;!
        !  yyListMapRef := NEW ( yytMapRef , Nlists . Last_List_Id ( ) - GnatTypes . List_Low_Bound + 1 ) ;!
        !  yyElistMapRef := NEW ( yytMapRef , Elists . Last_Elist_Id ( ) - GnatTypes . Elist_Low_Bound + 1 ) ;!
        !  yyElmtMapRef := NEW ( yytMapRef , Elists . Last_Elmt_Id ( ) - GnatTypes . Elmt_Low_Bound + 1 ) ;!
        !!
	!  yyConvert! WI (iMain); ! ( GnatTree , ADR ( yyNew ) ) ;!
        !!
        !  yyNodeMapRef := NIL ; !
        !  yyListMapRef := NIL ; !
        !  yyElistMapRef := NIL ; !
        !  yyElmtMapRef := NIL ; !
        !!
	!  RETURN yyNew;!
	! END GnatConvert! WI (iMain); !;!
	!!
      END (* IF *) 
}; .


PROCEDURE Convert (t: Tree)

Class (..) :- {
	IF ( ( NoCodeClass * Properties ) = { } ) 
           AND ( Extensions ^ . Kind = Tree . NoClass ) (* Low IN Properties ) is not set *) 
           AND IsDescendedFrom ( t , gNClassNonEmptyClass ) 
        THEN
	   !        | ! WI ( iMain ) ; ! . Nk! WI (Name); !!
           !        => VAR LNewNode := NEW ( ! WI ( iMain ) ; ! . ! WI ( Name ) ; ! )!
           !           ; BEGIN!
           !               WNewRef := LNewNode!
           !             ; yyNew ^ := WNewRef!
           !             ; yyNew ^ . Kind := LKind!
	   ConvertAttrs (t);
           !             (* Field Next of Node is the builtin tail-recursion eliminated iterator *) !
           !             ; yyt := Nlists . Next ( yyt ) !
           !             ; yyNew := ADR ( LNewNode . Next )!
           !             END (* BEGIN *) !
	END;
}; .

PROCEDURE ConvertAttrs (t: Tree)

Class (..) :- {
	IF ( ( NoCodeClass * Properties ) = { } ) 
        THEN
           ConvertAttrs ( t^.Class.BaseClass); 
           IF IsDescendedFrom ( t , gEntityClass ) 
           THEN gFieldInterface := gIdentEinfo 
           ELSE gFieldInterface := gIdentSinfo 
           END (* IF *);   
	   ConvertAttrs (t^.Class.Attributes);
	END;
}; .

Child (..) :- {
        IF Name = gIdentNext
        THEN 
           !             (* Next is handled last, as tail recursion elimination *) !
        ELSIF Name = gIdentPrev 
        THEN 
           !             ; yyConvert! WI (iMain); ! ( Nlists . Prev ( yyt ) , ADR ( LNewNode . Prev ) ) !
        ELSIF Name = gIdentLink 
        THEN 
           !             ; yyConvert! WI (iMain); ! ( GnatUtils . Link ( yyt ) , ADR ( LNewNode . Link ) ) !
        ELSIF Name = gIdentNextEntity
        THEN 
           !             ; yyConvert! WI (iMain); ! ( Sinfo . Next_Entity ( yyt ) , ADR ( LNewNode . NextEntity ) ) !
        ELSIF Name = gIdentScope
        THEN 
           !             ; yyConvert! WI (iMain); ! ( Sinfo . Scope ( yyt ) , ADR ( LNewNode . Scope ) ) !
        ELSIF Name = gIdentHomonym
        THEN 
           !             ; yyConvert! WI (iMain); ! ( Sinfo . Homonym ( yyt ) , ADR ( LNewNode . Homonym ) ) !
        ELSIF Name = gIdentEtype
        THEN 
           !             ; yyConvert! WI (iMain); ! ( Sinfo . Etype ( yyt ) , ADR ( LNewNode . Etype ) ) !
        ELSIF Name = gIdentDiscriminantConstraint
        THEN 
           !             ; yyConvert! WI (iMain); ! ( GnatUtils . Discriminant_Constraint ( yyt ) , ADR ( LNewNode . DiscriminantConstraint ) ) !
        ELSIF Name = gIdentPrimitiveOperations
        THEN 
           !             ; yyConvert! WI (iMain); ! ( GnatUtils . Primitive_Operations ( yyt ) , ADR ( LNewNode . PrimitiveOperations ) ) !
        ELSIF Name = gIdentPrivalsChain
        THEN 
           !             ; yyConvert! WI (iMain); ! ( GnatUtils . Privals_Chain ( yyt ) , ADR ( LNewNode . PrivalsChain ) ) !
        ELSE
           !             ; yyConvert! WI (iMain); ! ( ! WI ( gFieldInterface ) ; ! . ! WG ( Name ) ; 
                                     ! ( yyt ) , ADR ( LNewNode . ! WI ( Name ) ; ! ) ) !
	END;
        ConvertAttrs ( t^.Child.Next); 
}; .
Attribute (..) :- {
	IF ( NoCodeAttr * Properties ) = {} 
        THEN 
          IF Name = gIdentIsListMember  
          THEN 
           !             ; LNewNode . IsListMember := Nlists . Is_List_Member ( yyt ) !
          ELSIF Name = gIdentSloc
          THEN 
           !             ; LNewNode . Sloc := Atree . Sloc ( yyt ) !
          ELSIF Name = gIdentIsRewriteSubstitution
          THEN 
           !             ; LNewNode . IsRewriteSubstitution := Atree . Is_Rewrite_Substitution ( yyt ) !
          ELSIF Name = gIdentIsRewriteInsertion
          THEN 
           !             ; LNewNode . IsRewriteInsertion := Atree . Is_Rewrite_Insertion ( yyt ) !
          ELSIF Name = gIdentComesFromSource
          THEN 
           !             ; LNewNode . ComesFromSource := Atree . Comes_From_Source ( yyt ) !
          ELSIF Name = gIdentAnalyzed
          THEN 
           !             ; LNewNode . Analyzed := Atree . Analyzed ( yyt ) !
          ELSIF Name = gIdentErrorPosted
          THEN 
           !             ; LNewNode . ErrorPosted := Atree . Error_Posted ( yyt ) !
          ELSIF Name = gIdentParenCount
          THEN 
           !             ; LNewNode . ParenCount := Atree . Paren_Count ( yyt ) !
          ELSIF Name = gIdentHasDynamicLengthCheck
          THEN 
           !             ; LNewNode . HasDynamicLengthCheck := Sinfo . Has_Dynamic_Length_Check ( yyt ) !
          ELSIF Name = gIdentHasDynamicRangeCheck
          THEN 
           !             ; LNewNode . HasDynamicRangeCheck := Sinfo . Has_Dynamic_Range_Check ( yyt ) !
          ELSIF Name = gIdentChars
          THEN 
           !             ; LNewNode . Chars := Sinfo . Chars ( yyt ) !
          ELSE
(*         !             ; LNewNode . ! WI ( Name ) ; 
                           ! := ! WI ( gFieldInterface ) ; ! . ! WG ( Name ) ; ! ( yyt )!
*)
	   !             ; copy! WI (Type); ! ( LNewNode . ! WI ( Name ) ; 
                           ! , ! WI ( gFieldInterface ) ; ! . ! WG ( Name ) ; ! ( yyt ) )!
          END; 
	END;
        ConvertAttrs ( t^.Attribute.Next); 
}; .


 (* End of file MThree6.puma *) 


