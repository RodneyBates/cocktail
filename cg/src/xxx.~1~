EvalC.mi:      IF IsElement (ORD ('Y'), Options) OR
EvalC.mi:         IsElement (ORD ('Z'), Options) OR
EvalC.mi:         IsElement (ORD ('L'), Options) THEN
EvalC.mi:      IF IsElement (ORD ('Y'), Options) OR
EvalC.mi:         IsElement (ORD ('Z'), Options) THEN
EvalC.mi:      IF IsElement (ORD ('9'), Options) THEN
EvalC.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalC.mi:      IF IsElement (ORD ('Y'), Options) OR
EvalC.mi:         IsElement (ORD ('Z'), Options) THEN
EvalC.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalC.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalC.mi:      ELSIF IsElement (ORD ('Y'), Options) THEN
EvalC.mi:      IF IsElement (ORD ('Z'), Options) THEN
EvalC.mi:      IF NOT IsElement (ORD ('9'), Options) THEN
EvalC.mi:      IF IsElement (ORD ('9'), Options) THEN
EvalC.mi:      IF IsElement (ORD ('Z'), Options) THEN
EvalC.mi:      IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalC.mi:      ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalC.mi:      IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalC.mi:      ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalC.mi:      IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalC.mi:      IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalC.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalC.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalC2.mi:      IF NOT IsElement (ORD ('9'), Options) THEN
EvalC2.mi:      IF IsElement (ORD ('9'), Options) THEN
EvalC2.mi:      IF IsElement (ORD ('Z'), Options) THEN
EvalC2.mi:      IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalC2.mi:      ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalC2.mi:      IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalC2.mi:      ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalC2.mi:      IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalC2.mi:      IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalC2.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalC2.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalC3.mi:   IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalC3.mi:   IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalC3.mi:   IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalC3.mi:   ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalC3.mi:      IF NOT IsElement (ORD ('9'), Options) THEN
EvalC3.mi:      IF IsElement (ORD ('9'), Options) THEN
EvalC3.mi:      IF IsElement (ORD ('9'), Options) THEN
EvalC3.mi:      IF IsElement (ORD ('5'), Options) THEN
EvalC3.mi:      IF IsElement (ORD ('9'), Options) THEN
EvalC3.mi:      IF IsElement (ORD ('5'), Options) THEN
EvalC3.mi:      IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalC3.mi:      ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalC3.mi:      IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalC3.mi:      IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalC3.mi:      IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMThree.mi:      IF IsElement (ORD ('X'), Options) 
EvalMThree.mi:         OR IsElement (ORD ('Y'), Options) 
EvalMThree.mi:         OR IsElement (ORD ('Z'), Options) 
EvalMThree.mi:         OR IsElement (ORD ('L'), Options) 
EvalMThree.mi:         OR IsElement (ORD ('9'), Options) THEN 
EvalMThree.mi:      IF IsElement (ORD ('X'), Options) 
EvalMThree.mi:         OR IsElement (ORD ('Y'), Options) 
EvalMThree.mi:         OR IsElement (ORD ('Z'), Options) THEN 
EvalMThree.mi:      IF IsElement (ORD ('Y'), Options) OR
EvalMThree.mi:         IsElement (ORD ('Z'), Options) THEN
EvalMThree.mi:      IF IsElement (ORD ('Y'), Options) OR
EvalMThree.mi:         IsElement (ORD ('Z'), Options) OR
EvalMThree.mi:         IsElement (ORD ('L'), Options) OR
EvalMThree.mi:         IsElement (ORD ('9'), Options) THEN
EvalMThree.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalMThree.mi:      IF IsElement (ORD ('Y'), Options) OR
EvalMThree.mi:         IsElement (ORD ('Z'), Options) THEN
EvalMThree.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalMThree.mi:      ELSIF IsElement (ORD ('Y'), Options) THEN
EvalMThree.mi:      IF IsElement (ORD ('Z'), Options) THEN
EvalMThree.mi:      IF NOT IsElement (ORD ('9'), Options) THEN
EvalMThree.mi:      IF IsElement (ORD ('9'), Options) THEN
EvalMThree.mi:      IF IsElement (ORD ('Z'), Options) THEN
EvalMThree.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalMThree.mi:      IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMThree.mi:      ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMThree.mi:      IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMThree.mi:      ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMThree.mi:      IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMThree.mi:      IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMThree.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalMThree.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalMThree2.mi:      IF NOT IsElement (ORD ('9'), Options) THEN
EvalMThree2.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalMThree2.mi:      IF IsElement (ORD ('9'), Options) THEN
EvalMThree2.mi:      IF IsElement (ORD ('Z'), Options) THEN
EvalMThree2.mi:      IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMThree2.mi:      ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMThree2.mi:      IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMThree2.mi:      ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMThree2.mi:      IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMThree2.mi:      IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMThree2.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalMThree2.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalMThree3.mi:   IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMThree3.mi:   IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMThree3.mi:   IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMThree3.mi:   ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMThree3.mi:      IF NOT IsElement (ORD ('9'), Options) THEN
EvalMThree3.mi:      IF IsElement (ORD ('9'), Options) THEN
EvalMThree3.mi:      IF IsElement (ORD ('9'), Options) THEN
EvalMThree3.mi:      IF IsElement (ORD ('5'), Options) THEN
EvalMThree3.mi:      IF IsElement (ORD ('9'), Options) THEN
EvalMThree3.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalMThree3.mi:      IF IsElement (ORD ('5'), Options) THEN
EvalMThree3.mi:      IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMThree3.mi:      ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMThree3.mi:      IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMThree3.mi:      IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMThree3.mi:   IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMod.mi:      IF IsElement (ORD ('Y'), Options) OR
EvalMod.mi:         IsElement (ORD ('Z'), Options) THEN
EvalMod.mi:      IF IsElement (ORD ('Y'), Options) OR
EvalMod.mi:         IsElement (ORD ('Z'), Options) OR
EvalMod.mi:         IsElement (ORD ('L'), Options) OR
EvalMod.mi:         IsElement (ORD ('9'), Options) THEN
EvalMod.mi:      IF IsElement (ORD ('9'), Options) THEN
EvalMod.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalMod.mi:      IF IsElement (ORD ('Y'), Options) OR
EvalMod.mi:         IsElement (ORD ('Z'), Options) THEN
EvalMod.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalMod.mi:      ELSIF IsElement (ORD ('Y'), Options) THEN
EvalMod.mi:      IF IsElement (ORD ('Z'), Options) THEN
EvalMod.mi:      IF NOT IsElement (ORD ('9'), Options) THEN
EvalMod.mi:      IF IsElement (ORD ('9'), Options) THEN
EvalMod.mi:      IF IsElement (ORD ('Z'), Options) THEN
EvalMod.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalMod.mi:      IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMod.mi:      ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMod.mi:      IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMod.mi:      ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMod.mi:      IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMod.mi:      IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMod.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalMod.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalMod2.mi:      IF NOT IsElement (ORD ('9'), Options) THEN
EvalMod2.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalMod2.mi:      IF IsElement (ORD ('9'), Options) THEN
EvalMod2.mi:      IF IsElement (ORD ('Z'), Options) THEN
EvalMod2.mi:      IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMod2.mi:      ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMod2.mi:      IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMod2.mi:      ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMod2.mi:      IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMod2.mi:      IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMod2.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalMod2.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalMod3.mi:   IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMod3.mi:   IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMod3.mi:   IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMod3.mi:   ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMod3.mi:      IF NOT IsElement (ORD ('9'), Options) THEN
EvalMod3.mi:      IF IsElement (ORD ('9'), Options) THEN
EvalMod3.mi:      IF IsElement (ORD ('9'), Options) THEN
EvalMod3.mi:      IF IsElement (ORD ('5'), Options) THEN
EvalMod3.mi:      IF IsElement (ORD ('9'), Options) THEN
EvalMod3.mi:      IF IsElement (ORD ('X'), Options) THEN
EvalMod3.mi:      IF IsElement (ORD ('5'), Options) THEN
EvalMod3.mi:      IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMod3.mi:      ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMod3.mi:      IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMod3.mi:      IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
EvalMod3.mi:   IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
GramMod.mi:       IF IsElement ( ORD ( 'K' ) , Options ) THEN  
GramMod.mi:               IF NOT IsElement ( ORD ( 'K' ) , Options ) THEN  
GramMod.mi:        IF NOT IsElement ( ORD ( 'K' ) , Options ) THEN  
GramMod.mi:           IF IsElement ( ORD ( 'e' ) , Options )
GramMod.mi:        IF IsElement ( ORD ( 'K' ) , Options ) THEN  
GramMod.mi:          IF NOT IsElement ( ORD ( 'K' ) , Options ) THEN  
GramYacc.mi:      IF NOT IsElement (ORD ('v'), Options) THEN
Optimize.mi:      IF IsElement (ORD ('0'), Options) THEN
Optimize.mi:      IF IsElement (ORD ('3'), Options) THEN
Order.mi:	ELSIF NOT IsElement (ORD ('L'), Options) THEN
Order.mi:	   Include (Options, ORD ('L'));
Order.mi:	ELSIF NOT IsElement (ORD ('L'), Options) THEN
Order.mi:	   Include (Options, ORD ('L'));
Order.mi:      IF IsElement (ORD ('/'), Options) THEN
Order.mi:	ELSIF NOT IsElement (ORD ('L'), Options) THEN
Order.mi:	   Include (Options, ORD ('L'));
Order.mi:      IF NOT IsElement (ORD ('L'), Options) THEN
Order.mi:      IF IsElement (ORD ('/'), Options) THEN
Order.mi:      IF IsElement (ORD ('0'), Options) THEN
Order.mi:      IF IsElement (ORD ('3'), Options) THEN
Order.mi:      IF IsElement (ORD ('3'), Options) THEN
Order.mi:      IF NOT IsElement (ORD ('L'), Options) THEN
Order.mi:      IF IsElement (ORD ('S'), Options) THEN
Order.mi:      IF NOT IsElement (ORD ('L'), Options) THEN
Order.mi:      IF IsElement (ORD ('N'), Options) THEN
Order.mi:      IF IsElement (ORD ('C'), Options) THEN
Order.mi:      IF NOT IsElement (ORD ('L'), Options) THEN
Order.mi:      IF IsElement (ORD ('O'), Options) THEN
Order.mi:	   Exclude (Options, ORD ('o'));
Order.mi:      IF IsElement (ORD ('G'), Options) THEN WriteOrderDecl (t); END;
Order.mi:      IF IsElement (ORD ('E'), Options) THEN WriteOrderEval (t); END;
Order.mi:      IF IsElement (ORD ('V'), Options) THEN WriteVisitSequence (t); END;
Order.mi:      IF IsElement (ORD ('G'), Options) THEN WriteOrderDecl (t); END;
Order.mi:      IF IsElement (ORD ('E'), Options) THEN WriteOrderEval (t); END;
Order.mi:      IF IsElement (ORD ('V'), Options) THEN WriteVisitSequence (t); END;
Scanner.mi:			    IF IsElement (ORD ('c'), Options)
Scanner.mi:			    IF IsElement (ORD ('c'), Options)
Scanner.mi:      yyToLower [yyCh] := CHR (ORD (yyCh) - ORD ('A') + ORD ('a'));
Scanner.mi:      yyToUpper [yyCh] := CHR (ORD (yyCh) - ORD ('a') + ORD ('A'));
Semantics.mi:      IF IsElement (ORD ('c'), Options) THEN
Semantics.mi:      IF IsElement (ORD ('x'), Options) OR
Semantics.mi:	 IsElement (ORD ('z'), Options) OR
Semantics.mi:	 IsElement (ORD ('u'), Options) THEN
Semantics.mi:      IF IsElement (ORD ('.'), Options) THEN		
Semantics.mi:      IF IsElement (ORD ('2'), Options) THEN
Semantics.mi:      IF IsElement (ORD ('1'), Options) THEN
Semantics.mi:      IF NOT IsElement (ORD ('j'), Options) THEN
Semantics.mi:	   IF NOT (IsElement (ORD ('x'), Options) OR
Semantics.mi:		   IsElement (ORD ('z'), Options) OR
Semantics.mi:		   IsElement (ORD ('u'), Options)) THEN
Semantics.mi:	IF (Class = NoTree) AND NOT IsElement (ORD ('x'), Options) AND
Semantics.mi:				NOT IsElement (ORD ('z'), Options) AND
Semantics.mi:				NOT IsElement (ORD ('u'), Options) THEN
Semantics.mi:      IF IsElement (ORD ('2'), Options) THEN
Semantics.mi:      IF NOT IsElement (ORD ('W'), Options) AND NOT IsAbstract THEN
Semantics.mi:	   NOT IsElement (ORD ('x'), Options) AND
Semantics.mi:	   NOT IsElement (ORD ('z'), Options) AND
Semantics.mi:	   NOT IsElement (ORD ('u'), Options) THEN
Semantics.mi:           IF NOT IsElement (ORD ('W'), Options) AND NOT IsAbstract THEN
Semantics.mi:      IF NOT (NOT IsElement (ORD ('W'), Options)) THEN EXIT; END;
Semantics.mi:           NOT IsElement (ORD ('B'), Options) THEN
Semantics.mi:      IF IsElement (ORD ('L'), Options) THEN
Semantics.mi:      IF IsElement (ORD ('M'), Options) THEN
Semantics.mi:      IF IsElement (ORD ('P'), Options) THEN
Semantics.mi:      IF IsElement (ORD ('1'), Options) THEN
Tree.mi:	 Include (Options, ORD ('<'));
TreeC1.mi:      IF IsElement (ORD ('<'), Options) THEN
TreeC1.mi:      IF NOT IsElement (ORD ('<'), Options) THEN
TreeC1.mi:      IF NOT IsElement (ORD ('<'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('L'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('5'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('5'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('n'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('m'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('f'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('F'), Options) AND NOT IsElement (ORD ('<'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('o'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('w'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('r'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('p'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('g'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('t'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('b'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('R'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('y'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('k'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('q'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('='), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('L'), Options) THEN
TreeC1.mi:      IF NOT IsElement (ORD ('<'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('L'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('n'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('m'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('f'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('F'), Options) AND NOT IsElement (ORD ('<'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('t'), Options) OR
TreeC1.mi:         IsElement (ORD ('b'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('t'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('b'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('R'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('y'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('k'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('q'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('='), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('L'), Options) THEN
TreeC1.mi:      IF IsElement (ORD ('5'), Options) THEN
TreeC1.mi:	 IF IsElement (ORD ('L'), Options) THEN
TreeC1.mi:	 IF IsElement (ORD ('L'), Options) THEN
TreeC2.mi:	 IF IsElement (ORD ('6'), Options) THEN
TreeC2.mi:      IF IsElement (ORD (','), Options) THEN
TreeC2.mi:      IF IsElement (ORD (';'), Options) THEN
TreeC2.mi:      IF IsElement (ORD ('w'), Options) OR
TreeC2.mi:	 IsElement (ORD ('o'), Options) THEN
TreeC2.mi:      IF IsElement (ORD ('o'), Options) THEN
TreeC2.mi:      IF IsElement (ORD ('w'), Options) THEN
TreeC2.mi:      IF IsElement (ORD ('r'), Options) THEN
TreeC2.mi:      IF IsElement (ORD ('p'), Options) THEN
TreeC2.mi:      IF IsElement (ORD ('g'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('<'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('w'), Options) 
TreeMThree1.mi:         OR IsElement (ORD ('o'), Options) 
TreeMThree1.mi:         OR IsElement (ORD ('p'), Options) THEN  
TreeMThree1.mi:      IF IsElement (ORD ('g'), Options) THEN  
TreeMThree1.mi:      IF NOT IsElement (ORD ('<'), Options) THEN
TreeMThree1.mi:      IF NOT IsElement (ORD ('<'), Options) THEN 
TreeMThree1.mi:      IF IsElement (ORD ('L'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('5'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('n'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('m'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('o'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('w'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('r'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('p'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('g'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('t'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('b'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('R'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('y'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('k'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('q'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('='), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('L'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('+'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('w'), Options) 
TreeMThree1.mi:         OR IsElement (ORD ('o'), Options) 
TreeMThree1.mi:         OR IsElement (ORD ('p'), Options) 
TreeMThree1.mi:         OR IsElement (ORD ('k'), Options) 
TreeMThree1.mi:         OR IsElement (ORD ('q'), Options) THEN 
TreeMThree1.mi:      IF IsElement (ORD ('q'), Options) THEN 
TreeMThree1.mi:      IF IsElement (ORD ('g'), Options) THEN  
TreeMThree1.mi:      IF IsElement (ORD ('y'), Options) 
TreeMThree1.mi:         OR IsElement (ORD ('p'), Options) 
TreeMThree1.mi:         OR IsElement (ORD ('g'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('y'), Options) THEN
TreeMThree1.mi:      IF NOT IsElement (ORD ('<'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('<'), Options) THEN
TreeMThree1.mi:      IF NOT IsElement (ORD ('<'), Options) THEN 
TreeMThree1.mi:      IF IsElement (ORD ('n'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('m'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('t'), Options) OR
TreeMThree1.mi:         IsElement (ORD ('b'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('t'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('b'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('R'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('y'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('k'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('q'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('='), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('L'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('5'), Options) THEN
TreeMThree1.mi:      IF NOT IsElement (ORD ('<'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('r'), Options) THEN
TreeMThree1.mi:      IF NOT IsElement (ORD ('<'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD (';'), Options) THEN
TreeMThree1.mi:      IF NOT IsElement (ORD ('<'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('o'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('w'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('r'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('p'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('g'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('t'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('b'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('R'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('y'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('k'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('q'), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('='), Options) THEN
TreeMThree1.mi:      IF IsElement (ORD ('L'), Options) THEN
TreeMThree1.mi:          IF IsElement (ORD ('n'), Options) THEN
TreeMThree1.mi:          IF IsElement (ORD ('m'), Options) THEN
TreeMThree1.mi:          IF IsElement (ORD ('+'), Options) THEN
TreeMThree2.mi:      IF IsElement (ORD ('w'), Options) 
TreeMThree2.mi:         OR IsElement (ORD ('o'), Options) THEN
TreeMThree2.mi:      IF IsElement (ORD (','), Options) THEN
TreeMThree2.mi:      IF IsElement (ORD (';'), Options) THEN
TreeMThree2.mi:      IF IsElement (ORD ('w'), Options) OR
TreeMThree2.mi:	 IsElement (ORD ('o'), Options) THEN
TreeMThree2.mi:      IF IsElement (ORD ('o'), Options) THEN
TreeMThree2.mi:      IF IsElement (ORD ('w'), Options) THEN
TreeMThree2.mi:      IF IsElement (ORD ('p'), Options) 
TreeMThree2.mi:         OR IsElement (ORD ('g'), Options) THEN
TreeMThree2.mi:      IF IsElement (ORD ('p'), Options) THEN
TreeMThree2.mi:      IF IsElement (ORD ('g'), Options) THEN
TreeMThree2.mi:      IF IsElement (ORD ('p'), Options) 
TreeMThree2.mi:         OR IsElement (ORD ('g'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('<'), Options) THEN
TreeMod1.mi:      IF NOT IsElement (ORD ('<'), Options) THEN
TreeMod1.mi:        IF IsElement (ORD ('^'), Options) THEN
TreeMod1.mi:      IF NOT IsElement (ORD ('<'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('L'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('5'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('5'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('n'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('m'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('f'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('F'), Options) AND NOT IsElement (ORD ('<'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('o'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('w'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('r'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('p'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('g'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('t'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('b'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('R'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('y'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('k'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('q'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('='), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('L'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('+'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('<'), Options) THEN
TreeMod1.mi:      IF NOT IsElement (ORD ('<'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('n'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('m'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('f'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('F'), Options) AND NOT IsElement (ORD ('<'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('t'), Options) OR
TreeMod1.mi:         IsElement (ORD ('b'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('t'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('b'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('R'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('y'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('k'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('q'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('='), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('L'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('5'), Options) THEN
TreeMod1.mi:      IF NOT IsElement (ORD ('<'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('r'), Options) THEN
TreeMod1.mi:      IF NOT IsElement (ORD ('<'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD (';'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('y'), Options) THEN
TreeMod1.mi:      IF NOT IsElement (ORD ('<'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('f'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('F'), Options) AND NOT IsElement (ORD ('<'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('o'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('w'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('r'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('p'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('g'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('t'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('b'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('R'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('y'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('k'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('q'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('='), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('L'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('n'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('m'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('+'), Options) THEN
TreeMod1.mi:      IF IsElement (ORD ('^'), Options) THEN
TreeMod2.mi:      IF IsElement (ORD (','), Options) THEN
TreeMod2.mi:      IF IsElement (ORD (';'), Options) THEN
TreeMod2.mi:      IF IsElement (ORD ('w'), Options) OR
TreeMod2.mi:	 IsElement (ORD ('o'), Options) THEN
TreeMod2.mi:      IF IsElement (ORD ('o'), Options) THEN
TreeMod2.mi:      IF IsElement (ORD ('w'), Options) THEN
TreeMod2.mi:      IF IsElement (ORD ('r'), Options) THEN
TreeMod2.mi:      IF IsElement (ORD ('p'), Options) THEN
TreeMod2.mi:      IF IsElement (ORD ('g'), Options) THEN
cg.mi:   IF IsElement (ORD ('c'), Options) THEN
cg.mi:   ELSIF IsElement (ORD ('K'), Options) THEN
cg.mi:   IF IsElement (ORD ('c'), Options) THEN
cg.mi:   ELSIF IsElement (ORD ('K'), Options) THEN (* Modula-3 *) 
cg.mi:   IF IsElement (ORD ('c'), Options) THEN
cg.mi:   ELSIF IsElement (ORD ('K'), Options) THEN
cg.mi:      IF IsElement (ORD ('7'), Options) THEN
cg.mi:      IF IsElement (ORD ('7'), Options) THEN
cg.mi:		  Include (Options, ORD ('h'));
cg.mi:		  Include (Options, ORD ('H'));
cg.mi:	 Include (Options, ORD ('h'));
cg.mi:	 Include (Options, ORD ('H'));
cg.mi:      Include (Options, ORD ('a'));
cg.mi:      Include (Options, ORD ('A'));
cg.mi:   IF IsElement (ORD ('a'), Options) THEN	(* a -> {a-z, F, R, =} - {c, h, u, x, z} *)
cg.mi:      Include (AllOptions, ORD ('F'));
cg.mi:      Include (AllOptions, ORD ('R'));
cg.mi:      Include (AllOptions, ORD ('='));
cg.mi:      Exclude (AllOptions, ORD ('c'));
cg.mi:      Exclude (AllOptions, ORD ('h'));
cg.mi:      Exclude (AllOptions, ORD ('u'));
cg.mi:      Exclude (AllOptions, ORD ('x'));
cg.mi:      Exclude (AllOptions, ORD ('z'));
cg.mi:   IF IsElement (ORD ('k'), Options) OR		(* {k, q} -> o		*)
cg.mi:      IsElement (ORD ('q'), Options) THEN
cg.mi:      Include (Options, ORD ('o'));
cg.mi:   IF IsElement (ORD ('w'), Options) OR		(* {w, p, f, k, t, b, y} -> , = Mark *)
cg.mi:      IsElement (ORD ('p'), Options) OR
cg.mi:      IsElement (ORD ('f'), Options) OR
cg.mi:      IsElement (ORD ('k'), Options) OR
cg.mi:      IsElement (ORD ('t'), Options) OR
cg.mi:      IsElement (ORD ('b'), Options) OR
cg.mi:      IsElement (ORD ('y'), Options) THEN
cg.mi:      Include (Options, ORD (','));
cg.mi:   IF IsElement (ORD ('w'), Options) OR		(* {w, r, p, g} -> ; = TreeStore *)
cg.mi:      IsElement (ORD ('r'), Options) OR
cg.mi:      IsElement (ORD ('p'), Options) OR
cg.mi:      IsElement (ORD ('g'), Options) THEN
cg.mi:      Include (Options, ORD (';'));
cg.mi:   IF IsElement (ORD ('A'), Options) THEN	(* A -> {D, I}		*)
cg.mi:      Include (Options, ORD ('D'));
cg.mi:      Include (Options, ORD ('I'));
cg.mi:   IF IsElement (ORD ('T'), Options) OR		(* {T, X, Y, Z} -> I	*)
cg.mi:      IsElement (ORD ('X'), Options) OR
cg.mi:      IsElement (ORD ('Y'), Options) OR
cg.mi:      IsElement (ORD ('Z'), Options) THEN
cg.mi:      Include (Options, ORD ('I'));
cg.mi:   IF IsElement (ORD ('I'), Options) OR		(* {I, V, M, P, S, N, O, G, E, C, J, x, z, u} -> . = Order *)
cg.mi:      IsElement (ORD ('V'), Options) OR
cg.mi:      IsElement (ORD ('M'), Options) OR
cg.mi:      IsElement (ORD ('P'), Options) OR
cg.mi:      IsElement (ORD ('S'), Options) OR
cg.mi:      IsElement (ORD ('N'), Options) OR
cg.mi:      IsElement (ORD ('O'), Options) OR
cg.mi:      IsElement (ORD ('G'), Options) OR
cg.mi:      IsElement (ORD ('E'), Options) OR
cg.mi:      IsElement (ORD ('C'), Options) OR
cg.mi:      IsElement (ORD ('J'), Options) OR
cg.mi:      IsElement (ORD ('x'), Options) OR
cg.mi:      IsElement (ORD ('z'), Options) OR
cg.mi:      IsElement (ORD ('u'), Options) THEN
cg.mi:      Include (Options, ORD ('.'));
cg.mi:   IF IsElement (ORD ('x'), Options) OR		(* {x, z, u} -> B	*)
cg.mi:      IsElement (ORD ('z'), Options) OR
cg.mi:      IsElement (ORD ('u'), Options) THEN
cg.mi:      Include (Options, ORD ('B'));
cg.mi:   IF IsElement (ORD ('T'), Options) THEN	(* T -> {X, Z}		*)
cg.mi:      Include (Options, ORD ('X'));
cg.mi:      Include (Options, ORD ('Z'));
cg.mi:   IF IsElement (ORD ('X'), Options) THEN	(* X -> Y		*)
cg.mi:      Include (Options, ORD ('Y'));
cg.mi:   IF IsElement (ORD ('h'), Options) 
cg.mi:      OR IsElement (ORD ('H'), Options) THEN
cg.mi:   IF IsElement (ORD ('h'), Options) THEN
cg.mi:      Exclude (Options, ORD ('h'));
cg.mi:   IF IsElement (ORD ('H'), Options) THEN
cg.mi:      Exclude (Options, ORD ('H'));
cg.mi:   IF IsElement (ORD ('h'), Options) 
cg.mi:      OR IsElement (ORD ('H'), Options) THEN
cg.mi:   IF IsElement (ORD ('c'), Options) THEN
cg.mi:   IF IsElement (ORD ('.'), Options) THEN
cg.mi:   IF IsElement (ORD ('x'), Options) THEN
cg.mi:   IF IsElement (ORD ('c'), Options) THEN
cg.mi:   IF IsElement (ORD ('z'), Options) THEN
cg.mi:   IF IsElement (ORD ('c'), Options) THEN
cg.mi:   ELSIF IsElement (ORD ('u'), Options) THEN
cg.mi:   IF IsElement (ORD ('Q'), Options) THEN
cg.mi:   IF IsElement (ORD ('J'), Options) THEN
cg.mi:   IF IsElement (ORD ('i'), Options) OR
cg.mi:      IsElement (ORD ('X'), Options) THEN
cg.mi:   IF IsElement (ORD ('d'), Options) THEN
cg.mi:   IF IsElement (ORD ('c'), Options) THEN
cg.mi:   ELSIF IsElement (ORD ('K'), Options) THEN
cg.mi:   IF IsElement (ORD ('c'), Options) THEN
cg.mi:   ELSIF IsElement (ORD ('K'), Options) THEN
cg.mi:   IF NOT IsElement (ORD ('c'), Options) THEN (* Modula-2 or Modula-3 *) 
cg.mi:   IF IsElement (ORD ('4'), Options) THEN
cg.mi:   IF IsElement (ORD ('i'), Options) THEN
cg.mi:   IF IsElement (ORD ('c'), Options) THEN
cg.mi:   ELSIF IsElement (ORD ('K'), Options) THEN
cg.mi:   IF IsElement (ORD ('c'), Options) THEN
cg.mi:   ELSIF IsElement (ORD ('K'), Options) THEN
cg.mi:   IF NOT IsElement (ORD ('c'), Options) THEN (* Modula-2 or Modula-3 *) 
cg.mi:   IF IsElement (ORD ('s'), Options) AND NOT IsElement (ORD ('c'), Options) THEN
cg.mi:    IF IsElement (ORD ('K'), Options) THEN
cg.mi:    IF IsElement (ORD ('K'), Options) THEN
cg.mi:   IF IsElement (ORD ('U'), Options) THEN
cg.mi:   IF IsElement (ORD ('D'), Options) THEN
cg.mi:   IF IsElement (ORD ('c'), Options) THEN
cg.mi:   ELSIF IsElement (ORD ('K'), Options) THEN
cg.mi:   IF IsElement (ORD ('c'), Options) THEN
cg.mi:   ELSIF IsElement (ORD ('K'), Options) THEN
cg.mi:   IF IsElement (ORD ('I'), Options) THEN
cg.mi:   IF IsElement (ORD ('c'), Options) THEN
cg.mi:   ELSIF IsElement (ORD ('K'), Options) THEN
cg.mi:   IF IsElement (ORD ('c'), Options) THEN
cg.mi:      IF IsElement (ORD ('L'), Options) THEN
cg.mi:      ELSIF IsElement (ORD ('0'), Options) THEN
cg.mi:   ELSIF IsElement (ORD ('K'), Options) THEN (* Modula-3 *) 
cg.mi:      IF IsElement (ORD ('L'), Options) THEN
cg.mi:      ELSIF IsElement (ORD ('0'), Options) THEN
cg.mi:      IF IsElement (ORD ('L'), Options) THEN
cg.mi:      ELSIF IsElement (ORD ('0'), Options) THEN
cg.mi:   IF NOT IsElement (ORD ('c'), Options) THEN (* Modula-2 or Modula-3 *) 
cg.mi:   IF NOT IsElement (ORD ('c'), Options) THEN (* Modula-2 or Modula-3 *) 
cg.mi:      IF IsElement (ORD ('i'), Options) OR
cg.mi:	 IsElement (ORD ('X'), Options) THEN
cg.mi:   IF IsElement (ORD ('8'), Options) THEN
