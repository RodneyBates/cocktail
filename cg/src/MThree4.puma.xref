     1 
     2 (* file MThree4.puma 
c    3    Modula-3 generation of attribute evaluator with optimized attribute storage. 
c    4    Rodney M. Bates Oct 97 
c    5    Extensively modified from file mod4.puma, which had these header comments:  
c    6      /* Ich, Doktor Josef Grosch, Informatiker, 19.6.1990 */
c    7 *)
     8 
     9 TRAFO EvalMThree2                                                             *     *
    10 TREE Tree                                                                     *     *
    11 PUBLIC EvalModule                                                             *     *
    12 
    13 GLOBAL {                                                                      *
    14 
    15 FROM SYSTEM     IMPORT ADR;                                                   *     *     *     *
    16 FROM IO         IMPORT WriteS, WriteNl, WriteI, StdOutput;                   15     *    15     *     *     *     *
    17 FROM StringMem  IMPORT WriteString;                                          16     *    16     *
    18 FROM Idents     IMPORT tIdent;                                               17     *    17     *
    19 FROM Texts      IMPORT WriteText;                                            18     *    18     *
    20 FROM Sets       IMPORT tSet, MakeSet, ReleaseSet, Include, Minimum, IsElement, Write\    19     *    19     *     *     *
                                                                                     *     *     *
      \Set;                                                                          *
    21 FROM Relations  IMPORT IsRelated;                                            20     *    20     *
    22 FROM TreeMThree2        IMPORT WriteLine;                                    21     *    21     *
    23 FROM EvalMThree IMPORT EvalModuleHead;                                       22     *    22     *
    24 
    25 FROM Tree       IMPORT                                                       23    10    23
    26    NoTree       , tTree         , Referenced    , NoCodeClass   ,             *     *     *     *
    27    Computed     , Reverse       , Write         , Read          ,             *     *     *     *
    28    Inherited    , Synthesized   , Input         , Output        ,             *     *     *     *
    29    Stack        , Parameter     , Variable      ,                             *     *     *
    30    CopyDef      , CopyUse       , Thread        , Virtual       ,             *     *     *     *
    31    Test         , Left          , Right         ,                             *     *     *
    32    NonBaseComp  , First         , Dummy         , Trace         ,             *     *     *     *
    33    Demand       , Funct         , NoClass       , Options       ,             *     *     *     *
    34    TreeRoot     , iModule       , iMain         , itTree        ,             *     *     *     *
    35    ForallClassesExtensionsFirst, ForallAttributes, f            , WI    , WN    ,         *     *     *     *     *
    36    IdentifyAttribute, GrammarClass, cOAG        , MaxVisit      ,             *     *     *     *
    37    WriteInstance;                                                             *
    38 
    39 VAR                                                                           *
    40    Count, Start, Stop, Visit, ChildVisit, i, j, k       : SHORTCARD;          *     *     *     *     *     *     *     *
                                                                                     *
    41    Node, Attr, Class, AttrClass, Child, Child2, ChildsClass     : tTree;      *     *     *     *     *     *     *    26
    42 
    43 PROCEDURE Representative (i: CARDINAL): CARDINAL;       (* Class        *)          *     *    40     *     *
    44    VAR                                                                       39
    45       s         : tSet;                                                       *    20
    46       r         : CARDINAL;                                                   *    43
    47       Stable    : BOOLEAN;                                                    *     *
    48       j, k      : CARDINAL;                                                  40    40    46
    49    BEGIN                                                                      *
    50       WITH Class^.Class DO                                                    *    41     *     *
    51          MakeSet (s, InstCount);                                             20    45     *
    52          Include (s, i);                                                     20    51    43
    53          REPEAT                                                               *
    54             Stable := TRUE;                                                  47     *
    55             FOR j := 1 TO InstCount DO                                        *    48     *    51    50
    56                IF IsElement (j, s) THEN                                       *    20    55    52     *
    57                   IF CopyDef IN Instance^[j].Properties THEN                 56    30     *     *    56     *    56
    58                      k := Instance^[j].CopyArg;                              48    57    57     *
    59                      IF (Parameter IN Instance^[k].Attribute^.Attribute.Properties) \    57    29    57    58    58     *
                                                                                     *    57
      \AND                                                                           *
    60                         NOT IsElement (k, s) THEN                             *    56    59    56    57
    61                         Include (s, k);                                      52    60    60
    62                         Stable := FALSE;                                     54     *
    63                      END;                                                     *
    64                   END;                                                       63
    65                   IF CopyUse IN Instance^[j].Properties THEN                 59    30    59    59    58    59    60
    66                      FOR k := 1 TO InstCount DO                              55    61    55    55    55
    67                         IF (CopyDef IN Instance^[k].Properties) AND          65    57    65    65    66    65    59
    68                            (Parameter IN Instance^[k].Attribute^.Attribute.Propertie\    59    67    67    67    59     *
      \s) AND                                                                       67    67
    69                            (Instance^[k].CopyArg = j) AND                    68    68    58    65    68
    70                            NOT IsElement (k, s) THEN                         60    60    69    61    65
    71                            Include (s, k);                                   61    70    70
    72                            Stable := FALSE;                                  62    62
    73                         END;                                                 64
    74                      END;                                                    73
    75                   END;                                                       74
    76                END;                                                          75
    77             END;                                                             76
    78          UNTIL Stable;                                                        *    72
    79          r := Minimum (s);                                                   46    20    71
    80          IF r <= AttrCount THEN                                              67    79     *    70
    81             Stable := TRUE;                                                  78    54
    82             j := r + 1;                                                      69    80
    83             LOOP                                                              *
    84                IF j > AttrCount THEN EXIT; END;                              80    82    80    80     *    77
    85                IF IsElement (j, s) THEN Stable := FALSE; EXIT; END;          84    70    84    79    84    81    72    84
                                                                                    84
    86                INC (j);                                                       *    85
    87             END;                                                             85
    88             IF NOT Stable THEN                                               85    70    85    85
    89                j := 1;                                                       86
    90                LOOP                                                          83
    91                   k := Instance^ [j].Order;                                  71    69    89     *
    92                   IF (k <= AttrCount) AND IsElement (k, s) THEN r := k; EXIT; END;       88    91    84    69    85     *
                                                                                    85    88    82     *    85    87
    93                   INC (j);                                                   86    91
    94                END;                                                          92
    95             END;                                                             94
    96          END;                                                                95
    97          ReleaseSet (s);                                                     20    92
    98          RETURN r;                                                            *    92
    99       END;                                                                   96
   100    END Representative;                                                       99    43
   101 
   102 PROCEDURE GenAttribute (i: CARDINAL; repr: BOOLEAN);    (* Class = subtype, Node = c\    43     *    52    48     *    47
c     \urrent type, k  *)
   103    BEGIN                                                                     49
   104       IF repr THEN                                                           92   102    92
   105          WITH Class^.Class.Instance^[i] DO                                   50    50     *    91   102    66
   106             IF (Parameter IN Attribute^.Attribute.Properties) AND           104    68    68    68     *    68    92
   107                (({CopyDef, CopyUse} * Properties) # {}) THEN                 67    65   106   104
   108                i := Representative (i);                                     105   100     *
   109             END;                                                            100
   110          END;                                                               109
   111       END;                                                                  110
   112       WITH Class^.Class.Instance^[i] DO                                     105   105     *   105   108   105
   113          IF Virtual IN Properties THEN RETURN; END;                         106    30   106   107   107    98   111
   114          IF Left IN Properties THEN                                     (* left     \   113    31   113   113   113
c     \        *)
   115             WITH Attribute^.Attribute DO                                    112   106     *   112
   116                IF Parameter IN Properties THEN                              114   106   114   114   114
   117                   IF IdentifyAttribute (Node, Name) = NoTree THEN           116    36    41     *    26   116
   118                      WI (Class^.Class.Name); !yy! WI (Name);            (* local    \    35   112     *   117     *     *
                                                                                     *
c     \        *)
   119                   ELSE                                                        *
   120                      !yy! WI (Name);                                    (* param    \   118   118   118
c     \        *)
   121                   END;                                                      113
   122                ELSIF Demand IN Properties THEN                          (* demand   \     *    33   116   116   117
c     \        *)
   123                   IF Funct IN Properties THEN                               117    33   122   122   122
   124                      AttrClass := GetClass (Class, Name);               (* function \    41     *   118   120
c     \        *)
   125                      !y! WI (AttrClass^.Class.Name); !y! WI (Name); ! ( TNode )!          *   120   124   124   124     *
                                                                                     *     *     *
   126                   ELSIF i # k THEN                                          122   112    92   123
   127                      WI (Class^.Class.Name); !yy! WI (Name);            (* local    \   125   125     *   125   120     *
                                                                                     *
c     \        *)
   128                   ELSE                                                      119
   129                      !yy! WI (Name);                                    (* param    \   127   127   127
c     \        *)
   130                   END;                                                      121
   131                ELSE                                                     (* tree     \   128
c     \        *)
   132                   !TNode . ! WI (Name);                                     125   129   129
   133                END;                                                         130
   134             END;                                                            133
   135          ELSE                                                           (* right    \   131
c     \        *)
   136             WITH Attribute^.Attribute DO                                    115   115     *   115
   137                IF Parameter IN Properties THEN                          (* param    \   123   116   123   123   126
c     \        *)
   138                   WI (Class^.Class.Name); !y! WI (Selector^.Child.Name); !y! WI (Nam\   132   127     *   132   125     *
                                                                                     *    41     *     *     *
      \e);                                                                           *
   139                ELSIF Demand IN Properties THEN                          (* demand   \   126   122   137   137   137
c     \        *)
   140                   IF Funct IN Properties THEN                           (* function \   137   123   139   139   139
c     \        *)
   141                      AttrClass := GetClass (Selector^.Child.Class, Name);   125   124   138   138   138   138
   142                      !y! WI (AttrClass^.Class.Name); !y! WI (Name);         138   138   141   141   141     *     *     *
   143                      ! (TNode . ! WI (Selector^.Child.Name); ! )!           132   142   141   141   142
   144                   ELSE                                                      135
   145                      WI (Class^.Class.Name); !y! WI (Selector^.Child.Name); !y! WI (\   143   142     *   143   142     *
                                                                                   143   143     *     *     *
      \Name);                                                                        *
   146                   END;                                                      134
   147                ELSE                                                     (* tree     \   144
c     \        *)
   148                   !TNode . ! WI (Selector^.Child.Name);                     143   145   145   145   145
   149                   ! . ! WI (Name);                                          148   148
   150                END;                                                         146
   151             END;                                                            150
   152          END;                                                               151
   153       END;                                                                  152
   154    END GenAttribute;                                                        153   102
   155 
   156 PROCEDURE GetClass (Class: tTree; Attribute: tIdent): tTree;                102   141   145    41   136    18     *
   157    BEGIN                                                                    103
   158       WHILE Class^.Kind # NoClass DO                                          *   156     *    33   136
   159          IF IdentifyAttribute (Class^.Class.Attributes, Attribute) # NoTree THEN RET\   140   117   158     *     *   156
                                                                                   117   140
      \URN Class; END;                                                             113     *   154
   160          Class := Class^.Class.BaseClass;                                   159     *     *     *
   161       END;                                                                  159
   162       RETURN NoTree;                                                        159   159
   163    END GetClass;                                                            161   156
   164 
   165 PROCEDURE CheckUsage (Usage: BITSET): BOOLEAN;  (* Class, Child, Start, Stop    *)      156     *     *     *   102
   166    VAR i, i2: SHORTCARD;                                                     44   126     *    40
   167    BEGIN                                                                    157
   168       FOR i := Start TO Stop DO                                              66   166    40    66    40   158
   169          i2 := Class^.Class.Instance^ [i].Order;                            166   160     *   112   168    91
   170          WITH Class^.Class.Instance^ [i2] DO                                136   169     *   169   169   168
   171             IF ({Synthesized, Right, First} <= Properties) AND              159    28    31    32   140   106
   172                (Child = Selector) AND                                       148   148   171
   173                (Attribute^.Child.Partition <= Selector^.Child.Class^.Class.Visits) A\   159   172     *   172     *   170
                                                                                     *     *
      \ND                                                                          172
   174                (Attribute^.Child.Partition IN Usage) THEN                   173   173   173   140   165   159
   175                RETURN TRUE;                                                 162    81
   176             END;                                                            163
   177             IF ({Inherited, Right} <= Properties) AND (i2 = j) THEN         171    28   171   171   173   170    93   174
   178                RETURN TRUE;                                                 175   175
   179             END;                                                            176
   180          END;                                                               179
   181       END;                                                                  180
   182       RETURN FALSE;                                                         178    85
   183    END CheckUsage;                                                          181   165
   184 }
   185 
   186 BEGIN   { k := 0; }                                                         167   126
   187 
   188 PROCEDURE EvalModule (t: Tree)                                              165    11     *    25
   189         
   190 Ag (..) :- {                                                                  *
   191         EvalModuleHead (t);                                                  23   188
   192       IF NOT IsElement (ORD ('9'), Options) THEN                            177    88    92     *    33   177
   193         !!
   194         !PROCEDURE Eval ( yyt : ! WI (iMain); ! . ! WI (itTree); ! ) =!     188     *     *   149    34     *    34
   195         Node := Classes;                                                    117     *
   196         Class := Classes;                                                   173   195
   197         ForallAttributes (Class, GenTemposLocal);                            35   196     *
   198         ! BEGIN!                                                            186
   199         IF MaxVisit > 0 THEN                                                192    36   192
   200            Class := Classes;                                                197   196
   201            Visit := 1;                                                       40
   202            ! yyVisit1! WI (Class^.Class.Name); ! ( yyt !                      *   194   200     *   149   194
   203            ForallAttributes (Class, GenActualsLeft);                        197   202     *
   204            ! ) ;! 
   205         END;                                                                183
   206         ! END Eval;!                                                        205   194
   207       ELSE                                                                  147
   208         !!
   209         !VAR xxStack: INTEGER ;!                                            166     *     *
   210         !!
   211         !PROCEDURE Eval ( yyt : ! WI (iMain); ! . ! WI (itTree); ! )!       194   206   202   202   194     *   194
   212         !=VAR xxHigh : BOOLEAN ;!                                           209     *   165
   213         Node := Classes;                                                    195   200
   214         Class := Classes;                                                   203   213
   215         ForallAttributes (Class, GenTemposLocal);                           203   214   197
   216         ! BEGIN !                                                           198
   217         ! xxStack := LAST (INTEGER);!                                       209     *   209
   218         IF MaxVisit > 0 THEN                                                199   199   199
   219            Class := Classes;                                                215   214
   220            Visit := 1;                                                      201
   221            ! yyVisit1 ! WI (Class^.Class.Name); ! ( yyt !                   202   211   219     *   202   211
   222            ForallAttributes (Class, GenActualsLeft);                        215   221   203
   223            ! ) ;! 
   224         END ; !!                                                            206
   225         @  Wr . PutText ( Stdio . Stdout , "Stacksize " ) ;@                  *     *     *     *
   226         !  Wr . PutText ( Stdio . Stdout!                                   225   225   225   225
   227         !               , Fmt . Int ( LOOPHOLE ( ADR ( xxHigh ) , INTEGER ) - xxStac\     *     *     *    15   212   217
      \k ) ) ;!                                                                    217
   228         !  Wr . PutText ( Stdio . Stdout , Wr . EOL ) ;!                    226   226   226   226     *     *
   229         ! END Eval ;!                                                       224   211
   230       END;                                                                  229
   231         !!
   232         ForallClassesExtensionsFirst (Classes, GenDemandProc);               35   219     *
   233         ForallClassesExtensionsFirst (Classes, EvalModule);                 232   232   188
   234         !PROCEDURE Begin! WI (EvalName); ! ( )!                             211     *   221     *
   235         !=BEGIN!                                                            216
   236         WriteLine (EvalCodes^.Codes.BeginLine);                              22     *     *     *
   237         WriteText (f, EvalCodes^.Codes.Begin);                               19    35   236   236   234
   238         Node := Modules;                                                    213     *
   239         WHILE Node^.Kind = Tree.Module DO                                   158   238   158   188     *   170
   240            WriteLine (Node^.Module.EvalCodes^.Codes.BeginLine);             236   239   239   237   237   236
   241            WriteText (f, Node^.Module.EvalCodes^.Codes.Begin);              237   237   240   240   240   240   237
   242            Node := Node^.Module.Next;                                       241     *   241     *
   243         END;                                                                230
   244         ! END Begin! WI (EvalName); ! ;!                                    243   241   234   234
   245         !!
   246         !PROCEDURE Close! WI (EvalName); ! ( )!                             234     *   244   244
   247         !=BEGIN!                                                            235
   248         WriteLine (EvalCodes^.Codes.CloseLine);                             240   241   241     *
   249         WriteText (f, EvalCodes^.Codes.Close);                              241   241   248   248   246
   250         Node := Modules;                                                    242   238
   251         WHILE Node^.Kind = Tree.Module DO                                   239   250   239   239   242   239
   252            WriteLine (Node^.Module.EvalCodes^.Codes.CloseLine);             248   251   251   249   249   248
   253            WriteText (f, Node^.Module.EvalCodes^.Codes.Close);              249   249   252   252   252   252   249
   254            Node := Node^.Module.Next;                                       253     *   253   242
   255         END;                                                                244
   256         ! END Close! WI (EvalName); ! ;!                                    255   253   246   246
   257         !!
   258         !BEGIN!                                                             247
   259       IF IsElement (ORD ('X'), Options) THEN                                218   192   192   192   218
   260         ! yyf := Stdio . Stdout;!                                             *   228   228
   261       END;                                                                  256
   262         !END ! WI (EvalName); ! .!                                          261   256   256
   263 }; .
   264 Class (..) :- {                                                             222
   265         IF (NoCodeClass * Properties) # {} THEN RETURN; END;                259    26   177   259   182   262
   266         IF Referenced IN Properties THEN                                    265    26   174   265   265
   267            ForallClassesExtensionsFirst (Extensions, Generated0);           233     *     *
   268            Generated := 0;                                                    *
   269            FOR Visit := 1 TO Visits DO                                      168   220   168   173   251
   270               !PROCEDURE yyVisit! WN (Visit); WI (Name); ! ( yyt: ! WI (iMain); ! . \   246     *    35   269   262   221
                                                                                   221     *   211
      \! WI (Name);                                                                  *     *
   271               Node := t;                                                    254   191
   272               Class := t;                                                   264   271
   273               ForallAttributes (t, GenFormals);                             222   272     *
   274               ! ) =!
   275               Node := t;                                                    271   273
   276               ForallClassesExtensionsFirst  ( Extensions , GenTempos ) ;    267   267     *
   277               GenTempos (t);                                                276   275
   278               WriteLine (TreeRoot^.Ag.EvalCodes^.Codes.LocalLine);          252    34   190   253   253     *
   279               WriteText (f, TreeRoot^.Ag.EvalCodes^.Codes.Local);           253   253   278   278   278   278     *
   280               Node := TreeRoot^.Ag.Modules;                                 275   279   279   250
   281               WHILE Node^.Kind = Tree.Module DO                             251   280   251   251   254   269
   282                  WriteLine (Node^.Module.EvalCodes^.Codes.LocalLine);       278   281   281   279   279   278
   283                  WriteText (f, Node^.Module.EvalCodes^.Codes.Local);        279   279   282   282   282   282   279
   284                  Node := Node^.Module.Next;                                 283     *   283   254
   285               END;                                                          265
   286       IF IsElement (ORD ('9'), Options) THEN                                266   259   259   259   266
   287               ! VAR xxLow : BOOLEAN ;!                                      212     *   212
   288               ! BEGIN!                                                      258
   289               !  xxStack := MIN ( xxStack , LOOPHOLE ( ADR ( xxLow ) , INTEGER ) ) ;\   227     *     *   227   227   287
                                                                                   227
      \!
   290 (* FIX THIS^ This only works for stacks which grow toward zero. *)
   291       ELSE                                                                  207
   292               ! BEGIN!                                                      288
   293       END;                                                                  285
   294               !   TYPECASE yyt OF!                                            *   270     *
   295               IF cOAG IN GrammarClass THEN              (* generate evaluator   *)      286    36   266    36   286
   296                  Node := t;                                                 284   277
   297                  ForallClassesExtensionsFirst ( Extensions , GenEvaluator ) ;     276   276     *
   298                  GenEvaluator (t);                                          297   296
   299               END;                                                          293
   300               !   ELSE!                                                     291
   301       IF IsElement (ORD ('Z'), Options) THEN                                295   286   286   286   295
   302               !    yyVisitParent ( yyt ) ;!                                   *   294
   303       END;                                                                  299
   304               !   END;!                                                     303
   305               ! END yyVisit! WN (Visit); WI (Name); ! ;!                    304   270   270   270   270   270
   306               !!
   307            END;                                                             305
   308         END;                                                                307
   309 }; .
   310 
   311 (* Not used.  Not converted to M3: 
c  312 PROCEDURE WriteType (t: Tree)
c  313 
c  314 Class (..) :- {
c  315         IF (NoCodeClass * Properties) # {} THEN RETURN; END;
c  316         IF Trace IN Properties THEN
c  317            !| ! WI (iMain); ! . ! WI (Name); !: yyWriteS ('! WI (Name); !');!
c  318         END;
c  319 }; .
c  320 *) 
   321 
   322 
   323 PROCEDURE GenEvaluator  /* Node, Class (sometimes)      */ (t: Tree)        270   298   298   281
   324 
   325 Class (..) :- {                                                             272
   326         IF (NoCodeClass * Properties) # {} THEN RETURN; END;                301   265   266   301   265   308
   327         IF (Generated = InstCount) THEN RETURN; END;                        326   268    66   326   326   326
   328         !    | ! WI (iMain); ! . ! WI (Name); ! ( TNode ) =>!               305   270     *   305   148
   329 
   330         Start := Generated + 1;                                             168   327
   331         LOOP                                                                 90
   332            IF Generated = InstCount THEN EXIT; END;                         327   330   327   327    92   327
   333            INC (Generated);                                                  93   332
   334            WITH Instance^ [Instance^ [Generated].Order] DO                  170   170     *   333   169   281
   335               IF (Left IN Properties) AND (Attribute^.Child.Partition > Visit) THEN     332   114   295   326   177   174
                                                                                   174   174   305   332
   336                  DEC (Generated); EXIT;                                       *   334   332
   337               END;                                                          332
   338            END;                                                             337
   339         END;                                                                338
   340         Stop := Generated;                                                  168   336
   341 
   342         Class := t;                                                         325   323
   343 
   344         FOR Start := Start TO Stop DO                                       269   330     *   269   340   334
   345            i := Instance^ [Start].Order;                                    169   334   344   334
   346            WITH Instance^ [i] DO                                            334   345   345   344
   347               IF ({Inherited, Right, First} <= Properties) AND ({Dummy, Virtual, Dem\   335   177   177   171   335   335
                                                                                    32   113
      \and} * Properties = {}) THEN                                                139     *   335
   348                  GenDemandEval (t);                                           *   342
   349       IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN   347   301   301   301   347    32   335
                                                                                   348   342   347   347
   350                  @      yyWriteEval ( TNode , "@ WI (Selector^.Child.Name); !:! WI (\     *   328
      \Attribute^.Child.Name); @" ) ;@
   351                  IF Action # ADR (Action) THEN GenEvaluator (Action); END; !!     349     *   289     *   349   323     *
                                                                                   339
   352                  IF (Attribute^.Kind = Tree.Child) OR (Attribute^.Attribute.Type = i\   351   335   281   323   335     *
                                                                                     *     *     *
      \tTree) THEN                                                                 211   351
   353                     !      write! WI (itTree); ! ( ! GenAttribute (i, TRUE); ! )!         *   328   352   154   346   178
   354                  ELSE                                                       300
   355                     !      write! WI (Attribute^.Child.Type); ! ( ! GenAttribute (i,\   353   353   352   352   352   353
                                                                                   353
      \ TRUE); ! ) yyWriteNl ;!                                                    353     *
   356                  END;                                                       351
   357       ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN      139   349   349   349   349   349
                                                                                   349   349   349   349   352
   358                  @      yyWriteEval ( TNode , "@ WI (Selector^.Child.Name); !:! WI (\   350   350
      \Attribute^.Child.Name); @" ) ;@
   359                  IF Action # ADR (Action) THEN GenEvaluator (Action); END;        352   351   351     *   357   351     *
                                                                                   356
   360       ELSE                                                                  354
   361                  IF Action # ADR (Action) THEN GenEvaluator (Action); END;        359   359   359     *   359   359     *
                                                                                   359
   362       END;                                                                  361
   363               END;                                                          362
   364               IF ({Synthesized, Left, First} <= Properties) AND ({Dummy, Virtual, De\   361   171   335   347   357   357
                                                                                   347   347
      \mand} * Properties = {}) THEN                                               347     *   361
   365                  GenDemandEval (t);                                         348   357
   366       IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN   364   357   357   357   364   357   357
                                                                                   365   357   364   364
   367                  @      yyWriteEval ( TNode , "@ WI (Attribute^.Child.Name); @" ) ;@    358   358
   368                  IF Action # ADR (Action) THEN GenEvaluator (Action); END; !!     366   361   361     *   366   361     *
                                                                                   363
   369                  IF Test IN Properties THEN                                 368    31   366   366   368
   370                     !      writeBOOLEAN (yyb) yyWriteNl ;!                    *     *   355
   371                  ELSIF (Attribute^.Kind = Tree.Child) OR (Attribute^.Attribute.Type \   357   355   352   352   355   352
                                                                                     *     *   355
      \= itTree) THEN                                                              353   369
   372                     !      write! WI (itTree); ! (! GenAttribute (i, TRUE); !)!   355   355   371   355   355   355
   373                  ELSE                                                       360
   374                     !      write! WI (Attribute^.Child.Type); ! (! GenAttribute (i, \   372   372   371   371   371   372
                                                                                   372
      \TRUE); !) yyWriteNl;!                                                       372   370
   375                  END;                                                       368
   376       ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN      371   366   366   366   366   366
                                                                                   369   366   366   369   371
   377                  @      yyWriteEval ( TNode , "@ WI (Attribute^.Child.Name); @" ) ;@    367   367
   378                  IF Action # ADR (Action) THEN GenEvaluator (Action); END;        369   368   368     *   376   368     *
                                                                                   375
   379       ELSE                                                                  373
   380                  IF Action # ADR (Action) THEN GenEvaluator (Action); END;        378   378   378     *   378   378     *
                                                                                   378
   381       END;                                                                  380
   382               END;                                                          381
   383               IF ({Synthesized, Right, First} <= Properties) AND            380   364   347   364   376   376
   384                  (Attribute^.Child.Partition <= Selector^.Child.Class^.Class.Visits)\   374   374   335   173     *   376
                                                                                     *   269
      \ THEN                                                                       380
   385       IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN   383   376   376   376   383   376   376
                                                                                   376   384   383   384
   386                  @      yyWriteVisit ( TNode , "@ WI (Selector^.Child.Name); @ @          *   377
   387                  WN (Attribute^.Child.Partition); @" ) ;@                   305   384   384   384
   388       END;                                                                  382
   389                  ChildVisit := Attribute^.Child.Partition;                   40   387   387   387
   390                  Child := Selector;                                         389   384
   391                  !      yyVisit! WN (ChildVisit); WI (Child^.Child.Type);   305   387   389   374   390     *   374
   392                  ! ( TNode . ! WI (Child^.Child.Name);                      386   391   391     *   328
   393                  ForallAttributes (Child^.Child.Class, GenActualsRight);    273   392     *   385     *
   394                  ! ) ;!
   395               END;                                                          388
   396            END;                                                             395
   397         END;                                                                396
   398       IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN   385   385   385   385   385   385   385
                                                                                   385   393   385   385
   399         !yyVisitParent ( TNode ) ;!                                         302   392
   400       END;                                                                  397
   401 }; .
   402 Assign (..) :- {                                                              *
   403         WriteLine (Pos);                                                    282     *
   404         GenEvaluator (Results); ! := ! GenEvaluator (Arguments); ! ;!       380     *     *     *
   405 }; .
   406 Copy (..) :- {                                                                *
   407         j := Class^.Class.Instance^[i].CopyArg;                             177   398     *   346   374    69
   408         IF (Parameter IN Class^.Class.Instance^[i].Attribute^.Attribute.Properties) \   398   137   398   407     *   407
                                                                                   407   389     *   398
      \AND                                                                         398
   409            (Parameter IN Class^.Class.Instance^[j].Attribute^.Attribute.Properties) \   408   408   408     *   408   407
                                                                                   408     *   408
      \THEN                                                                        398
   410            IF (Left IN Class^.Class.Instance^[i].Properties) AND            408   364   409   409     *   409   408   409
                                                                                   408
   411               (Left IN Class^.Class.Instance^[j].Properties) THEN           410   410   410     *   410   409   410   409
   412 
   413               WriteLine (Pos);                                              403   403
   414               GenAttribute (i, FALSE); ! := ! GenEvaluator (Arguments); ! ;!      374   410   182   404   404
   415            END;                                                             400
   416         ELSE                                                                379
   417            WriteLine (Pos);                                                 413   413
   418            GenEvaluator (Results); ! := ! GenEvaluator (Arguments); ! ;!    414   404     *   414
   419         END;                                                                415
   420 }; .
   421 TargetCode (..) :- {                                                          *
   422         WriteLine (Pos);                                                    417   417
   423         GenEvaluator (Code); !!                                             418     *
   424 }; .
   425 Check (..) :- {                                                               *
   426         WriteLine (Pos);                                                    422   422
   427         IF Condition # NoTree THEN                                          410     *   162   411
   428       IF IsElement (ORD ('X'), Options) THEN                                427   398   398   398   427
   429            !      yyb := ! GenEvaluator (Condition); ! ; IF NOT yyb THEN !        370   423   427   428   192     *   428
   430       ELSE                                                                  416
   431            !      IF NOT (! GenEvaluator (Condition); !) THEN !             429   429   429   429   429
   432       END;                                                                  419
   433            GenEvaluator (Statement); !!                                     431     *
   434            IF Actions^.Kind = Tree.Check THEN                               431     *   371   371   425   431
   435               !      ELSE ! GenEvaluator (Actions);                         430   433   434
   436            END;                                                             432
   437            !      END;!                                                     436
   438         ELSE                                                                435
   439       IF IsElement (ORD ('X'), Options) THEN                                434   428   428   428   434
   440            !      yyb := FALSE ; !                                          429   414
   441       END;                                                                  437
   442            GenEvaluator (Statement); !;!                                    435   433
   443            GenEvaluator (Actions);                                          442   435
   444         END;                                                                441
   445 }; .
   446 Designator (..) :- {                                                          *
   447         Child2 := IdentifyAttribute (Class, Selector);                       41   159   411   390
   448         IF Child2 # NoTree THEN                                             439   447   427   439
   449            ChildsClass := Child2^.Child.Class;                               41   448   393   447
   450            Attr := IdentifyAttribute (ChildsClass, Attribute);               41   447   449   409
   451            IF Attr # NoTree THEN                                            448   450   448   448
   452               GenAttribute (Class^.Class.AttrCount + Child2^.Child.InstOffset + Attr\   414   449     *    92   449   449
                                                                                     *   451
      \^.Attribute.AttrIndex, TRUE);                                               450     *   374
   453            ELSE                                                             438
   454               WI (Selector); !:! WI (Attribute);                            392   447     *   452
   455            END;                                                             444
   456         ELSE                                                                453
   457            WI (Selector); !:! WI (Attribute);                               454   454     *   454
   458         END;                                                                455
   459         GenEvaluator (Next);                                                443   284
   460 }; .
   461 Ident (..) :- {                                                               *
   462         Attr := IdentifyAttribute (Class, Attribute);                       452   450   452   457
   463         IF Attr # NoTree THEN                                               451   462   451   451
   464            GenAttribute (Attr^.Attribute.AttrIndex, TRUE);                  452   463   462   452   452
   465         ELSE                                                                456
   466            WI (Attribute);                                                  457   464
   467         END;                                                                458
   468         GenEvaluator (Next);                                                459   459
   469 }; .
   470 Any (..) :- {                                                                 *
   471         WriteString (f, Code);                                               17   283   423
   472         GenEvaluator (Next);                                                468   468
   473 }; .
   474 Anys (..) :- {                                                                *
   475         GenEvaluator (Layouts);                                             472     *
   476         GenEvaluator (Next);                                                475   472
   477 }; .
   478 LayoutAny (..) :- {                                                           *
   479         WriteString (f, Code);                                              471   471   471
   480         GenEvaluator (Next);                                                476   476
   481 }; .
   482 
   483 
   484 PROCEDURE Generated0 (t: Tree)                                              323   267   398   434
   485 
   486 Class (..) :- {                                                             462
   487         Generated := 0;                                                     340
   488 }; .
   489 
   490 
   491 PROCEDURE GenFormals    /* Node, Class, Visit   */ (t: Tree)                484   273   484   484
   492 
   493 Attribute (..) :- {                                                         466
   494         IF (Parameter IN Properties) AND (Visit IN Usage) THEN              463   409   411   411   410   335     *   174
                                                                                   463
   495            !; VAR ! GenAttribute (AttrIndex, FALSE); ! : ! WI (Type);       287   464   464   440   466   391
   496         END;                                                                467
   497 }; .
   498 
   499 
   500 PROCEDURE GenActualsRight       /* Node = current type, Class = subtype, Child, Chil\   491   393
c     \dVisit  */ (t: Tree)                                                        491   491
   501 
   502 Attribute (..) :- {                                                         493
   503         IF (Parameter IN Properties) AND (ChildVisit IN Usage) THEN         494   494   494   494   494   391     *   494
                                                                                   494
   504            !, ! GenAttribute (Class^.Class.AttrCount + Child^.Child.InstOffset + Att\   495   486     *   452   452     *
                                                                                   452
      \rIndex, TRUE);                                                              495   464
   505         END;                                                                496
   506 }; .
   507 
   508 
   509 PROCEDURE GenActualsLeft        /* Node = current type, Class = subtype, Visit  */ (\   500   222
      \t: Tree)                                                                    500   500
   510 
   511 Attribute (..) :- {                                                         502
   512         IF (Parameter IN Properties) AND (Visit IN Usage) THEN              503   503   503   503   503   494     *   503
                                                                                   503
   513            !, ! GenAttribute (AttrIndex, FALSE);                            504   504   495
   514         END;                                                                505
   515 }; .
   516 
   517 
   518 PROCEDURE GenTempos     /* Node, Class (sometimes), Visit, k    */ (t: Tree)      509   277   509   509
   519 
   520 Class (..) :- {                                                             504
   521         IF (NoCodeClass * Properties) # {} THEN RETURN; END;                512   326   512   512   327   514
   522         Start := Generated + 1;                                             345   487
   523         LOOP                                                                331
   524            IF Generated = InstCount THEN EXIT; END;                         521   522   332   521   336   521
   525            INC (Generated);                                                 333   524
   526            WITH Instance^ [Instance^ [Generated].Order] DO                  346   411     *   525   345   346
   527               IF (Left IN Properties) AND (Attribute^.Child.Partition > Visit) THEN     524   411   512   521   512   511
                                                                                   504   389   512   524
   528                  DEC (Generated); EXIT;                                     336   526   524
   529               END;                                                          524
   530            END;                                                             529
   531         END;                                                                530
   532         Stop := Generated;                                                  344   528
   533         Generated := Start - 1;                                             532   522
   534 
   535         Count := 0;                                                          40
   536         Class := t;                                                         520   518
   537         ForallAttributes (t, CountTempos);                                  393   536     *
   538         IF Count > 0 THEN                                                   527   535   527
   539            !  (* ! WI (iMain); ! . ! WI (Name); ! : *)!
   540            Class := t;                                                      536   537
   541            ForallAttributes (t, GenTempos);                                 537   540   518
   542         END;                                                                531
   543 }; .
   544 Child (..) :- {                                                             527
   545         Child := t;                                                         544   541
   546         ForallAttributes (Class, GenTemposChildren);                        541   540     *
   547 }; .
   548 Attribute (..) :- {                                                         527
   549         IF (Parameter IN Properties) AND (IdentifyAttribute (Node, Name) = NoTree) A\   538   512   527   527   527   462
                                                                                   296   392   463
      \ND (Visit IN Usage) OR                                                        *   527     *   512   371
   550            (Demand IN Properties) AND NOT (Funct IN Properties) AND (AttrIndex # k) \   364   549   549   549   431   140
                                                                                     *     *     *   513   186
      \THEN                                                                        538
   551            !  VAR ! GenAttribute (AttrIndex, FALSE); ! : ! WI (Type); ! ;!        495   513   550   513   495   495
   552         END;                                                                542
   553 }; .
   554 
   555 
   556 PROCEDURE GenTemposChildren     /* Node, Class, Child   */ (t: Tree)        518   546   545   518
   557 
   558 Attribute (..) :- {                                                         548
   559         IF (Parameter IN Properties) OR                                     549   549   550   550   549
   560            (Demand IN Properties) AND NOT (Funct IN Properties) THEN        550   559   559   550   550   550     *     *
                                                                                   550
   561            j := Class^.Class.AttrCount + Child^.Child.InstOffset + AttrIndex;     411   546     *   504   545     *   504
                                                                                   551
   562            IF (Demand IN Properties) OR                                     559   560   560   560   559
   563               (({CopyDef, CopyUse} * Class^.Class.Instance^[j].Properties) = {}) OR     107   107   561     *   526   561
                                                                                   562   562
   564               (j = Representative (j)) THEN                                 563   108     *   560
   565               IF CheckUsage (Usage) THEN                                    562   183   549   564
   566                  !  VAR ! GenAttribute (j, FALSE); ! : ! WI (Type); ! ;!    551   551   564   551   551   551
   567               END;                                                          552
   568            END;                                                             567
   569         END;                                                                568
   570 }; .
   571 
   572 
   573 PROCEDURE CountTempos   /* Node, Class (sometimes), Visit, k    */ (t: Tree)      556   537   556   556
   574 
   575 Child (..) :- {                                                             561
   576         Child := t;                                                         575   573
   577         ForallAttributes (Class, CountTemposChildren);                      546   563     *
   578 }; .
   579 Attribute (..) :- {                                                         558
   580         IF (Parameter IN Properties) AND (IdentifyAttribute (Node, Name) = NoTree) A\   565   559   562   563   560   549
                                                                                   549   549   549
      \ND (Visit IN Usage) OR                                                        *   549     *   565   563
   581            (Demand IN Properties) AND NOT (Funct IN Properties) AND (AttrIndex # k) \   562   580   580   580   560   560
                                                                                     *     *     *   561   550
      \THEN                                                                        565
   582            INC (Count);                                                     525   538
   583         END;                                                                569
   584 }; .
   585 
   586 
   587 PROCEDURE CountTemposChildren   /* Node, Class, Child   */ (t: Tree)        573   577   576   573
   588 
   589 Attribute (..) :- {                                                         579
   590         IF (Parameter IN Properties) OR                                     580   580   581   581   580
   591            (Demand IN Properties) AND NOT (Funct IN Properties) THEN        581   590   590   581   581   581     *     *
                                                                                   581
   592            j := Class^.Class.AttrCount + Child^.Child.InstOffset + AttrIndex;     566   577     *   561   576     *   561
                                                                                   581
   593            IF (Demand IN Properties) OR                                     590   591   591   591   590
   594               (({CopyDef, CopyUse} * Class^.Class.Instance^[j].Properties) = {}) OR     563   563   592     *   563   592
                                                                                   593   593
   595               (j = Representative (j)) THEN                                 594   564     *   591
   596               IF CheckUsage (Usage) THEN INC (Count); END;                  593   565   580   595   582   582   583
   597            END;                                                             596
   598         END;                                                                597
   599 }; .
   600 
   601 
   602 PROCEDURE GenTemposLocal        /* Node, Class  */ (t: Tree)                587   215   587   587
   603 
   604 Attribute (..) :- {                                                         589
   605         IF Parameter IN Properties THEN                                     596   590   593   594   596
   606            !  VAR ! GenAttribute (AttrIndex, FALSE); ! : ! WI (Type); ! ;!        566   566   592   566   566   566
   607         END;                                                                598
   608 }; .
   609 
   610 
   611 PROCEDURE GenDemandProc /* Node, Class  */ (t: Tree)                        602   232   602   602
   612 
   613 Class (..) :- {                                                             594
   614         IF (NoCodeClass * Properties) # {} THEN RETURN; END;                605   521   605   605   521   607
   615         Node := t;                                                          580   611
   616         ForallAttributes (Attributes, GenDemandProc);                       577   159   611
   617 (* RMB 10-97 ^ I believe this needs to be done only for the immediate attributes and\
c     \ not the
c  618                attributes of all base classes (ForAllAttributes will do the latter),\
c     \ because calls
c  619                on demand procedures always find the exact class of the attribute and\
c     \ use it
c  620                to build the demand procedure name. Calls are generated in GenDemandE\
c     \val and
c  621                GenAttribute. *) 
   622 }; .
   623 Attribute (..) :- {                                                         604
   624         IF Demand IN Properties THEN                                        614   593   605   614   614
   625            Class := Node;                                                   613   615
   626            k := AttrIndex;                                                  581   606
   627            IF Funct IN Properties THEN                                      624   591   624   624   624
   628               !PROCEDURE y! WI (Class^.Class.Name); !y! WI (Name);          611   145   606   625     *   580     *     *
                                                                                     *
   629               ! ( yyt : ! WI (iMain); ! . ! WI (Class^.Class.Name); ! ) : ! WI (Type\   302   628   328     *   628     *
                                                                                   628     *   606
      \); !=!
   630            ELSE                                                             465
   631               !PROCEDURE y! WI (Class^.Class.Name); !y! WI (Name);          628   628   629   629     *   629     *     *
                                                                                     *
   632               ! ( yyt : ! WI (iMain); ! . ! WI (Class^.Class.Name);         629   631   629     *   631     *   631
   633               ! ; VAR ! GenAttribute (AttrIndex, FALSE); ! : ! WI (Type); ! ) =!        606   606   626   606   632   629
   634            END;                                                             614
   635            ForallClassesExtensionsFirst ( Class^.Class.Extensions , GenTempos ) ;       297   632     *   297   541
   636            GenTempos (Class);                                               635   635
   637            !  BEGIN!                                                        292
   638            !    TYPECASE yyt OF!                                            294   632   294
   639            IF cOAG IN GrammarClass THEN                                     627   295   627   295   627
   640               i := AttrIndex;                                               414   633
   641               Class := Node;                                                636   625
   642               ForallClassesExtensionsFirst ( Class^.Class.Extensions , GenDemandProc\   635   641     *   635
      \2 ) ;                                                                         *
   643               GenDemandProc2 (Class);                                       642   642
   644               Class := Node;                                                643   641
   645            END;                                                             634
   646            !    ELSE!                                                       630
   647            !    END;!                                                       645
   648            !  END y! WI (Class^.Class.Name); !y! WI (Name); !;!             647   631   633   644     *   632     *     *
                                                                                     *
   649            !!
   650            k := 0;                                                          626
   651         END;                                                                648
   652 }; .
   653 
   654 PROCEDURE GenDemandProc2        /* Node, Class, i       */ (t: Tree)        631   643   615   611
   655 
   656 Class (..) :- {                                                             648
   657         !    | ! WI (iMain); ! . ! WI (Name); ! ( TNode ) =>!               648   632     *   648   399
   658         WITH Instance^ [i] DO                                               526   594   640   526
   659            Class := t;                                                      656   654
   660            GenDemandEval (t);                                               365   659
   661            IF Funct IN Properties THEN                                      639   627   639   627   639
   662               GenDemandProc2 (Action);                                      654   380
   663            ELSE                                                             646
   664               GenEvaluator (Action); !!                                     480   662
   665            END;                                                             651
   666         END;                                                                665
   667 }; .
   668 Assign (..) :- {                                                            402
   669         !      RETURN ! GenEvaluator (Arguments); !;!                       614   664   418
   670 }; .
   671 Copy (..) :- {                                                              406
   672         !      RETURN ! GenEvaluator (Arguments); !;!                       669   669   669
   673 }; .
   674 TargetCode (..) :- {                                                        421
   675         !NoBlockStatementForDemandFunctionAttributes;!                        *
   676 }; .
   677 
   678 
   679 PROCEDURE GenDemandEval /* Node, Class, i       */ (t: Tree)                654   660   660   654
   680 
   681 Class (..) :- {                                                             659
   682         FOR j := 1 TO InstCount DO                                          344   595   344   524   658
   683            WITH Instance^ [j] DO                                            658   658   682   682
   684               IF IsRelated (i, j, DP) AND                                   661    21   658   683     *   591
   685                  (Demand IN Properties) AND NOT (Funct IN Properties) THEN        624   661   661   684   591   661     *
                                                                                     *   661
   686                  IF Left IN Properties THEN                                 684   527   685   685   685
   687                     AttrClass := GetClass (t, Attribute^.Child.Name);       142   163   679   623   592   657
   688                     !      y! WI (AttrClass^.Class.Name); !y! WI (Attribute^.Child.N\   648   657   687   681   687     *
                                                                                     *   687   687
      \ame);                                                                         *
   689                     ! ( TNode , ! GenAttribute (j, FALSE); ! ) ;!           657   633   684   633
   690                  ELSE                                                       663
   691                     AttrClass := GetClass (Selector^.Child.Class, Attribute^.Child.N\   688   687   457   688   688   688
                                                                                     *
      \ame);                                                                       688
   692                     !      y! WI (AttrClass^.Class.Name); !y! WI (Attribute^.Child.N\   688   688   691   691   691     *
                                                                                     *   691   691
      \ame);                                                                         *
   693                     ! ( TNode . ! WI (Selector^.Child.Name);                689   692   691   692   692
   694                     ! , ! GenAttribute (j, FALSE); ! ) ;!                   689   689   689
   695                  END;                                                       666
   696               END;                                                          695
   697            END;                                                             696
   698         END;                                                                697
   699 }; .
   700 
   701 
Cross reference: 

-A-
 Action                         351   351   351   359   359   359   361   361   361   368   368   368   378   378   378   380   380 
                                380   662   664 
 Actions                        434   435   443 
 ADR                             15   227   289   351   359   361   368   378   380 
 Ag                             190   278   279   280 
 AND                             59    67    68    69    92   106   171   172   173   177   335   347   349   357   364   366   376 
                                383   385   398   408   410   494   503   512   527   549   549   550   550   560   580   580   581 
                                581   591   684   685 
 Any                            470 
 Anys                           474 
 Arguments                      404   414   418   669   672 
 Assign                         402   668 
 Attr                            41   450   451   452   462   463   464 
 AttrClass                       41   124   125   141   142   687   688   691   692 
 AttrCount                       80    84    92   452   504   561   592 
 Attribute                       59    59    68    68   106   106   115   115   136   136   156   159   173   174   335   352   352 
                                352   355   371   371   371   374   384   387   389   408   408   409   409   450   452   454   457 
                                462   464   466   493   502   511   527   548   558   579   589   604   623   687   688   691   692 
 Attributes                     159   616 
 AttrIndex                      452   464   495   504   513   550   551   561   581   592   606   626   633   640 

-B-
 BaseClass                      160 
 BEGIN                           49   103   157   167   186   198   216   235   247   258   288   292   637 
 Begin                          234   237   241   244 
 BeginLine                      236   240 
 BITSET                         165 
 BOOLEAN                         47   102   165   212   287 

-C-
 CARDINAL                        43    43    46    48   102 
 Check                          425   434 
 CheckUsage                     165   183   565   596 
 Child                           41   138   141   143   145   148   172   173   173   174   335   352   355   371   374   384   384 
                                387   389   390   391   391   392   392   393   393   449   452   504   504   527   544   545   561 
                                561   575   576   592   592   687   688   691   691   692   693 
 Child2                          41   447   448   449   452 
 ChildsClass                     41   449   450 
 ChildVisit                      40   389   391   503 
 Class                           41    50    50   105   105   112   112   118   118   124   125   127   127   138   138   141   142 
                                145   145   156   158   159   159   159   160   160   160   169   169   170   170   173   173   196 
                                197   200   202   202   203   214   215   219   221   221   222   264   272   325   342   349   357 
                                366   376   384   384   385   393   398   407   407   408   408   409   409   410   410   411   411 
                                447   449   452   452   462   486   504   504   520   536   540   546   561   561   563   563   577 
                                592   592   594   594   613   625   628   628   629   629   631   631   632   632   635   635   636 
                                641   642   642   643   644   648   648   656   659   681   688   691   692 
 Classes                        195   196   200   213   214   219   232   233 
 Close                          246   249   253   256 
 CloseLine                      248   252 
 cOAG                            36   295   639 
 Code                           423   471   479 
 Codes                          236   237   240   241   248   249   252   253   278   279   282   283 
 Computed                        27 
 Condition                      427   429   431 
 Copy                           406   671 
 CopyArg                         58    69   407 
 CopyDef                         30    57    67   107   563   594 
 CopyUse                         30    65   107   563   594 
 Count                           40   535   538   582   596 
 CountTempos                    537   573 
 CountTemposChildren            577   587 

-D-
 DEC                            336   528 
 Demand                          33   122   139   347   364   550   560   562   581   591   593   624   685 
 Designator                     446 
 DO                              50    55    66   105   112   115   136   158   168   170   239   251   269   281   334   344   346 
                                526   658   682   683 
 DP                             684 
 Dummy                           32   347   364 

-E-
 ELSE                           119   128   131   135   144   147   207   291   300   354   360   373   379   416   430   435   438 
                                453   456   465   630   646   663   690 
 ELSIF                          122   126   139   357   371   376 
 END                             63    64    73    74    75    76    77    84    85    87    92    94    95    96    99   100   109 
                                110   111   113   121   130   133   134   146   150   151   152   153   154   159   161   163   176 
                                179   180   181   183   205   206   224   229   230   243   244   255   256   261   262   265   285 
                                293   299   303   304   305   307   308   326   327   332   337   338   339   351   356   359   361 
                                362   363   368   375   378   380   381   382   388   395   396   397   400   415   419   432   436 
                                437   441   444   455   458   467   496   505   514   521   524   529   530   531   542   552   567 
                                568   569   583   596   597   598   607   614   634   645   647   648   651   665   666   695   696 
                                697   698 
 EOL                            228 
 Eval                           194   206   211   229 
 EvalCodes                      236   237   240   241   248   249   252   253   278   279   282   283 
 EvalModule                      11   188   233 
 EvalModuleHead                  23   191 
 EvalMThree                      23 
 EvalMThree2                      9 
 EvalName                       234   244   246   256   262 
 EXIT                            84    85    92   332   336   524   528 
 Extensions                     267   276   297   635   642 

-F-
 f                               35   237   241   249   253   279   283   471   479 
 FALSE                           62    72    85   182   414   440   495   513   551   566   606   633   689   694 
 First                           32   171   347   364   383 
 Fmt                            227 
 FOR                             55    66   168   269   344   682 
 ForallAttributes                35   197   203   215   222   273   393   537   541   546   577   616 
 ForallClassesExtensionsFirst    35   232   233   267   276   297   635   642 
 FROM                            15    16    17    18    19    20    21    22    23    25 
 Funct                           33   123   140   550   560   581   591   627   661   685 

-G-
 GenActualsLeft                 203   222   509 
 GenActualsRight                393   500 
 GenAttribute                   102   154   353   355   372   374   414   452   464   495   504   513   551   566   606   633   689 
                                694 
 GenDemandEval                  348   365   660   679 
 GenDemandProc                  232   611   616 
 GenDemandProc2                 642   643   654   662 
 Generated                      268   327   330   332   333   334   336   340   487   522   524   525   526   528   532   533 
 Generated0                     267   484 
 GenEvaluator                   297   298   323   351   359   361   368   378   380   404   404   414   418   418   423   429   431 
                                433   435   442   443   459   468   472   475   476   480   664   669   672 
 GenFormals                     273   491 
 GenTempos                      276   277   518   541   635   636 
 GenTemposChildren              546   556 
 GenTemposLocal                 197   215   602 
 GetClass                       124   141   156   163   687   691 
 GLOBAL                          13 
 GrammarClass                    36   295   639 

-I-
 i                               40    43    52   102   105   108   108   112   126   166   168   169   345   346   353   355   372 
                                374   407   408   410   414   640   658   684 
 i2                             166   169   170   177 
 Ident                          461 
 IdentifyAttribute               36   117   159   447   450   462   549   580 
 Idents                          18 
 IF                              56    57    59    65    67    80    84    85    88    92   104   106   113   114   116   117   123 
                                137   140   159   171   177   192   199   218   259   265   266   286   295   301   326   327   332 
                                335   347   349   351   352   359   361   364   366   368   369   378   380   383   385   398   408 
                                410   427   428   429   431   434   439   448   451   463   494   503   512   521   524   527   538 
                                549   559   562   565   580   590   593   596   605   614   624   627   639   661   684   686 
 iMain                           34   194   211   270   328   629   632   657 
 iModule                         34 
 IMPORT                          15    16    17    18    19    20    21    22    23    25 
 IN                              57    59    65    67    68   106   113   114   116   122   123   137   139   140   174   266   295 
                                335   349   357   366   369   376   385   398   408   409   410   411   494   494   503   503   512 
                                512   527   549   549   550   550   559   560   560   562   580   580   581   581   590   591   591 
                                593   605   624   627   639   661   685   685   686 
 INC                             86    93   333   525   582   596 
 Include                         20    52    61    71 
 Inherited                       28   177   347 
 Input                           28 
 Instance                        57    58    59    65    67    68    69    91   105   112   169   170   334   334   345   346   407 
                                408   409   410   411   526   526   563   594   658   683 
 InstCount                       51    55    66   327   332   524   682 
 InstOffset                     452   504   561   592 
 Int                            227 
 INTEGER                        209   217   227   289 
 IO                              16 
 IsElement                       20    56    60    70    85    92   192   259   286   301   349   357   366   376   385   398   428 
                                439 
 IsRelated                       21   684 
 itTree                          34   194   211   352   353   371   372 

-J-
 j                               40    48    55    56    57    58    65    69    82    84    85    86    89    91    93   177   407 
                                409   411   561   563   564   564   566   592   594   595   595   682   683   684   689   694 

-K-
 k                               40    48    58    59    60    61    66    67    68    69    70    71    91    92    92    92   126 
                                186   550   581   626   650 
 Kind                           158   239   251   281   352   371   434 

-L-
 LAST                           217 
 LayoutAny                      478 
 Layouts                        475 
 Left                            31   114   335   364   410   411   527   686 
 Local                          279   283 
 LocalLine                      278   282 
 LOOP                            83    90   331   523 
 LOOPHOLE                       227   289 

-M-
 MakeSet                         20    51 
 MaxVisit                        36   199   218 
 MIN                            289 
 Minimum                         20    79 
 Module                         239   240   241   242   251   252   253   254   281   282   283   284 
 Modules                        238   250   280 

-N-
 Name                           117   118   118   120   124   125   125   127   127   129   132   138   138   138   141   142   142 
                                143   145   145   145   148   149   202   221   270   270   305   328   392   549   580   628   628 
                                629   631   631   632   648   648   657   687   688   688   691   692   692   693 
 Next                           242   254   284   459   468   472   476   480 
 NoBlockStatementForDemandFun\  675 
   ctionAttributes
 NoClass                         33   158 
 NoCodeClass                     26   265   326   521   614 
 Node                            41   117   195   213   238   239   240   241   242   242   250   251   252   253   254   254   271 
                                275   280   281   282   283   284   284   296   549   580   615   625   641   644 
 NonBaseComp                     32 
 NOT                             60    70    88   192   429   431   550   560   581   591   685 
 NoTree                          26   117   159   162   427   448   451   463   549   580 

-O-
 OF                             294   638 
 Options                         33   192   259   286   301   349   357   366   376   385   398   428   439 
 OR                             352   371   549   559   562   563   580   590   593   594 
 ORD                            192   259   286   301   349   357   366   376   385   398   428   439 
 Order                           91   169   334   345   526 
 Output                          28 

-P-
 Parameter                       29    59    68   106   116   137   408   409   494   503   512   549   559   580   590   605 
 Partition                      173   174   335   384   387   389   527 
 Pos                            403   413   417   422   426 
 PROCEDURE                       43   102   156   165   188   194   211   234   246   270   323   484   491   500   509   518   556 
                                573   587   602   611   628   631   654   679 
 Properties                      57    59    65    67    68   106   107   113   114   116   122   123   137   139   140   171   177 
                                265   266   326   335   347   347   349   357   364   364   366   369   376   383   385   398   408 
                                409   410   411   494   503   512   521   527   549   550   550   559   560   560   562   563   580 
                                581   581   590   591   591   593   594   605   614   624   627   661   685   685   686 
 PUBLIC                          11 
 PutText                        225   226   228 

-R-
 r                               46    79    80    82    92    98 
 Read                            27 
 Referenced                      26   266 
 Relations                       21 
 ReleaseSet                      20    97 
 REPEAT                          53 
 repr                           102   104 
 Representative                  43   100   108   564   595 
 Results                        404   418 
 RETURN                          98   113   159   162   175   178   182   265   326   327   521   614   669   672 
 Reverse                         27 
 Right                           31   171   177   347   383 

-S-
 s                               45    51    52    56    60    61    70    71    79    85    92    97 
 Selector                       138   141   143   145   148   172   173   384   390   447   454   457   691   693 
 Sets                            20 
 SHORTCARD                       40   166 
 Stable                          47    54    62    72    78    81    85    88 
 Stack                           29 
 Start                           40   168   330   344   344   345   522   533 
 Statement                      433   442 
 Stdio                          225   226   228   260 
 Stdout                         225   226   228   260 
 StdOutput                       16 
 Stop                            40   168   340   344   532 
 StringMem                       17 
 Synthesized                     28   171   364   383 
 SYSTEM                          15 

-T-
 t                              188   191   271   272   273   275   277   296   298   323   342   348   349   357   365   366   376 
                                385   398   484   491   500   509   518   536   537   540   541   545   556   573   576   587   602 
                                611   615   654   659   660   679   687 
 TargetCode                     421   674 
 Test                            31   369 
 Texts                           19 
 THEN                            56    57    60    65    70    80    84    85    88    92   104   107   113   114   116   117   122 
                                123   126   137   139   140   159   174   177   192   199   218   259   265   266   286   295   301 
                                326   327   332   335   347   349   351   352   357   359   361   364   366   368   369   371   376 
                                378   380   384   385   398   409   411   427   428   429   431   434   439   448   451   463   494 
                                503   512   521   524   527   538   550   560   564   565   581   591   595   596   605   614   624 
                                627   639   661   685   686 
 Thread                          30 
 tIdent                          18   156 
 TNode                          125   132   143   148   328   350   358   367   377   386   392   399   657   689   693 
 TO                              55    66   168   269   344   682 
 Trace                           32   349   357   366   376   385   398 
 TRAFO                            9 
 TREE                            10 
 Tree                            10    25   188   239   251   281   323   352   371   434   484   491   500   509   518   556   573 
                                587   602   611   654   679 
 TreeMThree2                     22 
 TreeRoot                        34   278   279   280 
 TRUE                            54    81   175   178   353   355   372   374   452   464   504 
 tSet                            20    45 
 tTree                           26    41   156   156 
 Type                           352   355   371   374   391   495   551   566   606   629   633 
 TYPECASE                       294   638 

-U-
 UNTIL                           78 
 Usage                          165   174   494   503   512   549   565   580   596 

-V-
 VAR                             39    44   166   209   212   287   495   551   566   606   633 
 Variable                        29 
 Virtual                         30   113   347   364 
 Visit                           40   201   220   269   270   305   335   494   512   527   549   580 
 Visits                         173   269   384 

-W-
 WHILE                          158   239   251   281 
 WI                              35   118   118   120   125   125   127   127   129   132   138   138   138   142   142   143   145 
                                145   145   148   149   194   194   202   211   211   221   234   244   246   256   262   270   270 
                                270   305   328   328   353   355   372   374   391   392   454   454   457   457   466   495   551 
                                566   606   628   628   629   629   629   631   631   632   632   633   648   648   657   657   688 
                                688   692   692   693 
 WITH                            50   105   112   115   136   170   334   346   526   658   683 
 WN                              35   270   305   387   391 
 Wr                             225   226   228   228 
 Write                           27 
 write                          353   355   372   374 
 writeBOOLEAN                   370 
 WriteI                          16 
 WriteInstance                   37 
 WriteLine                       22   236   240   248   252   278   282   403   413   417   422   426 
 WriteNl                         16 
 WriteS                          16 
 WriteSet                        20 
 WriteString                     17   471   479 
 WriteText                       19   237   241   249   253   279   283 

-X-
 xxHigh                         212   227 
 xxLow                          287   289 
 xxStack                        209   217   227   289   289 

-Y-
 y                              125   125   138   138   142   142   145   145   628   628   631   631   648   648   688   688   692 
                                692 
 yy                             118   120   127   129 
 yyb                            370   429   429   440 
 yyf                            260 
 yyt                            194   202   211   221   270   294   302   629   632   638 
 yyVisit                        270   305   391 
 yyVisit1                       202   221 
 yyVisitParent                  302   399 
 yyWriteEval                    350   358   367   377 
 yyWriteNl                      355   370   374 
 yyWriteVisit                   386 

end cross reference, 2099 occurrences of 234 identifiers.
