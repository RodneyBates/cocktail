     1 (* Ich, Doktor Josef Grosch, Informatiker, 23.5.1989 *)
     2 
     3 (* Modified Rodney M. Bates: 
c    4    July 98: Rationalized indentation and shortened lines.
c    5    Oct 98:  Added colons to labels 
c    6    July 99 change # include to reflect new build location
c    7    July 99 Add VAR to rule local decls. 
c    8 
c    9 *) 
    10 
    11 TRAFO Order                                                                   *     *
    12 TREE Tree                                                                     *     *
    13 PUBLIC Order WriteOrderDecl WriteOrderEval WriteVisitSequence                 *    11     *     *     *
    14 
    15 EXPORT {                                                                      *
    16 VAR IndexToClass: POINTER TO ARRAY [0 .. 10000] OF Tree.tTree;                *     *     *     *     *     *    12     *
    17 }
    18 
    19 GLOBAL {                                                                      *
    20 
    21 FROM SYSTEM     IMPORT TSIZE, ADR;                                            *     *     *     *     *
    22 FROM Memory     IMPORT Alloc, Free;                                          21     *    21     *     *
    23 FROM DynArray   IMPORT MakeArray;                                            22     *    22     *
    24 FROM IO         IMPORT StdOutput, WriteI, WriteS, WriteNl;                   23     *    23     *     *     *     *
    25 FROM Idents     IMPORT WriteIdent;                                           24     *    24     *
    26 
    27 FROM Sets       IMPORT                                                       25     *    25
    28    tSet         , MakeSet       , ReleaseSet    , IsElement     ,             *     *     *     *
    29    Extract      , AssignEmpty   , Minimum       , Maximum       ,             *     *     *     *
    30    Include      , Exclude       , Union         ;                             *     *     *
    31 
    32 FROM Relations  IMPORT                                                       27     *    27
    33    tRelation    , MakeRelation  , ReleaseRelation, Closure      ,             *     *     *     *
    34    HasReflexive , IsRelated     , Assign        , Difference    ,             *     *     *     *
    35    IsCyclic     , GetCyclics    , WriteRelation ;                             *     *     *
    36 
    37 FROM Queue      IMPORT                                                       32     *    32
    38    MakeQueue    , ReleaseQueue  , IsEmpty       , Enqueue       , Dequeue       ;         *     *     *     *     *
    39 
    40 FROM Tree       IMPORT                                                       37    16    37
    41    NoTree       , tTree         , tInstance     , Referenced    ,             *    16     *     *
    42    Computed     , Reverse       , Write         , Read          ,             *     *     *     *
    43    Inherited    , Synthesized   , Input         , Output        ,             *     *     *     *
    44    Stack        , Variable      ,                                             *     *
    45    CopyDef      , CopyUse       , Thread        , Test          ,             *     *     *     *
    46    Left         , Right         , Def           , Use           ,             *     *     *     *
    47    ChildUse     , ParentUse     , NonBaseComp   , First         ,             *     *     *     *
    48    Dummy        , Demand        , f             , WriteName     ,             *     *     *     *
    49    WriteInstance, WriteDependencies, WriteClassProperties, WriteCyclics,      *     *     *     *
    50    WriteClass   , MaxVisit      , MaxSet        ,                             *     *     *
    51    GrammarClass , cLNC  , cDNC  , cLAG  , cOAG  , cSAG  , cSNC  , cWAG,       *     *     *     *     *     *     *     *
    52    Options      , ForallClasses , ForallAttributes, tSetOfRel   ,             *     *     *     *
    53    tSetOfRelPtr ;                                                             *
    54 
    55 FROM Optimize   IMPORT LifeTime1, LifeTime3,                                 40     *    40     *     *
    56                         ChildrenIn, ChildrenDyn, AttributeIn, AttributeOut, Attribut\     *     *     *     *
      \eTree,                                                                        *
    57                         AttributeParam, AttributeVar, AttributeDemand, AttributeStac\     *     *     *
      \k;                                                                            *
    58 
    59 IMPORT Sets, Relations, Queue, Errors;                                       55    27    32    37     *
    60 
    61 CONST                                                                         *
    62 # include "../gen/consts2"                                                    *
    63 
    64 VAR                                                                          16
    65    HasCycle     ,                                                             *
    66    Children     ,                                                             *
    67    Parents      ,                                                             *
    68    Relevant     ,                                                             *
    69    Cyclics      ,                                                             *
    70    IsComputed   ,                                                             *
    71    IsComputable : tSet;                                                       *    28
    72    Prio         ,                                                             *
    73    UserIndex    ,                                                             *
    74    ClassCount   ,                                                             *
    75    Kind         ,                                                             *
    76    i, i2, j, k, n, Visit        : SHORTCARD;                                  *     *     *     *     *     *     *
    77    Reporting    ,                                                             *
    78    Success      ,                                                             *
    79    Stable       : BOOLEAN;                                                    *     *
    80    ActClass     ,                                                             *
    81    UserClass    ,                                                             *
    82    ChildsClass  : tTree;                                                      *    41
    83    AttrInstance : tInstance;                                                  *    41
    84    IndexSize    : LONGINT;                                                    *     *
    85 
    86 (*
c   87 PROCEDURE OptimizeVisits (t: tTree): BOOLEAN;
c   88    VAR Success  : BOOLEAN;
c   89    BEGIN
c   90       CASE t^.Kind OF
c   91       | Tree.Class      :
c   92          WITH t^.Class DO
c   93             Success := FALSE;
c   94             IF OptimizeVisits (Extensions) THEN
c   95                n := InstCount;
c   96                LOOP
c   97                   WITH Instance^ [Instance^ [n].Order] DO
c   98                      IF (Input IN Properties) 
c   99                         OR ({Synthesized, Left, Dummy} <= Properties) THEN
c  100                      ELSE EXIT;
c  101                      END;
c  102                   END (* WITH *) ;
   103                   DEC (n);                                                    *    76
   104                   IF n = 0 THEN EXIT; END;                                    *   103     *     *     *
   105                END (* LOOP *) ;                                             104
   106                Success := TRUE;                                              78     *
   107                LOOP                                                           *
   108                   WITH Instance^ [Instance^ [n].Order] DO                     *     *     *   104    13     *
   109                      IF (Left IN Properties) AND (Attribute^.Child.Partition > 0) AN\   104    46     *     *     *     *
                                                                                     *     *
      \D                                                                             *
   110                         (Attribute^.Child.Partition = Visits - 1) THEN      109   109   109     *   104
   111                         EXIT;                                               104
   112                      END;                                                   105
   113                      IF {Synthesized, Right} * Properties # {} THEN         109    43    46   109   110
   114                         Success := FALSE; EXIT;                             106     *   111
   115                      END;                                                   112
   116                   END (* WITH *) ;                                          115
   117                   DEC (n);                                                  103   108
   118                   IF n = 0 THEN EXIT; END;                                  113   117   113   114   116
   119                END (* LOOP *) ;                                             118
   120                IF Success THEN DEC (Visits);                                118   114   118   117   110
   121                END;                                                         119
   122             END (* IF *) ;                                                  121
   123             RETURN OptimizeVisits (Next) AND Success;                         *     *     *   109   120
   124          END (* WITH *) ;                                                   122
   125       | Tree.NoClass    :                                                    40     *
   126          RETURN TRUE;                                                       123   106
   127       END (* CASE *) ;                                                      124
   128    END OptimizeVisits;                                                      127   123
   129 *)
   130 
   131 PROCEDURE IsComputable3a (i: SHORTCARD; t: tTree): BOOLEAN;                   *     *    76    76     *    82    79
   132    VAR j        : SHORTCARD;                                                 64    76   131
   133    BEGIN                                                                      *
   134       WITH t^.Class DO                                                      108   131     *   108
   135          FOR j := 1 TO InstCount DO                                           *   132    16     *   134
   136             IF IsRelated (i, j, OAG)                                        120    34   131   135     *
   137             AND NOT IsElement (j, IsComputed) THEN                          123     *    28   136    70   120
   138                RETURN FALSE;                                                126   114
   139             END;                                                            128
   140          END;                                                               139
   141          RETURN TRUE;                                                       138   126
   142       END;                                                                  140
   143    END IsComputable3a;                                                      142   131
   144 
   145 PROCEDURE IsComputable3b (i: SHORTCARD; t: tTree): BOOLEAN;                 131     *   136   132   134   131   131
   146    VAR j        : SHORTCARD;                                                132   137   145
   147    BEGIN                                                                    133
   148       WITH t^.Class DO                                                      134   145   134   135
   149          IF ({Synthesized, Right} <= Instance^[i].Properties) OR            136   113   113   108   145   113     *
   150             ({Inherited, Left} <= Instance^[i].Properties) THEN              43   109   149   149   149   137
   151             FOR j := 1 TO InstCount DO                                      135   146   135   135   148
   152                IF (First IN Instance^ [j].Properties)                       149    47   109   150   151   150
   153                   AND IsRelated (j, i, OAG) AND                             137   136   152   150   136     *
   154                   NOT IsElement (j, IsComputed) THEN                        137   137   153   137   150
   155                   RETURN FALSE;                                             141   138
   156                END;                                                         143
   157             END;                                                            156
   158          ELSE                                                                 *
   159             FOR j := 1 TO InstCount DO                                      151   154   151   151   151
   160                IF IsRelated (j, i, OAG) AND NOT IsElement (j, IsComputed) THEN    152   153   159   153   153   153   154
                                                                                   154     *   154   154
   161                   RETURN FALSE;                                             155   155
   162                END;                                                         157
   163             END;                                                            162
   164          END;                                                               163
   165          RETURN TRUE;                                                       161   141
   166       END;                                                                  164
   167    END IsComputable3b;                                                      166   145
   168 }
   169 
   170 PROCEDURE Order (t: Tree)                                                   145   108   148   125
   171 
   172 Ag (..) :- {                                                                  *
   173         Order (Classes);                                                    170     *
   174 }; .
   175 Class (..) :- {                                                             148
   176         Success := TRUE;                                                    123   165
   177         ForallClasses (t, CheckNormalForm);     (* normal form?         *)         52   170     *
   178         IF Success THEN                                                     160   176   160
   179            ? GrammarIsInNormalForm I ?                                        *     *
   180         ELSE                                                                158
   181            ? GrammarIsNotInNormalForm I ?                                     *   179
   182         END;                                                                167
   183 
   184         IF cLNC IN GrammarClass THEN                                        178    51   152    51   178
   185 
   186           ForallClasses (t, CompIndex);   (* absolutely non circular?     *)      177   177     *
   187           IndexSize := ClassCount + 1;                                       84    74
   188           MakeArray (IndexToClass, IndexSize, TSIZE (tTree));                23    16   187    21   145
   189           MakeQueue (ClassCount);                                            38   187
   190           MakeSet (HasCycle, ClassCount);                                    28    65   189
   191           ForallClasses (t, CompIndexToClass);                              186   186     *
   192           ForallClasses (t, CompUsers);                                     191   191     *
   193 
   194           WHILE NOT IsEmpty () DO                                             *   160    38   159
   195              ActClass := IndexToClass^[Dequeue ()];                          80   188    38
   196              Closure (ActClass^.Class.SNC);                                  33   195   175     *
   197              CompSNC1 (ActClass^.Class.BaseClass);                            *   196   196     *
   198              (* CompSNC1 on a Class is disjoint from CompSNC1 on a Child *) 
   199              FOR UserIndex := Minimum (ActClass^.Class.Users)               159    73    29   197   197     *
   200              TO Maximum (ActClass^.Class.Users) DO                          159    29   199   199   199   194
   201                 IF IsElement (UserIndex, ActClass^.Class.Users) THEN        184   160   199   200   200   200   184
   202                    UserClass := IndexToClass^[UserIndex];                    81   195   201
   203                    ForallAttributes (UserClass, CompSNC1);                   52   202   197
   204                 END;                                                        182
   205              END;                                                           204
   206           END (* WHILE *) ;                                                 205
   207 
   208           ForallClasses (t, CompSNC2);                                      192   192     *
   209           IF Sets.IsEmpty (HasCycle)                                        201    59   194   190
   210           THEN INCL (GrammarClass, cSNC);                                   201     *   184    51
   211           ELSIF NOT IsElement (ORD ('L'), Options) THEN                       *   194   201     *    52   210
   212              ? SwitchedOnOptionL I ?                                          *   181
   213              Include (Options, ORD ('L'));                                   30   211   211
   214           END;                                                              206
   215 
   216           IF cSNC IN GrammarClass THEN                                      209   210   184   210   211
   217 
   218             WHILE NOT IsEmpty () DO         (* double closure non circular? *)    194   211   209   200
   219                ActClass := IndexToClass^[Dequeue ()];                       201   202   195
   220                Closure (ActClass^.Class.DNC);                               196   219   201     *
   221                ForallClasses (ActClass^.Class.Extensions, CompDNC1);        208   220   220     *     *
   222                ForallAttributes (ActClass, CompDNC1);                       203   221   221
   223             END;                                                            214
   224 
   225             ReleaseQueue;                                                    38
   226             Success := TRUE;                                                178   176
   227             ForallClasses (t, CompDNC2);                                    221   208     *
   228             IF Success                                                      216   226
   229             THEN INCL (GrammarClass, cDNC);                                 216   210   216    51
   230             ELSIF NOT IsElement (ORD ('L'), Options) THEN                   211   218   211   213   213   229
   231                ? SwitchedOnOptionL I ?                                      212   212
   232                Include (Options, ORD ('L'));                                213   230   230
   233             END;                                                            223
   234 
   235             IF cDNC IN GrammarClass THEN                                    228   229   216   229   230
   236                                                       (* compute partitions: numbers\
c     \  *)
   237               IF IsElement (ORD ('/'), Options) THEN                        235   230   232   232   235
   238                 ForallClasses (t, CompOAG0a);           (* as early as possible     \   227   227     *
c     \    *)
   239               ELSE                                                          180
   240                 ForallClasses (t, CompOAG0b);           (* as late as possible      \   238   238     *
c     \    *)
   241                 ForallClasses (t, CompOAG0c);                               240   240     *
   242                 ForallClasses (t, CompOAG0d);                               241   241     *
   243               END;                                                          233
   244               ForallClasses (t, CompOAG1);            (* compute partitions: depende\   242   242     *
c     \ncies *)
   245               Success := TRUE;                                              228   226
   246               ForallClasses (t, CompOAG2);            (* ordered ?                  \   244   244     *
c     \  *)
   247               IF Success                                                    237   245
   248               THEN INCL (GrammarClass, cOAG);                               237   229   235    51
   249               ELSIF NOT IsElement (ORD ('L'), Options) THEN                 230   230   237   237   237   248
   250                  ? SwitchedOnOptionL I ?                                    231   231
   251                  Include (Options, ORD ('L'));                              232   249   249
   252               END;                                                          243
   253 
   254               IF (cOAG IN GrammarClass) THEN                                247   248   235   248   249
   255                 IF NOT IsElement (ORD ('L'), Options) THEN                  254   249   249   251   251   254
   256                                                             (* visit sequences      \
c     \        *)
   257                   IF IsElement (ORD ('/'), Options) THEN                    255   255   255   255   255
   258                     ForallClasses (t, CompOAG3a);           (* as early as possible \   246   246     *
c     \        *)
   259                   ELSE                                                      239
   260                     ForallClasses (t, CompOAG3b);           (* as late as possible  \   258   258     *
c     \        *)
   261                   END;                                                      252
   262                (* Success := OptimizeVisits (t); *)       (* optimize sequences     \
c     \      *)
   263                   IF IsElement (ORD ('0'), Options) THEN                    257   257   257   257   257
   264                     ForallClasses (t, LifeTime1);                           260   260    55
   265                  (* MakeSet (Children, ClassCount);
c  266                     MakeSet (Parents , ClassCount);
c  267                     MakeSet (Relevant, ClassCount);
c  268                     ForallClasses (t, LifeTime4);
c  269                     ReleaseSet (Children);
c  270                     ReleaseSet (Parents );
c  271                     ReleaseSet (Relevant); *)
   272                     IF IsElement (ORD ('3'), Options) THEN                  263   263   263   263   263
   273                       WriteNl (StdOutput);                                   24    24
   274                       WriteS (StdOutput, "Attribute Storage Assignment"); WriteNl (S\    24   273   273
      \tdOutput);                                                                    *
   275                       WriteS (StdOutput, "----------------------------"); WriteNl (S\   274   274   274
      \tdOutput);                                                                    *
   276                       WriteNl (StdOutput);                                  275   275
   277                       ChildrenDyn     := 0;                                  56
   278                       ChildrenIn      := 0;                                  56
   279                       AttributeIn     := 0;                                  56
   280                       AttributeOut    := 0;                                  56
   281                       AttributeTree   := 0;                                  56
   282                       AttributeParam  := 0;                                  57
   283                       AttributeVar    := 0;                                  57
   284                       AttributeDemand := 0;                                  57
   285                       AttributeStack  := 0;                                  57
   286                     END;                                                    261
   287                     ForallClasses (t, LifeTime3);                           264   264    55
   288                     IF IsElement (ORD ('3'), Options) THEN                  272   272   272   272   272
   289                       WriteNl (StdOutput);                                  276   276
   290                       IF ChildrenIn > 0 THEN                                288   278   288
   291                          WriteS (StdOutput, "Children  Input          ");   275   289
   292                          WriteI (StdOutput, ChildrenIn, 3); WriteNl (StdOutput);         24   291   290   289     *
   293                       END;                                                  286
   294                       IF ChildrenDyn > 0 THEN                               290   277   290
   295                          WriteS (StdOutput, "Children  Dynamic        ");   291   292
   296                          WriteI (StdOutput, ChildrenDyn, 3); WriteNl (StdOutput);       292   295   294   292     *
   297                       END;                                                  293
   298                       IF AttributeIn > 0 THEN                               294   279   294
   299                          WriteS (StdOutput, "Attribute Input          ");   295   296
   300                          WriteI (StdOutput, AttributeIn, 3); WriteNl (StdOutput);       296   299   298   296     *
   301                       END;                                                  297
   302                       IF AttributeOut > 0 THEN                              298   280   298
   303                          WriteS (StdOutput, "Attribute Output ");           299   300
   304                          WriteI (StdOutput, AttributeOut, 3); WriteNl (StdOutput);      300   303   302   300     *
   305                       END;                                                  301
   306                       IF AttributeTree > 0 THEN                             302   281   302
   307                          WriteS (StdOutput, "Attribute Tree           ");   303   304
   308                          WriteI (StdOutput, AttributeTree, 3); WriteNl (StdOutput);     304   307   306   304     *
   309                       END;                                                  305
   310                       IF AttributeParam > 0 THEN                            306   282   306
   311                          WriteS (StdOutput, "Attribute Parameter      ");   307   308
   312                          WriteI (StdOutput, AttributeParam, 3); WriteNl (StdOutput);    308   311   310   308     *
   313                       END;                                                  309
   314                       IF AttributeVar > 0 THEN                              310   283   310
   315                          WriteS (StdOutput, "Attribute Variable       ");   311   312
   316                          WriteI (StdOutput, AttributeVar, 3); WriteNl (StdOutput);      312   315   314   312     *
   317                       END;                                                  313
   318                       IF AttributeDemand > 0 THEN                           314   284   314
   319                          WriteS (StdOutput, "Attribute Demand ");           315   316
   320                          WriteI (StdOutput, AttributeDemand   , 3); WriteNl (StdOutp\   316   319   318   316
      \ut);                                                                          *
   321                       END;                                                  317
   322                       IF AttributeStack > 0 THEN                            318   285   318
   323                          WriteS (StdOutput, "Attribute Stack  ");           319   320
   324                          WriteI (StdOutput, AttributeStack    , 3); WriteNl (StdOutp\   320   323   322   320
      \ut);                                                                          *
   325                       END;                                                  321
   326                     END (* IsElement (ORD ('3'), Options) *) ;              325
   327                   END (* IsElement (ORD ('0'), Options) *) ;                326
   328                 END (* NOT IsElement (ORD ('L'), Options) *) ;              327
   329 
   330                 Success := TRUE;                                            247   245
   331                 ForallClasses (t, CheckLAG);            (* LAG?                 *)      287   287     *
   332                 IF Success THEN INCL (GrammarClass, cLAG); END;             322   330   322   248   254    51   328
   333 
   334                 IF cLAG IN GrammarClass THEN                                332   332   254   332   332
   335 
   336                   Success := TRUE;                                          332   330
   337                   ForallClasses (t, CheckSAG);            (* SAG?                 *)    331   331     *
   338                   IF Success THEN INCL (GrammarClass, cSAG); END;           334   336   334   332   334    51   332
   339 
   340                   IF cSAG IN GrammarClass THEN                              338   338   334   338   338
   341                      ? GrammarIsSAG I ?                                       *   250
   342                   ELSE                                                      259
   343                      ? GrammarIsLAG I ?                                       *   341
   344                   END;                                                      338
   345                 ELSE                                                        342
   346                    ? GrammarIsOAG I ?                                         *   343
   347                 END (* IF cLAG IN GrammarClass *) ;                         344
   348               ELSE                                                          345
   349                 ? GrammarIsDNC I ?                                            *   346
   350               END  (* IF cOAG IN GrammerClass *) ;                          347
   351             ELSE                                                            348
   352               ? GrammarIsSNC I ?                                              *   349
   353             END (* IF cDNC IN GrammarClass *) ;                             350
   354           ELSE (* IF cSNC IN GrammarClass *)                                351
   355 
   356             ReleaseQueue;                           (* WAG?                 *)    225
   357             MakeQueue (ClassCount);                                         189   190
   358             MakeSet (Relevant, ClassCount);                                 190    68   357
   359             MakeSet (Cyclics, ClassCount);                                  358    69   358
   360             Sets.Assign (Cyclics, HasCycle);                                209    34   359   209
   361             WHILE NOT Sets.IsEmpty (Cyclics) DO                             218   255   360   218   360   218
   362                InitWAG (IndexToClass^[Extract (Cyclics)]);                    *   219    29   361
   363             END;                                                            353
   364             Reporting := FALSE;                                              77   161
   365             WHILE NOT Sets.IsEmpty (HasCycle) DO                            361   361   361   361   360   361
   366                CheckWAG0 (IndexToClass^[Extract (HasCycle)]);                 *   362   362   365
   367             END;                                                            363
   368             ReleaseSet (Cyclics);                                            28   362
   369 
   370             WHILE NOT IsEmpty () DO                                         365   365   365   365
   371                CheckWAG2 (IndexToClass^[Dequeue ()]);                         *   366   219
   372             END;                                                            367
   373 
   374             IF Sets.IsEmpty (HasCycle)                                      340   365   370   366
   375             THEN INCL (GrammarClass, cWAG);                                 340   338   340    51
   376                ? GrammarIsWAG I ?                                             *   352
   377             ELSE                                                            354
   378                Reporting := TRUE;                                           364   336
   379                WHILE NOT Sets.IsEmpty (HasCycle) DO                         370   370   374   374   374   370
   380                   CheckWAG2 (IndexToClass^[Extract (HasCycle)]);            371   371   366   379
   381                END;                                                         372
   382                ? GrammarIsNotWAG I ?                                          *   376
   383             END;                                                            381
   384             ReleaseSet (HasCycle);                                          368   380
   385             ReleaseQueue;                                                   356
   386 
   387           END (* IF cSNC IN GrammarClass *) ;                               383
   388         ELSE                                                                377
   389              ? GrammarIsNotWAG I ?                                          382   382
   390         END (* IF cLNC IN GrammarClass *) ;                                 387
   391 }; .
   392 
   393 
   394 PROCEDURE CompIndex (t: Tree)                                               170   186   337   170
   395 
   396 Class (..) :- {                                                             221
   397         INC (ClassCount);                                                     *   359
   398         Index := ClassCount;                                                  *   397
   399         MakeRelation (SNC, InstCount, InstCount);                            33   196   159     *
   400         Assign (SNC, DP);                                                   360   399     *
   401 }; .
   402 
   403 
   404 PROCEDURE CompIndexToClass (t: Tree)                                        394   191   394   394
   405 
   406 Class (..) :- {                                                             396
   407         IndexToClass^ [Index] := t;                                         380   398   404
   408         MakeSet (Users, ClassCount);                                        359   201   398
   409         Enqueue (Index);                                                     38   407
   410 }; .
   411 
   412 
   413 PROCEDURE CompUsers (t: Tree)                                               404   192   407   404
   414 
   415 Class (..) :- {                                                             406
   416         ActClass := t;                                                      222   413
   417         ForallAttributes (t, CompUsers);                                    222   416   413
   418 }; .
   419 Child (..) :- {                                                             110
   420         ChildsClass := Class;                                                82   415
   421         IF ChildsClass # NoTree THEN                                        374   420    41   375
   422            Include (ChildsClass^.Class.Users, ActClass^.Class.Index);       251   421   420   408   416     *   409
   423         END;                                                                390
   424 }; .
   425 
   426 
   427 PROCEDURE CompSNC1 (t: Tree)                                                413   203   417   413
   428 
   429 Class (..) :- {                                                             422
   430         FOR i := 1 TO AttrCount DO                                          199   160   200     *   379
   431            FOR j := 1 TO AttrCount DO                                       430   160   430   430   430
   432               IF IsRelated (i, j, ActClass^.Class.SNC) THEN                 421   160   430   431   422   429   400   421
   433                  IF NOT IsRelated (i, j, SNC) THEN                          432   379   432   432   432   432   432
   434                     Relations.Include (SNC, i, j);                           59   422   433   433   433
   435                     Enqueue (Index);                                        409   422
   436                  END;                                                       423
   437               END;                                                          436
   438            END;                                                             437
   439         END;                                                                438
   440 }; .
   441 Child (..) :-                                                               419
   442         Class # NoTree;                                                     432   421
   443         ChildsClass := Class;                                               422   442
   444         (ChildsClass = ActClass) OR Queue.IsElement (ChildsClass^.Class.Index);   443   432   149    59   288     *   443
                                                                                   435
   445 {       FOR i := 1 TO ChildsClass^.Class.AttrCount DO                       431   434   431   444   444   431   431
   446            FOR j := 1 TO ChildsClass^.Class.AttrCount DO                    445   434   445   445   445   445   445
   447               IF IsRelated (i, j, ChildsClass^.Class.SNC) THEN              433   433   445   446   446   446   434   433
   448                  IF NOT IsRelated                                           447   433   447
   449                           ( UserClass^.Class.AttrCount + InstOffset + i     203   447   446     *   447
   450                           , UserClass^.Class.AttrCount + InstOffset + j     449   449   449   449   447
   451                           , UserClass^.Class.SNC )                          450   450   447
   452                  THEN                                                       447
   453                     Relations.Include                                       434   434
   454                       ( UserClass^.Class.SNC                                451   451   451
   455                       , UserClass^.Class.AttrCount + InstOffset + i         454   454   450   450   449
   456                       , UserClass^.Class.AttrCount + InstOffset + j         455   455   455   455   450
   457                       ) ;
   458                     Enqueue (UserClass^.Class.Index);                       435   456   456   444
   459                  END;                                                       439
   460               END;                                                          459
   461            END;                                                             460
   462         END;                                                                461
   463 }; .
   464 
   465 
   466 PROCEDURE CompSNC2 (t: Tree)                                                427   208   427   427
   467 
   468 Class (..) :- {                                                             458
   469         IF HasReflexive (SNC) THEN                                          448    34   454   452
   470            IF NOT IsElement (ORD ('L'), Options) THEN                       469   448   444   288   288   469
   471                 ? CycleInSNC W Ident Name ?                                   *     *     *     *
   472                 WriteS (StdOutput, "Attribute Dependencies SNC");           323   324
   473                 WriteNl (StdOutput); WriteNl (StdOutput);                   324   472     *     *
   474                 WriteDependencies (t, SNC, MaxSet);                          49   466   469    50
   475                 WriteS (StdOutput, "Cyclic Attributes");                    472   473
   476                 WriteNl (StdOutput); WriteNl (StdOutput);                   473   475     *     *
   477                 MakeSet (Cyclics, InstCount);                               408   368   399
   478                 GetCyclics (SNC, Cyclics);                                   35   474   477
   479                 WriteCyclics (t, Cyclics); WriteNl (StdOutput);              49   474   478   476   476
   480                 ReleaseSet (Cyclics);                                       384   479
   481            END;                                                             462
   482            Include (HasCycle, Index);                                       453   384   458
   483         END;                                                                481
   484         IF IsElement (ORD ('S'), Options) THEN                              470   470   470   470   470
   485           WriteDependencies (t, SNC, MaxSet);                               474   479   478   474
   486         END;                                                                483
   487         MakeRelation (DNC, InstCount, InstCount);                           399   220   477     *
   488         Assign (DNC, SNC);                                                  400   487   485
   489         Enqueue (Index);                                                    458   482
   490 }; .
   491 
   492 
   493 PROCEDURE CompDNC1 (t: Tree)                                                466   222   485   466
   494 
   495 Class (..) :- {                                                             468
   496         FOR i := 1 TO ActClass^.Class.AttrCount DO                          446   455   446   444   495   456   446
   497            FOR j := 1 TO ActClass^.Class.AttrCount DO                       496   456   496   496   496   496   496
   498               IF IsRelated (i, j, ActClass^.Class.DNC) THEN                 484   448   496   497   497   497   488   484
   499                  IF NOT IsRelated (i, j, DNC) THEN                          498   470   498   498   498   498   498
   500                     Relations.Include (DNC, i, j);                          453   482   499   499   499
   501                     Enqueue (Index);                                        489   489
   502                  END;                                                       486
   503               END;                                                          502
   504            END;                                                             503
   505         END;                                                                504
   506 }; .
   507 Child (..) :-                                                               441
   508         Class # NoTree;                                                     498   442
   509         ChildsClass := Class;                                               447   508
   510 {       FOR i := 1 TO ChildsClass^.Class.AttrCount DO                       497   500   497   509   509   497   497
   511            FOR j := 1 TO ChildsClass^.Class.AttrCount DO                    510   500   510   510   510   510   510
   512               IF IsRelated                                                  499   499
   513                    ( ActClass^.Class.AttrCount + InstOffset + i             498   511   511   456   510
   514                    , ActClass^.Class.AttrCount + InstOffset + j             513   513   513   513   511
   515                    , ActClass^.Class.DNC                                    514   514   500
   516                    ) 
   517               THEN                                                          499
   518                  IF NOT IsRelated (i, j, ChildsClass^.Class.DNC) THEN       512   499   512   513   514   511   515   515
                                                                                   517
   519                     Relations.Include (ChildsClass^.Class.DNC, i, j);       500   500   518   518   518   518   518
   520                     Enqueue (ChildsClass^.Class.Index);                     501   519   519   501
   521                  END;                                                       505
   522               END;                                                          521
   523            END;                                                             522
   524         END;                                                                523
   525 }; .
   526 
   527 
   528 PROCEDURE CompDNC2 (t: Tree)                                                493   227   493   493
   529 
   530 Class (..) :- {                                                             520
   531         IF HasReflexive (DNC) THEN                                          518   469   519   518
   532            IF NOT IsElement (ORD ('L'), Options) THEN                       531   518   484   484   484   531
   533                 ? CycleInDNC W Ident Name ?                                   *   471   471   471
   534                 WriteS (StdOutput, "Attribute Dependencies DNC");           475   479
   535                 WriteNl (StdOutput); WriteNl (StdOutput);                   479   534     *     *
   536                 WriteDependencies (t, DNC, MaxSet);                         485   528   531   485
   537                 WriteS (StdOutput, "Cyclic Attributes");                    534   535
   538                 WriteNl (StdOutput); WriteNl (StdOutput);                   535   537     *     *
   539                 MakeSet (Cyclics, InstCount);                               477   480   487
   540                 GetCyclics (DNC, Cyclics);                                  478   536   539
   541                 WriteCyclics (t, Cyclics); WriteNl (StdOutput);             479   536   540   538   538
   542                 ReleaseSet (Cyclics);                                       480   541
   543            END;                                                             524
   544            Success := FALSE;                                                338   364
   545         END;                                                                543
   546         IF IsElement (ORD ('N'), Options) THEN                              532   532   532   532   532
   547           WriteDependencies (t, DNC, MaxSet);                               536   541   540   536
   548         END;                                                                545
   549         MakeRelation (OAG, InstCount, InstCount);                           487   160   539     *
   550         Assign (OAG, DNC);                                                  488   549   547
   551 }; .
   552 
   553 
   554 PROCEDURE CompOAG0a (t: Tree)                                               528   238   547   528
   555 
   556 Class (..) :- {                                                             530
   557         ActClass := t;                                                      515   554
   558         IF BaseClass^.Kind = Tree.Class THEN                                546   197    75   554   556   546
   559            n := BaseClass^.Class.AttrCount;     (* compute partition for    118   558   558   514
c  560                                                 additional attributes only *)
   561         ELSE                                                                388
   562            n := 0;                                                          559
   563         END;                                                                548
   564         k := 0;                                                              76
   565 
   566         REPEAT                                                                *
   567            INC (k);                                                         397   564
   568            REPEAT                                                           566
   569               Stable := TRUE;                                                79   378
   570               Kind := Inherited;                                            558   150
   571               ForallAttributes (Attributes, CompOAG0a);                     417     *   554
   572            UNTIL Stable;                                                      *   569
   573            REPEAT                                                           568
   574               Stable := TRUE;                                               572   569
   575               Kind := Synthesized;                                          570   149
   576               ForallAttributes (Attributes, CompOAG0a);                     571   571   571
   577            UNTIL Stable;                                                    572   574
   578         UNTIL n = AttrCount;                                                577   562   559
   579 
   580         IF (BaseClass^.Kind = Tree.Class)                                   558   559   575   558   559
   581            AND (BaseClass^.Class.Visits > k)                                160   580   580   120   567
   582         THEN                                                                558
   583            k := BaseClass^.Class.Visits;                                    581   581   581   581
   584         END;                                                                563
   585         Visits := k;                                                        583   583
   586         IF MaxVisit < k THEN MaxVisit := k; END;                            580    50   585   582     *     *   584
   587 }; .
   588 Child (..) :- {                                                             507
   589         IF Partition = 9999 THEN                                            586   110   586
   590            IF (Input IN Properties) OR                                      589    43   340   152   444
   591               ((Properties * {Inherited, Synthesized}) = {}) THEN           590   570   575   589
   592               Partition := 0; INC (n); RETURN;                              589   567   578   165
   593            END;                                                             586
   594            IF Kind IN Properties THEN                                       590   580   590   591   591
   595               FOR i := 1 TO ActClass^.Class.AttrCount DO                    511   519   511   557   583   578   511
   596                  IF IsRelated (AttrIndex, i, ActClass^.Class.OAG)           594   518     *   595   595   595   550
   597                     AND ( ActClass^.Class.Instance^[i].Attribute^.Child.Partition > \   581   596   596   152   596   110
                                                                                   588   592
      \k )                                                                         586
   598                  THEN                                                       594
   599                     RETURN;                                                 592
   600                  END;                                                       593
   601               END;                                                          600
   602               Partition := k; INC (n); Stable := FALSE;                     597   597   592   592   577   544
   603            END;                                                             601
   604         END;                                                                603
   605 }; .
   606 Attribute (..) :- {                                                         597
   607         IF Partition = 9999 THEN                                            596   602   598
   608            IF (Input IN Properties) OR                                      607   590   594   594   590
   609               ((Properties * {Inherited, Synthesized}) = {})                608   591   591
   610            THEN                                                             607
   611               Partition := 0;                                               607
   612               INC (n);                                                      602   602
   613               RETURN;                                                       599
   614            END;                                                             604
   615            IF Kind IN Properties THEN                                       608   594   608   609   610
   616               FOR i := 1 TO ActClass^.Class.AttrCount DO                    595   597   595   597   597   595   595
   617                  IF IsRelated (AttrIndex, i, ActClass^.Class.OAG)           615   596   596   616   616   616   596
   618                     AND ( ActClass^.Class.Instance^[i].Attribute            597   617   617   597   617   606
   619                           ^.Attribute.Partition > k                         618   611   602
   620                         ) 
   621                  THEN                                                       615
   622                     RETURN;                                                 613
   623                  END;                                                       614
   624               END;                                                          623
   625               Partition := k; INC (n); Stable := FALSE;                     619   619   612   612   602   602
   626            END;                                                             624
   627         END;                                                                626
   628 }; .
   629 
   630 
   631 PROCEDURE CompOAG0b (t: Tree)                                               554   240   557   580
   632 
   633 Class (..) :- {                                                             618
   634         ActClass := t;                                                      618   631
   635         IF BaseClass^.Kind = Tree.Class THEN                                617   583   615   631   633   621
   636            n := BaseClass^.Class.AttrCount;     (* compute partition for    625   635   635   616
c  637                                                 additional attributes only *)
   638         ELSE                                                                561
   639            n := 0;                                                          636
   640         END;                                                                627
   641         k := 0;                                                             625
   642 
   643         REPEAT                                                              573
   644            INC (k);                                                         625   641
   645            REPEAT                                                           643
   646               Kind := Synthesized;                                          635   609
   647               Stable := TRUE;                                               625   574
   648               ForallAttributes (Attributes, CompOAG0b);                     576   576   631
   649            UNTIL Stable;                                                    578   647
   650            REPEAT                                                           645
   651               Stable := TRUE;                                               649   647
   652               Kind := Inherited;                                            646   609
   653               ForallAttributes (Attributes, CompOAG0b);                     648   648   648
   654            UNTIL Stable;                                                    649   651
   655         UNTIL n = AttrCount;                                                654   639   636
   656 
   657         IF (BaseClass^.Kind = Tree.Class)                                   635   636   652   635   636
   658            AND (BaseClass^.Class.Visits > k) THEN                           618   657   657   585   644   635
   659            k := BaseClass^.Class.Visits;                                    658   658   658   658
   660         END;                                                                640
   661         Visits := k;                                                        659   659
   662         IF MaxVisit < k THEN MaxVisit := k; END;                            657   586   661   658     *     *   660
   663 }; .
   664 Child (..) :- {                                                             597
   665         IF Partition = 9999 THEN                                            662   625   662
   666            IF (Input IN Properties) OR                                      665   608   615   615   608
   667               ((Properties * {Inherited, Synthesized}) = {})                666   652   646
   668            THEN                                                             665
   669               Partition := 0;                                               665
   670               INC (n);                                                      644   655
   671               RETURN;                                                       622
   672            END;                                                             662
   673            IF Kind IN Properties THEN                                       666   657   666   667   668
   674               FOR i := 1 TO ActClass^.Class.AttrCount DO                    616   618   616   634   659   655   616
   675                  IF IsRelated (i, AttrIndex, ActClass^.Class.OAG)           673   617   674   617   674   674   617
   676                     AND  ( ActClass^.Class.Instance^[i].Attribute           658   675   675   618   675   619
   677                            ^.Child.Partition                                664   669
   678                            > k                                              662
   679                          ) 
   680                  THEN                                                       673
   681                     RETURN;                                                 671
   682                  END;                                                       672
   683               END;                                                          682
   684               Partition := k;                                               677   678
   685               INC (n);                                                      670   670
   686               Stable := FALSE;                                              654   625
   687            END;                                                             683
   688         END;                                                                687
   689 }; .
   690 Attribute (..) :- {                                                         676
   691         IF Partition = 9999 THEN                                            675   684   680
   692            IF (Input IN Properties) OR                                      691   666   673   673   666
   693               ((Properties * {Inherited, Synthesized}) = {})                692   667   667
   694            THEN                                                             691
   695               Partition := 0;                                               691
   696               INC (n);                                                      685   685
   697               RETURN;                                                       681
   698            END;                                                             688
   699            IF Kind IN Properties THEN                                       692   673   692   693   694
   700               FOR i := 1 TO ActClass^.Class.AttrCount DO                    674   676   674   676   676   674   674
   701                  IF IsRelated (i, AttrIndex, ActClass^.Class.OAG) AND       699   675   700   675   700   700   675   676
   702                     (ActClass^.Class.Instance^[i].Attribute                 701   701   676   701   690
   703                      ^.Attribute.Partition > k) THEN                        702   695   684   699
   704                     RETURN;                                                 697
   705                  END;                                                       698
   706               END;                                                          705
   707               Partition := k; INC (n); Stable := FALSE;                     703   703   696   696   686   686
   708            END;                                                             706
   709         END;                                                                708
   710 }; .
   711 
   712 
   713 PROCEDURE CompOAG0c (t: Tree)                                               631   241   634   657
   714 
   715 Class (..) :- {                                                             702
   716         k := Visits + 1;                                                    707   661
   717         ForallAttributes (Attributes, CompOAG0c);                           653   653   713
   718 }; .
   719 Child (..) :- {                                                             677
   720         IF Partition # 0 THEN Partition := k - Partition; END;              701   707   703     *   716     *   709
   721 }; .
   722 Attribute (..) :- {                                                         703
   723         IF Partition # 0 THEN Partition := k - Partition; END;              720   720   720     *   720     *   720
   724 }; .
   725 
   726 
   727 PROCEDURE CompOAG0d (t: Tree)                                               713   242   713   713
   728 
   729 Class (..) :- {                                                             715
   730         ActClass := t;                                                      702   727
   731         k := 0;                                                             723
   732         REPEAT                                                              650
   733            INC (k);                                                         707   731
   734            REPEAT                                                           732
   735               Stable := TRUE;                                               707   651
   736               ForallAttributes (Attributes, CompOAG0d);                     717   717   727
   737            UNTIL Stable;                                                    655   735
   738            REPEAT                                                           734
   739               Stable := TRUE;                                               737   735
   740               ForallAttributes (Attributes, CompOAG0e);                     736   736     *
   741            UNTIL Stable;                                                    737   739
   742         UNTIL k = Visits;                                                   741   733   716
   743 }; .
   744 Child (..) :- {                                                             719
   745         IF (Partition > k) AND (Synthesized IN Properties) AND              723   723   742   701   693   699   699     *
   746            ((({Output, Test} * Properties) # {}) OR (({Read, Dummy} * Properties) = \    43    45   745   692    42    48
                                                                                     *
      \{})) THEN                                                                   723
   747            FOR i := 1 TO ActClass^.Class.AttrCount DO                       700   702   700   730   729   700   700
   748               IF IsRelated (AttrIndex, i, ActClass^.Class.OAG) AND          745   701   701   747   747   747   701   745
   749                  (ActClass^.Class.Instance^[i].Attribute                    748   748   702   748   722
   750                   ^.Child.Partition > k) THEN                               744   745   745   746
   751                  RETURN;                                                    704
   752               END;                                                          723
   753            END;                                                             752
   754 # ifdef Debug                                                                 *     *
   755 WriteS (StdOutput, "CHG "); WriteIdent (StdOutput, ActClass^.Class.Name);   537   541    25     *   749   749   533
   756 WriteS (StdOutput, "    "); WriteName (ActClass^.Class.Instance^[AttrIndex]);     755   755    48   755   755   749   748
   757 WriteI (StdOutput, Partition, 5); WriteI (StdOutput, k, 5); WriteNl (StdOutput);        324   756   750     *     *   750
                                                                                   541     *
   758 # endif                                                                       *
   759            Partition := k; Stable := FALSE;                                 757   757   741   707
   760         END;                                                                753
   761 }; .
   762 Attribute (..) :- {                                                         749
   763         IF (Partition > k) AND (Synthesized IN Properties) AND              748   759   759   748   745   745   746     *
   764            ((({Output, Test} * Properties) # {})                            746   746   763
   765            OR (({Read, Dummy} * Properties) = {})) THEN                     746   746   746   764   750
   766            FOR i := 1 TO ActClass^.Class.AttrCount DO                       747   749   747   756   756   747   747
   767               IF IsRelated (AttrIndex, i, ActClass^.Class.OAG) AND          763   748   756   766   766   766   748   763
   768                  (ActClass^.Class.Instance^[i].Attribute                    767   767   756   767   762
   769                   ^.Attribute.Partition > k) THEN                           768   763   763   765
   770                  RETURN;                                                    751
   771               END;                                                          760
   772            END;                                                             771
   773 # ifdef Debug                                                               754   754
   774 WriteS (StdOutput, "CHG "); WriteIdent (StdOutput, ActClass^.Class.Name);   756   757   755     *   768   768   755
   775 WriteS (StdOutput, "    "); WriteName (ActClass^.Class.Instance^[AttrIndex]);     774   774   756   774   774   768   767
   776 WriteI (StdOutput, Partition, 5); WriteI (StdOutput, k, 5); WriteNl (StdOutput);        757   775   769     *     *   769
                                                                                   757     *
   777 # endif                                                                     758
   778            Partition := k; Stable := FALSE;                                 776   776   759   759
   779         END;                                                                772
   780 }; .
   781 
   782 
   783 PROCEDURE CompOAG0e (t: Tree)                                               727   740   730   727
   784 
   785 Child (..) :- {                                                             750
   786         IF (Partition > k) AND (Inherited IN Properties) AND                767   778   778   767   693   763   765     *
   787            ((({Output, Test} * Properties) # {})                            764   764   786
   788            OR (({Read, Dummy} * Properties) = {})) THEN                     765   765   765   787   769
   789            FOR i := 1 TO ActClass^.Class.AttrCount DO                       766   768   766   775   775   766   766
   790               WITH ActClass^.Class.Instance^[i] DO                          148   789   789   775   789   789
   791                  IF IsRelated (AttrIndex, i, ActClass^.Class.OAG) AND       786   767   775   790   790   790   767   786
   792                    ((Inherited IN Properties)                               786   786   788
   793                    AND (Attribute^.Child.Partition > k)                     791   769   785   786   786
   794                    OR                                                       788
   795                     (Synthesized IN Properties)                             763   792   792
   796                      AND (Attribute^.Child.Partition >= k)) THEN            793   793   793   793   793   788
   797                     RETURN;                                                 770
   798                  END;                                                       779
   799               END;                                                          798
   800            END;                                                             799
   801 # ifdef Debug                                                               773   773
   802 WriteS (StdOutput, "CHG "); WriteIdent (StdOutput, ActClass^.Class.Name);   775   776   774     *   791   791   774
   803 WriteS (StdOutput, "    "); WriteName (ActClass^.Class.Instance^[AttrIndex]);     802   802   775   802   802   790   791
   804 WriteI (StdOutput, Partition, 5); WriteI (StdOutput, k, 5); WriteNl (StdOutput);        776   803   796     *     *   796
                                                                                   776     *
   805 # endif                                                                     777
   806            Partition := k; Stable := FALSE;                                 804   804   778   778
   807         END;                                                                800
   808 }; .
   809 Attribute (..) :- {                                                         796
   810         IF (Partition > k) AND (Inherited IN Properties) AND                791   806   806   796   792   795   795     *
   811            ((({Output, Test} * Properties) # {})                            787   787   810
   812            OR (({Read, Dummy} * Properties) = {})) THEN                     794   788   788   811   796
   813            FOR i := 1 TO ActClass^.Class.AttrCount DO                       789   791   789   803   803   789   790
   814               WITH ActClass^.Class.Instance^[i] DO                          790   813   813   803   813   813
   815                  IF IsRelated (AttrIndex, i, ActClass^.Class.OAG) AND       810   791   803   814   814   814   791   810
   816                    ((Inherited IN Properties) AND (Attribute^.Attribute.Partition > \   810   810   812   815   809     *
                                                                                   810
      \k) OR                                                                       810   812
   817                     (Synthesized IN Properties) AND (Attribute^.Attribute.Partition \   795   816   816   816   816     *
                                                                                   816
      \>= k)) THEN                                                                 816   812
   818                     RETURN;                                                 797
   819                  END;                                                       807
   820               END;                                                          819
   821            END;                                                             820
   822 # ifdef Debug                                                               801   801
   823 WriteS (StdOutput, "CHG "); WriteIdent (StdOutput, ActClass^.Class.Name);   803   804   802     *   815   815   802
   824 WriteS (StdOutput, "    "); WriteName (ActClass^.Class.Instance^[AttrIndex]);     823   823   803   823   823   814   815
   825 WriteI (StdOutput, Partition, 5); WriteI (StdOutput, k, 5); WriteNl (StdOutput);        804   824   817     *     *   817
                                                                                   804     *
   826 # endif                                                                     805
   827            Partition := k; Stable := FALSE;                                 825   825   806   806
   828         END;                                                                821
   829 }; .
   830 
   831 
   832 PROCEDURE CompOAG1 (t: Tree)                                                783   244   783   783
   833 
   834 Class (..) :- {                                                             824
   835         FOR i := 1 TO AttrCount DO                                          813   815   813   813   814
   836            WITH Instance^[i] DO                                             814   824   835   835
   837               IF Synthesized IN Properties THEN                             815   817   817   817   817
   838                  FOR j := 1 TO AttrCount DO                                 835   519   835   835   836
   839                     IF (Inherited IN Instance^[j].Properties) AND           837   816   837   836   838   837   817
   840                        (Attribute^.Child.Partition                          817   796   827
   841                         = Instance^[j].Attribute^.Child.Partition) THEN     839   839   840   840   840   837
   842                        Relations.Include (OAG, i, j);                       519   519   815   836   841
   843                     END;                                                    828
   844                  END;                                                       843
   845               END;                                                          844
   846            END;                                                             845
   847         END;                                                                846
   848 
   849         FOR i := 1 TO AttrCount DO                                          838   842   838   838   838
   850            WITH Instance^[i] DO                                             836   841   849   849
   851               IF (Inherited IN Properties) AND (Attribute^.Child.Partition >= 2) THE\   839   839   839   839   839   841
                                                                                   841   841
      \N                                                                           841
   852                  FOR j := 1 TO AttrCount DO                                 849   842   849   849   850
   853                     IF (Synthesized IN Instance^[j].Properties) AND         851   837   851   850   852   851   851
   854                        (Attribute^.Child.Partition - 1                      851   851   851
   855                         = Instance^[j].Attribute^.Child.Partition) THEN     853   853   854   854   854   851
   856                        Relations.Include (OAG, i, j);                       842   842   842   850   855
   857                     END;                                                    847
   858                  END;                                                       857
   859               END;                                                          858
   860            END;                                                             859
   861         END;                                                                860
   862 
   863       IF IsElement (ORD ('C'), Options) THEN                                853   546   546   546   855
   864         MakeRelation (Part, InstCount, InstCount);                          549     *   549     *
   865         Assign (Part, OAG);                                                 550   864   856
   866         Difference (Part, DNC);                                              34   865   550
   867         WriteDependencies (t, Part, MaxSet); WriteNl (StdOutput);           547   832   866   547   825   825
   868         ReleaseRelation (Part);                                              33   867
   869       END;                                                                  861
   870 }; .
   871 
   872 
   873 PROCEDURE CompOAG2 (t: Tree)                                                832   246   867   832
   874 
   875 Class (..) :- {                                                             834
   876         ActClass := t;                                                      824   873
   877         ForallAttributes (t, CompOAG2);                                     740   876   873
   878         IF IsCyclic (OAG) THEN                                              863    35   865   863
   879            IF NOT IsElement (ORD ('L'), Options) THEN                       878   532   863   863   863   878
   880                 ? CycleInOAG W Ident Name ?                                   *   533   533   823
   881                 WriteS                                                      824
   882                   (StdOutput                                                867
   883                   , "Cyclic Attributes and Artificially Introduced Dependencies");
   884                 WriteNl (StdOutput); WriteNl (StdOutput);                   867   882     *     *
   885                 MakeRelation (Part, InstCount, InstCount);                  864   868   864     *
   886                 MakeSet (Cyclics, InstCount);                               539   542   885
   887                 GetCyclics (OAG, Cyclics);                                  540   878   886
   888                 Assign (Part, OAG);                                         865   885   887
   889                 Difference (Part, DNC);                                     866   888   866
   890                 WriteDependencies (t, Part, Cyclics);                       867   877   889   887
   891                 ReleaseRelation (Part);                                     868   890
   892                 ReleaseSet (Cyclics);                                       542   890
   893            END;                                                             869
   894            Success := FALSE;                                                544   827
   895         END;                                                                893
   896         IF IsElement (ORD ('O'), Options) THEN                              879   879   879   879   879
   897           WriteDependencies (t, OAG, MaxSet);                               890   890   888   867
   898         END;                                                                895
   899 }; .
   900 Child (..) :-                                                               855
   901         Class # NoTree;                                                     875   508
   902         ChildsClass := Class;                                               520   901
   903 {       FOR i := 1 TO ChildsClass^.Class.AttrCount DO                       852   856   852   902   902   852   852
   904            FOR j := 1 TO ChildsClass^.Class.AttrCount DO                    903   856   903   903   903   903   903
   905               IF IsRelated (i, j, ChildsClass^.Class.OAG) THEN              896   815   903   904   904   904   897   896
   906                  Relations.Include                                          856   856
   907                    ( ActClass^.Class.OAG                                    876   905   905
   908                    , ActClass^.Class.AttrCount + InstOffset + i             907   907   904   514   905
   909                    , ActClass^.Class.AttrCount + InstOffset + j);           908   908   908   908   905
   910               END;                                                          898
   911            END;                                                             910
   912         END;                                                                911
   913 }; .
   914 
   915 
   916 (*
c  917 PROCEDURE CompOAG3 (t: Tree)
c  918 
c  919 Class (..) :- {
c  920         n := 0;                                 (* strategy: as early as possible *)
   921         MakeSet (IsComputed, InstCount);                                    886   160   886
   922         REPEAT                                                              738
   923            i := InstCount;                                                  908   921
   924            LOOP                                                             107
   925               WITH Instance^ [i] DO                                         850   855   923   904
   926                  IF NOT IsElement (i, IsComputed) AND IsComputable3a (i, t) THEN        905   879   896   925   921   853
                                                                                   143     *   897   905
   927                     INC (n);                                                733   707
   928                     Instance^[n].Order := i;                                925   927   173   926
   929                     Include (IsComputed, i);                                906   926   928
   930                     INCL (Properties, First);                               375   853   152
   931                     Visit := Attribute^.Child.Partition;                     76   855   900   855
   932                     IF {Inherited, Left} <= Properties THEN                 926   851   150   930   926
   933                        FOR i2 := 1 TO AttrCount DO      (* complete visit parent *)     904    76   904   909   925
   934                           WITH Instance^ [i2] DO                            925   928   933   933
   935                              IF NOT IsElement (i2, IsComputed) AND          932   926   926   934   929   926
   936                                 (Inherited IN Properties) AND               932   853   932   935
   937                                 (Attribute^.Child.Partition = Visit) THEN   931   931   931   931   932
   938                                 INC (n);                                    927   928
   939                                 Instance^[n].Order := i2;                   934   938   928   935
   940                                 Include (IsComputed, i2);                   929   935   939
   941                              END;                                           912
   942                           END;                                              941
   943                        END;                                                 942
   944                     ELSIF {Synthesized, Right} <= Properties THEN           249   853   149   936   937
   945                        IF Selector # NoTree THEN        (* complete visit child *)      935     *   901   944
   946                           ChildsClass := Selector^.Child.Class;             905   945   937   909
   947                           FOR i2 := AttrCount + Selector^.Child.InstOffset + 1 TO       933   940   933   946   946   909
                                                                                   933
   948                              AttrCount + Selector^.Child.InstOffset         947   947   947   947
   949                              + ChildsClass^.Class.AttrCount DO              946   946   948   934
   950                              WITH Instance^ [i2] DO                         934   939   947   949
   951                                 IF NOT IsElement (i2, IsComputed) AND       945   935   935   950   940   936
   952                                    (Synthesized IN Properties) AND          944   936   944   951
   953                                    (Attribute^.Child.Partition = Visit) THEN      937   948   937   937   945
   954                                    INC (n);                                 938   939
   955                                    Instance^[n].Order := i2;                950   954   939   951
   956                                    Include (IsComputed, i2);                940   951   955
   957                                 END;                                        943
   958                              END;                                           957
   959                           END;                                              958
   960                        END;                                                 959
   961                     ELSE                                                    638
   962                        FOR i2 := 1 TO InstCount DO      (* add group members *) (* o\   947   956   947   923   950
c     \ptimize! *)
   963                           IF NOT IsElement (i2, IsComputed) AND             951   951   951   962   956   952
   964                              (Instance^[i2].Action = Action) THEN           955   963     *     *   953
   965                              INC (n);                                       954   955
   966                              Instance^[n].Order := i2;                      964   965   955   964
   967                              Include (IsComputed, i2);                      956   963   966
   968                           END;                                              960
   969                        END;                                                 968
   970                     END;                                                    969
   971                     EXIT;                                                   118
   972                  END;                                                       970
   973               END;                                                          972
   974               DEC (i);                                                      120   929
   975            END;                                                             973
   976         UNTIL n = InstCount;                                                742   966   962
   977         ReleaseSet (IsComputed);                                            892   967
   978 
   979       IF IsElement (ORD ('G'), Options) THEN WriteOrderDecl (t); END;       963   963   896   896   964    13   926   975
   980       IF IsElement (ORD ('E'), Options) THEN WriteOrderEval (t); END;       979   979   979   979   979    13   979   979
   981       IF IsElement (ORD ('V'), Options) THEN WriteVisitSequence (t); END;   980   980   980   980   980    13   980   980
   982 }; .
   983 
   984 *)
   985 
   986 PROCEDURE CompOAG3a (t: Tree)                                               873   258   981   873
   987 
   988 Class (..) :- {                                                             949
   989 # ifdef Debug                                                               822   822
   990 WriteNl (StdOutput); WriteIdent (StdOutput, Name); WriteNl (StdOutput);     884   884   823     *   880     *     *
   991 # endif                                                                     826
   992         n := 0;                                 (* strategy: as early as possible *)    976
   993         MakeSet (IsComputed, InstCount);                                    921   977   976
   994         MakeSet (IsComputable, InstCount);                                  993    71   993
   995         FOR i := 1 TO InstCount DO                                          962   974   962   994   962
   996            IF IsComputable3a (i, t) THEN Include (IsComputable, i);         981   926   995   986   981   967   994     *
   997 # ifdef Debug                                                               989   989
   998 WriteS (StdOutput, "INIT        "); WriteName (Instance^[i]); WriteNl (StdOutput);      881   990   824   966   996   990
                                                                                     *
   999 # endif                                                                     991
  1000            END;                                                             981
  1001         END;                                                               1000
  1002 
  1003         WHILE NOT Sets.IsEmpty (IsComputable) DO                            379   963   379   379   996   995
  1004            i2 := Minimum (IsComputable);                                    967   199  1003
  1005            j  := Maximum (IsComputable);                                    909   200  1004
  1006            LOOP                                                             924
  1007               IF IsElement (i2, IsComputable) THEN                          996   981  1004  1005   996
  1008                  i := i2;                                                   998  1007
  1009                  IF NOT ({Inherited, Left} <= Instance^[i2].Properties) THEN EXIT; E\  1007  1003   936   932   998  1008
                                                                                   952  1007   971
      \ND;                                                                        1001
  1010               END;                                                         1009
  1011               INC (i2);                                                     965  1009
  1012               IF i2 > j THEN EXIT; END;                                    1009  1011  1005  1009  1009  1010
  1013            END;                                                            1012
  1014 
  1015            WITH Instance^ [i] DO                                            950  1009  1008  1003
  1016               INC (n);                                                     1011   992
  1017               Instance^[n].Order := i;                                     1015  1016   966  1015
  1018               Include (IsComputed, i);                                      996   993  1017
  1019               Exclude (IsComputable, i);                                     30  1007  1018
  1020 # ifdef Debug                                                               997   997
  1021 WriteS (StdOutput, "SET "); WriteName (Instance^[i]); WriteI (StdOutput, n, 5); Writ\   998   998   998  1017  1019   825
                                                                                     *  1017
      \eNl (StdOutput);                                                            998     *
  1022 # endif                                                                     999
  1023               INCL (Properties, First);                                     930  1009   930
  1024               Visit := Attribute^.Child.Partition;                          953   953   953   953
  1025               IF {Inherited, Left} <= Properties THEN                      1012  1009  1009  1023  1012
  1026                  FOR i2 := 1 TO AttrCount DO    (* complete visit parent *)       995  1012   995   949  1015
  1027                     WITH Instance^ [i2] DO                                 1015  1021  1026  1026
  1028                        IF NOT IsElement (i2, IsComputed) AND               1025  1009  1007  1027  1018   963
  1029                           (Inherited IN Properties) AND                    1025   952  1025  1028
  1030                           (Attribute^.Child.Partition = Visit) THEN        1024  1024  1024  1024  1025
  1031                           INC (n);                                         1016  1021
  1032                           Instance^[n].Order := i2;                        1027  1031  1017  1028
  1033                           Include (IsComputed, i2);                        1018  1028  1032
  1034                           Exclude (IsComputable, i2);                      1019  1019  1033
  1035 # ifdef Debug                                                              1020  1020
  1036 WriteS (StdOutput, "SETp        "); WriteName (Instance^[i2]); WriteI (StdOutput, n,\  1021  1021  1021  1032  1034  1021
                                                                                     *  1032
      \ 5); WriteNl (StdOutput);                                                  1021     *
  1037 # endif                                                                    1022
  1038                        END;                                                1013
  1039                     END;                                                   1038
  1040                  END;                                                      1039
  1041               ELSIF {Synthesized, Right} <= Properties THEN                 944   952   944  1029  1030
  1042                  IF Selector # NoTree THEN      (* complete visit child *)       1028   948   945  1041
  1043                     ChildsClass := Selector^.Child.Class;                   949  1042  1030   988
  1044                     FOR i2 := AttrCount + Selector^.Child.InstOffset + 1 TO      1026  1036  1026  1043  1043   948  1026
  1045                        AttrCount + Selector^.Child.InstOffset + ChildsClass^.Class.A\  1044  1044  1044  1044  1043  1043
      \ttrCount DO                                                                   *  1027
  1046                        WITH Instance^ [i2] DO                              1027  1036  1044  1045
  1047                           IF NOT IsElement (i2, IsComputed) AND            1042  1028  1028  1046  1033  1029
  1048                              (Synthesized IN Properties) AND               1041  1029  1041  1047
  1049                              (Attribute^.Child.Partition = Visit) THEN     1030  1045  1030  1030  1042
  1050                              INC (n);                                      1031  1036
  1051                              Instance^[n].Order := i2;                     1046  1050  1032  1047
  1052                              Include (IsComputed, i2);                     1033  1047  1051
  1053                              Exclude (IsComputable, i2);                   1034  1034  1052
  1054 # ifdef Debug                                                              1035  1035
  1055 WriteS (StdOutput, "SETc        "); WriteName (Instance^[i2]); WriteI (StdOutput, n,\  1036  1036  1036  1051  1053  1036
                                                                                     *  1051
      \ 5); WriteNl (StdOutput);                                                  1036     *
  1056 # endif                                                                    1037
  1057                           END;                                             1040
  1058                        END;                                                1057
  1059                     END;                                                   1058
  1060                  END;                                                      1059
  1061               ELSE                                                          961
  1062                  FOR i2 := 1 TO InstCount DO    (* add group members *) (* optimize!\  1044  1055  1044   995  1046
c     \ *)
  1063                     IF NOT IsElement (i2, IsComputed) AND                  1047  1047  1047  1062  1052  1048
  1064                        (Instance^[i2].Action = Action) THEN                1055  1063   964     *  1049
  1065                        INC (n);                                            1050  1055
  1066                        Instance^[n].Order := i2;                           1064  1065  1051  1064
  1067                        Include (IsComputed, i2);                           1052  1063  1066
  1068                        Exclude (IsComputable, i2);                         1053  1053  1067
  1069 # ifdef Debug                                                              1054  1054
  1070 WriteS (StdOutput, "SETg        "); WriteName (Instance^[i2]); WriteI (StdOutput, n,\  1055  1055  1055  1066  1068  1055
                                                                                     *  1066
      \ 5); WriteNl (StdOutput);                                                  1055     *
  1071 # endif                                                                    1056
  1072                     END;                                                   1060
  1073                  END;                                                      1072
  1074               END;                                                         1073
  1075 
  1076               FOR i2 := 1 TO InstCount DO                                  1062  1070  1062  1062  1062
  1077                   IF NOT IsElement (i2, IsComputed) AND                    1063  1063  1063  1076  1067  1063
  1078                      NOT IsElement (i2, IsComputable) AND                  1077  1077  1077  1068  1077
  1079                      IsComputable3a (i2, t) THEN                            996  1078   996  1064
  1080                      Include (IsComputable, i2);                           1067  1078  1079
  1081 # ifdef Debug                                                              1069  1069
  1082 WriteS (StdOutput, "ADD "); WriteName (Instance^[i2]); WriteNl (StdOutput);      1070  1070  1070  1070  1080  1070     *
  1083 # endif                                                                    1071
  1084                   END;                                                     1074
  1085               END;                                                         1084
  1086            END;                                                            1085
  1087         END;                                                               1086
  1088         IF n # InstCount THEN                                              1077  1070  1076  1079
  1089            ? InternalErrorCompOAG E Ident Name ?                              *     *   880   990
  1090            Exclude (Options, ORD ('o'));                                   1068   981   981
  1091         END;                                                               1087
  1092         ReleaseSet (IsComputed);                                            977  1077
  1093         ReleaseSet (IsComputable);                                         1092  1080
  1094 
  1095       IF IsElement (ORD ('G'), Options) THEN WriteOrderDecl (t); END;      1088  1078  1090  1090  1088   979  1079  1091
  1096       IF IsElement (ORD ('E'), Options) THEN WriteOrderEval (t); END;      1095  1095  1095  1095  1095   980  1095  1095
  1097       IF IsElement (ORD ('V'), Options) THEN WriteVisitSequence (t); END;  1096  1096  1096  1096  1096   981  1096  1096
  1098 }; .
  1099 
  1100 
  1101 PROCEDURE CompOAG3b (t: Tree)                                               986   260  1097   986
  1102 
  1103 Class (..) :- {                                                            1045
  1104 # ifdef Debug                                                              1081  1081
  1105 WriteNl (StdOutput); WriteIdent (StdOutput, Name); WriteNl (StdOutput);    1082  1082   990     *  1089     *     *
  1106 # endif                                                                    1083
  1107         MakeSet (IsComputed, InstCount);        (* strategy: as late as possible *)     994  1092  1088
  1108 
  1109         n := 0;                                 (* set property First   *)       1088
  1110         REPEAT                                                              922
  1111            i := InstCount;                                                 1021  1107
  1112            LOOP                                                            1006
  1113               WITH Instance^ [i] DO                                        1046  1082  1111  1076
  1114                  IF NOT IsElement (i, IsComputed) AND IsComputable3a (i, t) THEN       1097  1078  1097  1113  1107  1078
                                                                                  1079     *  1101  1097
  1115                     INC (n);                                               1065  1109
  1116                     Include (IsComputed, i);                               1080  1114  1114
  1117                     INCL (Properties, First);                              1023  1048  1023
  1118                     Visit := Attribute^.Child.Partition;                   1049  1049  1049  1049
  1119                     IF {Inherited, Left} <= Properties THEN                1114  1029  1025  1117  1114
  1120                        FOR i2 := 1 TO AttrCount DO      (* complete visit parent *)    1076  1082  1076  1045  1113
  1121                           WITH Instance^ [i2] DO                           1113  1113  1120  1120
  1122                              IF NOT IsElement (i2, IsComputed) AND         1119  1114  1114  1121  1116  1114
  1123                                 (Inherited IN Properties) AND              1119  1048  1119  1122
  1124                                 (Attribute^.Child.Partition = Visit) THEN  1118  1118  1118  1118  1119
  1125                                 INC (n);                                   1115  1115
  1126                                 Include (IsComputed, i2);                  1116  1122  1122
  1127                                 FOR j := 1 TO InstCount DO                 1120  1012  1120  1111  1121
  1128                                    IF IsRelated (j, i2, OAG) THEN          1122   905  1127  1126   907  1124
  1129                                       Relations.Include (OAG, j, i);        906  1126  1128  1128  1116
  1130                                    END;                                    1097
  1131                                 END;                                       1130
  1132                              END;                                          1131
  1133                           END;                                             1132
  1134                        END;                                                1133
  1135                     ELSIF {Synthesized, Right} <= Properties THEN          1041  1048  1041  1123  1128
  1136                        IF Selector # NoTree THEN        (* complete visit child *)     1128  1045  1042  1135
  1137                           ChildsClass := Selector^.Child.Class;            1045  1136  1124  1103
  1138                           FOR i2 := AttrCount + Selector^.Child.InstOffset + 1 TO      1127  1128  1120  1137  1137  1045
                                                                                  1127
  1139                              AttrCount + Selector^.Child.InstOffset        1138  1138  1138  1138
  1140                              + ChildsClass^.Class.AttrCount DO             1137  1137  1139  1127
  1141                              WITH Instance^ [i2] DO                        1121  1121  1138  1140
  1142                                 IF NOT IsElement (i2, IsComputed) AND      1136  1122  1122  1141  1126  1123
  1143                                    (Synthesized IN Properties) AND         1135  1123  1135  1142
  1144                                    (Attribute^.Child.Partition = Visit) THEN     1124  1139  1124  1124  1136
  1145                                    INC (n);                                1125  1125
  1146                                    Include (IsComputed, i2);               1129  1142  1142
  1147                                    FOR j := 1 TO InstCount DO              1138  1129  1138  1127  1141
  1148                                       IF IsRelated (j, i2, OAG) THEN       1142  1128  1147  1146  1129  1144
  1149                                          Relations.Include (OAG, j, i);    1129  1146  1148  1148  1129
  1150                                       END;                                 1134
  1151                                    END;                                    1150
  1152                                 END;                                       1151
  1153                              END;                                          1152
  1154                           END;                                             1153
  1155                        END;                                                1154
  1156                     ELSE                                                   1061
  1157                        FOR i2 := 1 TO InstCount DO      (* add group members *) (* o\  1147  1148  1147  1147  1147
c     \ptimize! *)
  1158                           IF NOT IsElement (i2, IsComputed) AND            1148  1142  1142  1157  1146  1143
  1159                              (Instance^[i2].Action = Action) THEN          1141  1158  1064     *  1148
  1160                              INC (n);                                      1145  1145
  1161                              Include (IsComputed, i2);                     1149  1158  1159
  1162                              FOR j := 1 TO InstCount DO                    1157  1149  1157  1157  1157
  1163                                 IF IsRelated (j, i2, OAG) THEN             1158  1148  1162  1161  1149  1159
  1164                                    Relations.Include (OAG, j, i);          1149  1161  1163  1163  1149
  1165                                 END;                                       1155
  1166                              END;                                          1165
  1167                           END;                                             1166
  1168                        END;                                                1167
  1169                     END;                                                   1168
  1170                     EXIT;                                                  1012
  1171                  END;                                                      1169
  1172               END;                                                         1171
  1173               DEC (i);                                                      974  1164
  1174            END;                                                            1172
  1175         UNTIL n = InstCount;                                                976  1160  1162
  1176 
  1177         AssignEmpty (IsComputed);               (* determine order      *)         29  1161
  1178         MakeSet (IsComputable, InstCount);                                 1107  1093  1175
  1179         FOR i := 1 TO InstCount DO                                         1162  1173  1162  1178  1162
  1180            IF IsComputable3b (i, t) THEN                                   1163   167  1179  1114  1163
  1181 # ifdef Debug                                                              1104  1104
  1182 WriteS (StdOutput, "INIT        "); WriteName (Instance^[i]); WriteNl (StdOutput);     1082  1105  1082  1159  1180  1105
                                                                                     *
  1183 # endif                                                                    1106
  1184            Include (IsComputable, i); END;                                 1164  1178  1182  1174
  1185         END;                                                               1184
  1186 
  1187         WHILE NOT Sets.IsEmpty (IsComputable) DO                           1003  1158  1003  1003  1184  1179
  1188            Prio := 0;                                                        72
  1189            i2 := Minimum (IsComputable);                                   1163  1004  1187
  1190            j  := Maximum (IsComputable);                                   1164  1005  1189
  1191            LOOP                                                            1112
  1192               IF IsElement (i2, IsComputable) THEN                         1180  1158  1189  1190  1180
  1193                  WITH Instance^[i2] DO                                     1141  1182  1192  1187
  1194                     IF ((Test IN Properties) OR NOT (Read IN Properties))        1192   811  1143  1143   816  1187   812
                                                                                     *     *
  1195                        AND (Prio < 1) THEN                                 1158  1188  1192
  1196                        i := i2; Prio := 1;                                 1184  1193  1195
  1197                     ELSIF ({Inherited, Left} <= Properties) AND (Prio < 2) THEN  1135  1123  1119  1194  1195  1196  1195
  1198                        i := i2; Prio := 2;                                 1196  1196  1197
  1199                     ELSIF (Output IN Properties) AND (Prio < 3) THEN       1197   811  1194  1197  1197  1198  1197
  1200                        i := i2; Prio := 3;                                 1198  1198  1199
  1201                     ELSE                                                   1156
  1202                        i := i2; (* Prio := 4; *) EXIT;                     1200  1200  1170
  1203                     END;                                                   1185
  1204                  END;                                                      1203
  1205               END;                                                         1204
  1206               INC (i2);                                                    1160  1202
  1207               IF i2 > j THEN EXIT; END;                                    1194  1206  1190  1199  1202  1205
  1208            END;                                                            1207
  1209 
  1210            WITH Instance^ [i] DO                                           1193  1193  1202  1193
  1211               Include (IsComputed, i);                                     1184  1177  1210
  1212               Visit := Attribute^.Child.Partition;                         1144  1144  1144  1144
  1213               IF {Inherited, Left} <= Properties THEN                      1207  1197  1197  1199  1207
  1214                  FOR i2 := 1 TO AttrCount DO    (* complete visit parent *)      1179  1207  1179  1140  1210
  1215                     WITH Instance^ [i2] DO                                 1210  1210  1214  1214
  1216                        IF NOT IsElement (i2, IsComputed) AND               1213  1194  1192  1215  1211  1199
  1217                           (Inherited IN Properties) AND                    1213  1199  1213  1216
  1218                           (Attribute^.Child.Partition = Visit) THEN        1212  1212  1212  1212  1213
  1219 # ifdef Debug                                                              1181  1181
  1220 WriteS (StdOutput, "SETp        "); WriteName (Instance^[i2]); WriteI (StdOutput, n,\  1182  1182  1182  1215  1216  1070
                                                                                     *  1175
      \ 5); WriteNl (StdOutput);                                                  1182     *
  1221 # endif                                                                    1183
  1222                           Instance^[n].Order := i2;                        1220  1220  1066  1220
  1223                           DEC (n);                                         1173  1222
  1224                           Include (IsComputed, i2);                        1211  1216  1222
  1225                        END;                                                1208
  1226                     END;                                                   1225
  1227                  END;                                                      1226
  1228               ELSIF {Synthesized, Right} <= Properties THEN                1199  1143  1135  1217  1218
  1229                  IF Selector # NoTree THEN      (* complete visit child *)       1216  1139  1136  1228
  1230                     ChildsClass := Selector^.Child.Class;                  1140  1229  1218  1140
  1231                     FOR i2 := AttrCount + Selector^.Child.InstOffset + 1 TO      1214  1224  1214  1230  1230  1139  1214
  1232                        AttrCount + Selector^.Child.InstOffset              1231  1231  1231  1231
  1233                        + ChildsClass^.Class.AttrCount DO                   1230  1230  1232  1215
  1234                        WITH Instance^ [i2] DO                              1215  1222  1231  1233
  1235                           IF NOT IsElement (i2, IsComputed) AND            1229  1216  1216  1234  1224  1217
  1236                              (Synthesized IN Properties) AND               1228  1217  1228  1235
  1237                              (Attribute^.Child.Partition = Visit) THEN     1218  1232  1218  1218  1229
  1238 # ifdef Debug                                                              1219  1219
  1239 WriteS (StdOutput, "SETc        "); WriteName (Instance^[i2]); WriteI (StdOutput, n,\  1220  1220  1220  1234  1235  1220
                                                                                     *  1223
      \ 5); WriteNl (StdOutput);                                                  1220     *
  1240 # endif                                                                    1221
  1241                              Instance^[n].Order := i2;                     1239  1239  1222  1239
  1242                              DEC (n);                                      1223  1241
  1243                              Include (IsComputed, i2);                     1224  1235  1241
  1244                           END;                                             1227
  1245                        END;                                                1244
  1246                     END;                                                   1245
  1247                  END;                                                      1246
  1248               ELSE                                                         1201
  1249                  FOR i2 := 1 TO InstCount DO    (* add group members *) (* optimize!\  1231  1243  1231  1179  1234
c     \ *)
  1250                     IF NOT IsElement (i2, IsComputed) AND                  1235  1235  1235  1249  1243  1236
  1251                        (Instance^[i2].Action = Action) THEN                1241  1250  1159     *  1237
  1252 # ifdef Debug                                                              1238  1238
  1253 WriteS (StdOutput, "SETg        "); WriteName (Instance^[i2]); WriteI (StdOutput, n,\  1239  1239  1239  1251  1251  1239
                                                                                     *  1242
      \ 5); WriteNl (StdOutput);                                                  1239     *
  1254 # endif                                                                    1240
  1255                        Instance^[n].Order := i2;                           1253  1253  1241  1253
  1256                        DEC (n);                                            1242  1255
  1257                        Include (IsComputed, i2);                           1243  1250  1255
  1258                     END;                                                   1247
  1259                  END;                                                      1258
  1260               END;                                                         1259
  1261 
  1262 # ifdef Debug                                                              1252  1252
  1263 WriteS (StdOutput, "SET "); WriteName (Instance^[i]); WriteI (StdOutput, n, 5); Writ\  1253  1253  1253  1255  1211  1253
                                                                                     *  1256
      \eNl (StdOutput);                                                           1253     *
  1264 # endif                                                                    1254
  1265               Instance^[n].Order := i;                                     1263  1263  1255  1263
  1266               DEC (n);                                                     1256  1265
  1267               Exclude (IsComputable, i);                                   1090  1192  1265
  1268               FOR i2 := 1 TO InstCount DO                                  1249  1257  1249  1249  1249
  1269                   IF (First IN Instance^[i2].Properties) AND               1250  1117  1236  1265  1268  1236  1250
  1270                      NOT IsElement (i2, IsComputed) AND                    1250  1250  1269  1257  1269
  1271                      NOT IsElement (i2, IsComputable) AND                  1270  1270  1270  1267  1270
  1272                      IsComputable3b (i2, t) THEN                           1180  1271  1180  1251
  1273 # ifdef Debug                                                              1262  1262
  1274 WriteS (StdOutput, "ADD "); WriteName (Instance^[i2]); WriteNl (StdOutput);      1263  1263  1263  1269  1272  1263     *
  1275 # endif                                                                    1264
  1276                      Include (IsComputable, i2);                           1257  1271  1274
  1277                   END;                                                     1260
  1278               END;                                                         1277
  1279            END;                                                            1278
  1280         END;                                                               1279
  1281         ReleaseSet (IsComputed);                                           1093  1270
  1282         ReleaseSet (IsComputable);                                         1281  1276
  1283         IF n # 0 THEN                                                      1269  1266  1272
  1284            CompOAG3a (t);                                                   986  1272
  1285         ELSE                                                               1248
  1286       IF IsElement (ORD ('G'), Options) THEN WriteOrderDecl (t); END;      1283  1271  1097  1097  1283  1095  1284  1280
  1287       IF IsElement (ORD ('E'), Options) THEN WriteOrderEval (t); END;      1286  1286  1286  1286  1286  1096  1286  1286
  1288       IF IsElement (ORD ('V'), Options) THEN WriteVisitSequence (t); END;  1287  1287  1287  1287  1287  1097  1287  1287
  1289         END;                                                               1288
  1290 }; .
  1291 
  1292 
  1293 PROCEDURE WriteOrderDecl (t: Tree)                                         1101  1286  1288  1101
  1294 
  1295 Class (..) :- {                                                            1233
  1296         WriteIdent      (StdOutput, Name);                                 1105  1274  1105
  1297         WriteS          (StdOutput, "   ");                                1274  1296
  1298         WriteClassProperties (StdOutput, Properties);                        49  1297  1269
  1299         WriteNl         (StdOutput);                                       1274  1298
  1300         WriteNl         (StdOutput);                                       1299  1299
  1301         FOR i := 1 TO InstCount DO                                         1268  1267  1268  1268  1268
  1302            WriteI (StdOutput, i, 2); WriteInstance (Instance^ [i]);        1263  1300  1301    49  1274     *
  1303         END;                                                               1289
  1304         WriteNl (StdOutput);                                               1300  1302
  1305 }; .
  1306 
  1307 
  1308 PROCEDURE WriteOrderEval (t: Tree)                                         1293  1287  1293  1293
  1309 
  1310 Class (..) :- {                                                            1295
  1311         WriteIdent      (StdOutput, Name);                                 1296  1304  1296
  1312         WriteS          (StdOutput, "   ");                                1297  1311
  1313         WriteClassProperties (StdOutput, Properties);                      1298  1312  1298
  1314         WriteNl         (StdOutput);                                       1304  1313
  1315         WriteNl         (StdOutput);                                       1314  1314
  1316         FOR i := 1 TO InstCount DO                                         1301  1302  1301  1301  1301
  1317            WriteI (StdOutput, Instance^ [i].Order, 2); WriteInstance (Instance^ [Ins\  1302  1315  1302  1316  1265  1302
                                                                                     *
      \tance^ [i].Order]);                                                           *     *     *
  1318         END;                                                               1303
  1319         WriteNl (StdOutput);                                               1315  1317
  1320 }; .
  1321 
  1322 
  1323 PROCEDURE WriteVisitSequence (t: Tree)                                     1308  1288  1308  1308
  1324 
  1325 Class (..) :- {                                                            1310
  1326         WriteIdent      (StdOutput, Name);                                 1311  1319  1311
  1327         WriteS          (StdOutput, "   ");                                1312  1326
  1328         WriteClassProperties (StdOutput, Properties);                      1313  1327  1313
  1329         WriteNl         (StdOutput);                                       1319  1328
  1330         WriteNl         (StdOutput);                                       1329  1329
  1331         FOR i := 1 TO InstCount DO                                         1316  1317  1316  1316  1316
  1332            AttrInstance := Instance^ [Instance^ [i].Order];                  83  1317     *  1331  1317
  1333            WITH AttrInstance DO                                            1234  1332  1331
  1334               IF Inherited IN Properties THEN                              1288  1217  1269  1328  1288
  1335                  IF Left IN Properties THEN                                1334  1213  1334  1334  1334
  1336                     IF First IN Properties THEN                            1335  1269  1335  1335  1335
  1337                        WriteS  (StdOutput, "visit       parent ");         1327  1330
  1338                        WriteI  (StdOutput, Attribute^.Child.Partition, 0);       1317  1337  1237  1237  1237
  1339                        WriteS  (StdOutput, ". time to compute");           1337  1338
  1340                        WriteNl (StdOutput);                                1330  1339
  1341                     END;                                                   1318
  1342                     WriteS     (StdOutput, "    ");                        1339  1340
  1343                     WriteName  (AttrInstance);                             1274  1333
  1344                     WriteNl    (StdOutput);                                1340  1342
  1345                  END;                                                      1341
  1346                  IF Right IN Properties THEN                               1336  1228  1336  1336  1336
  1347                     IF First IN Properties THEN                            1346  1336  1346  1346  1346
  1348                        WriteS  (StdOutput, "compute     ");                1342  1344
  1349                     ELSE                                                   1285
  1350                        WriteS  (StdOutput, "    ");                        1348  1348
  1351                     END;                                                   1345
  1352                     WriteName  (AttrInstance);                             1343  1343
  1353                     WriteNl    (StdOutput);                                1344  1350
  1354                  END;                                                      1351
  1355               END;                                                         1354
  1356               IF Synthesized IN Properties THEN                            1347  1236  1347  1347  1347
  1357                  IF (Left IN Properties) AND NOT (Dummy IN Properties) THEN      1356  1335  1356  1356  1271  1271   812
                                                                                     *     *  1356
  1358                     IF Test IN Properties THEN                             1357  1194  1357  1357  1357
  1359                        WriteS  (StdOutput, "check       condition ");      1350  1353
  1360                     ELSIF First IN Properties THEN                         1228  1347  1358  1358  1358
  1361                        WriteS  (StdOutput, "compute     ");                1359  1359
  1362                     ELSE                                                   1349
  1363                        WriteS  (StdOutput, "    ");                        1361  1361
  1364                     END;                                                   1355
  1365                     WriteIdent (StdOutput, Attribute^.Child.Name);         1326  1363  1338  1338  1326
  1366                     WriteNl    (StdOutput);                                1353  1365
  1367                  END;                                                      1364
  1368                  IF Right IN Properties THEN                               1358  1346  1360  1360  1360
  1369                     IF {First, Dummy} <= Properties THEN                   1368  1360  1357  1368  1368
  1370                        WriteS     (StdOutput, "visit    ");                1363  1366
  1371                        WriteIdent (StdOutput, Selector^.Child.Name);       1365  1370  1232  1365  1365
  1372                        WriteI     (StdOutput, Attribute^.Child.Partition, 2);    1338  1371  1365  1371  1338
  1373                        WriteS     (StdOutput, ". time");                   1370  1372
  1374                        WriteNl    (StdOutput);                             1366  1373
  1375                     END;                                                   1367
  1376                     IF NOT (Dummy IN Properties) THEN                      1369  1357  1369  1368  1369  1369
  1377                        IF First IN Properties THEN                         1376  1369  1376  1376  1376
  1378                           WriteS  (StdOutput, "visit    ");                1373  1374
  1379                           WriteIdent (StdOutput, Selector^.Child.Name);    1371  1378  1371  1372  1371
  1380                           WriteI  (StdOutput, Attribute^.Child.Partition, 2);    1372  1379  1372  1379  1372
  1381                           WriteS  (StdOutput, ". time to compute");        1378  1380
  1382                           WriteNl (StdOutput);                             1374  1381
  1383                        END;                                                1375
  1384                        WriteS     (StdOutput, " ");                        1381  1382
  1385                        WriteName  (AttrInstance);                          1352  1352
  1386                        WriteNl    (StdOutput);                             1382  1384
  1387                     END;                                                   1383
  1388                  END;                                                      1387
  1389               END;                                                         1388
  1390            END;                                                            1389
  1391         END;                                                               1390
  1392         WriteS  (StdOutput, "visit      parent");                          1384  1386
  1393         WriteNl (StdOutput);                                               1386  1392
  1394         WriteNl (StdOutput);                                               1393  1393
  1395 }; .
  1396 
  1397 
  1398 PROCEDURE CheckNormalForm (t: Tree)                                        1323   177  1323  1323
  1399 
  1400 Class (..) :- {                                                            1325
  1401         FOR i := 1 TO InstCount DO                                         1331  1332  1331  1331  1333
  1402            IF NOT (Dummy IN Instance^ [i].Properties) THEN                 1377  1376  1376  1377  1332  1401  1377  1377
  1403               FOR j := 1 TO InstCount DO                                   1401  1207  1401  1401  1401
  1404                  IF IsRelated (i, j, DP) THEN                              1402  1163  1402  1403   400  1402
  1405                     WITH Instance^ [j] DO                                  1333  1402  1404  1403
  1406                        IF ({Left, Synthesized} <= Properties) OR           1404  1357  1356  1402  1194
  1407                           ({Right,  Inherited} <= Properties) THEN         1368  1334  1406  1404
  1408                           Success := FALSE; RETURN;                         894   894   818
  1409                        END;                                                1391
  1410                     END;                                                   1409
  1411                  END;                                                      1410
  1412               END;                                                         1411
  1413            END;                                                            1412
  1414         END;                                                               1413
  1415 }; .
  1416 
  1417 
  1418 PROCEDURE CheckLAG (t: Tree)                                               1398   331  1398  1398
  1419 
  1420 Class (..) :- {                                                            1400
  1421         FOR i := AttrCount + 1 TO InstCount DO                             1403  1404  1233  1403  1403  1405
  1422            FOR j := 1 TO AttrCount DO                                      1421  1405  1421  1421  1421
  1423               IF (Synthesized IN Instance^ [j].Properties) AND             1406  1406  1402  1405  1422  1407  1357
  1424                  IsRelated (i, j, DP) THEN                                 1404  1421  1423  1404  1407
  1425                  Success := FALSE; RETURN;                                 1408  1408  1408
  1426               END;                                                         1414
  1427            END;                                                            1426
  1428 
  1429            WITH Instance^ [i] DO                                           1405  1423  1424  1422
  1430               IF Selector # NoTree THEN                                    1423  1379  1229  1424
  1431                  ChildsClass := Selector^.Child.Class;                     1233  1430  1380  1420
  1432                  FOR j := AttrCount + Selector^.Child.InstOffset + 1 TO    1422  1424  1422  1431  1431  1232  1422
  1433                     AttrCount + Selector^.Child.InstOffset + ChildsClass^.Class.Attr\  1432  1432  1432  1432  1431  1431
      \Count DO                                                                      *  1429
  1434                     IF (Synthesized IN Instance^ [j].Properties) AND       1430  1423  1423  1429  1432  1423  1423
  1435                        IsRelated (i, j, DP) THEN                           1424  1429  1434  1424  1430
  1436                        Success := FALSE; RETURN;                           1425  1425  1425
  1437                     END;                                                   1427
  1438                  END;                                                      1437
  1439 
  1440                  FOR j := AttrCount + Selector^.Child.InstOffset + ChildsClass^.Clas\  1432  1435  1433  1433  1433  1433
                                                                                  1433
      \s.AttrCount + 1 TO InstCount DO                                            1433     *  1432  1421  1433
  1441                     IF IsRelated (i, j, DP) THEN                           1434  1435  1435  1440  1435  1435
  1442                        Success := FALSE; RETURN;                           1436  1436  1436
  1443                     END;                                                   1438
  1444                  END;                                                      1443
  1445               END;                                                         1444
  1446            END;                                                            1445
  1447         END;                                                               1446
  1448 }; .
  1449 
  1450 
  1451 PROCEDURE CheckSAG (t: Tree)                                               1418   337  1418  1418
  1452 
  1453 Class (..) :- {                                                            1440
  1454         FOR i := AttrCount + 1 TO InstCount DO                             1440  1441  1440  1440  1440  1440
  1455            FOR j := 1 TO InstCount DO                                      1454  1441  1454  1454  1454
  1456               IF IsRelated (i, j, DP) THEN                                 1441  1441  1454  1455  1441  1441
  1457                  Success := FALSE; RETURN;                                 1442  1442  1442
  1458               END;                                                         1447
  1459            END;                                                            1458
  1460         END;                                                               1459
  1461 }; .
  1462 
  1463 PROCEDURE InitWAG (t: Tree)                                                1451   362  1451  1451
  1464 
  1465 Class (..) :-                                                              1453
  1466         NOT IsElement (Index, Relevant);                                   1402  1288   520   358
  1467         Include (Relevant, Index);                                         1276  1466  1466
  1468         ForallAttributes (t, InitWAG);                                      877  1463  1463
  1469         ForallClasses (Extensions, InitWAG);                                337   221  1468
  1470         .
  1471 Child (..) :-                                                              1440
  1472         InitWAG (Class);                                                   1469  1465
  1473         .
  1474 
  1475 PROCEDURE CheckWAG0 (t: Tree)                                              1463   366  1468  1463
  1476 
  1477 Class (..) :-                                                              1472
  1478         ForallAttributes (t, CheckWAG0);                                   1468  1475  1475
  1479         .
  1480 Child (..) :-                                                              1471
  1481         CheckWAG1 (Class);                                                    *  1477
  1482         .
  1483 
  1484 PROCEDURE CheckWAG1 (t: Class)                                             1475  1481  1478  1481
  1485 
  1486 Class (..) :-                                                              1484
  1487    VAR A: tRelation;                                                        146     *    33
  1488         NOT IsElement (Index, Cyclics);                                    1466  1466  1467   892
  1489         Include (Cyclics, Index);                                          1467  1488  1488
  1490         ReleaseRelation (DNC);                                              891   889
  1491         MakeRelation (A, InstCount, InstCount);                             885  1487  1455     *
  1492         Relations.Assign (A, DP);                                          1164   888  1491  1456
  1493         D := NIL;                                                             *     *
  1494         CheckWAG5 (t, A);                                                     *  1484  1492
  1495         ReleaseRelation (A);                                               1490  1494
  1496         CheckWAG0 (t);                                                     1478  1494
  1497         ForallClasses (Extensions, CheckWAG1);                             1469  1469  1484
  1498         .
  1499 
  1500 PROCEDURE CheckWAG2 (t: Class)                                             1484   380  1496  1486
  1501 
  1502 Class (..) :-                                                              1500
  1503    VAR A: tRelation;                                                       1487  1495  1487
  1504         MakeRelation (A, InstCount, InstCount);                            1491  1503  1491     *
  1505         Relations.Assign (A, DP);                                          1492  1492  1504  1492
  1506         ActClass := t;                                                      909  1500
  1507         CheckWAG3 (Attributes, A);                                            *   740  1505
  1508         ReleaseRelation (A);                                               1495  1507
  1509         .
  1510 
  1511 PROCEDURE CheckWAG3 (Attributes, tRelation)                                1500  1507  1507  1503
  1512 
  1513 t: Child (..), A:_ :-                                                      1506  1480  1508     *
  1514         CheckWAG4 (Class, A, Next, t);                                        *  1502  1513   123  1513
  1515         .
  1516 NoAttribute (..), A:_ :-                                                      *  1514  1513
  1517         CheckWAG5 (ActClass, A);                                           1494  1506  1516
  1518         .
  1519 Attribute (..), A:_ ;                                                      1380  1517  1516
  1520 ActionPart (..), A:_ :-                                                       *  1519  1519
  1521         CheckWAG3 (Next, A);                                               1511  1514  1520
  1522         .
  1523 
  1524 PROCEDURE CheckWAG4 (Class, tRelation, Attributes, Child)                  1511  1514  1514  1511  1511  1513
  1525 
  1526 Class (..), A:_, NextAttr:_, ActChild:_ :-                                 1524  1521  1520     *     *     *     *
  1527    VAR B : tRelation ;                                                     1503     *  1524
  1528    VAR ActD : tSetOfRelPtr ;                                               1527     *    53
  1529         MakeRelation (B, ActClass^.Class.InstCount, ActClass^.Class.InstCount);  1504  1527  1517  1526  1504     *     *
                                                                                     *
  1530         ActD := D;                                                         1528  1493
  1531 {       WHILE ActD # NIL DO                                                1187  1530  1493  1455
  1532            Relations.Assign (B, A);                                        1505  1505  1529  1526
  1533            FOR i := 2 TO ActChild^.Child.Class^.Class.AttrCount DO         1455  1456  1455  1526  1524  1529     *  1454
                                                                                  1531
  1534               FOR j := 2 TO ActChild^.Child.Class^.Class.AttrCount DO      1533  1456  1533  1533  1533  1533     *  1533
                                                                                  1533
  1535                  IF IsRelated (i, j, ActD^.Relation) THEN                  1456  1456  1533  1534  1531     *  1456
  1536                     Relations.Include                                      1532  1489
  1537                       ( B                                                  1532
  1538                       , ActClass^.Class.AttrCount + ActChild^.Child.InstOffset + i     1529  1534  1534  1534  1534  1440
                                                                                  1535
  1539                       , ActClass^.Class.AttrCount + ActChild^.Child.InstOffset + j     1538  1538  1538  1538  1538  1538
                                                                                  1535
  1540                       );
  1541                  END;                                                      1460
  1542               END;                                                         1541
  1543            END;                                                            1542
  1544            CheckWAG3 (NextAttr, B);                                        1521  1526  1537
  1545            ActD := ActD^.Next;                                             1535     *  1521
  1546         END;                                                               1543
  1547         ReleaseRelation (B);                                               1508  1544
  1548 }; .
  1549 
  1550 PROCEDURE CheckWAG5 (t: Class, tRelation)                                  1524  1517  1514  1539  1527
  1551    LOCAL { TYPE tSetOfRelPtrPtr = POINTER TO tSetOfRelPtr; }                  *     *     *    16  1534  1528
  1552 
  1553 Class (..), A:_ :-                                                         1550  1532  1526
  1554    VAR B : tRelation ;                                                     1528  1547  1550
  1555    VAR ActD : tSetOfRelPtr ;                                               1554  1545  1551
  1556    VAR  LastNext : tSetOfRelPtrPtr ;                                       1555     *  1551
  1557 {
  1558         IF Reporting THEN                                                  1535   378  1535
  1559            ? CycleInWAG E Ident Name ?                                        *  1089  1089  1379
  1560            WriteS (StdOutput, "Attribute Dependencies WAG");               1392  1394
  1561            WriteNl (StdOutput); WriteNl (StdOutput);                       1394  1560     *     *
  1562            WriteDependencies (t, A, MaxSet);                                897  1550  1553   897
  1563            WriteS (StdOutput, "Cyclic Attributes");                        1560  1561
  1564            WriteNl (StdOutput); WriteNl (StdOutput);                       1561  1563     *     *
  1565            MakeSet (Cyclics, InstCount);                                   1178  1489  1529
  1566            GetCyclics (A, Cyclics);                                         887  1562  1565
  1567            WriteCyclics (ActClass, Cyclics); WriteNl (StdOutput);           541  1539  1566  1564  1564
  1568            ReleaseSet (Cyclics);                                           1282  1567
  1569         ELSE                                                               1362
  1570            IF (Referenced IN Properties) OR (BaseClass^.Kind = Tree.NoClass) THEN      1558    41  1434  1434  1406   659
                                                                                   699  1475   125  1558
  1571               Closure (A);                                                  220  1566
  1572               IF HasReflexive (A) THEN Include (HasCycle, Index); END;     1570   531  1571  1570  1536   482  1489  1546
  1573               MakeRelation (B, AttrCount, AttrCount);                      1529  1554  1539     *
  1574               FOR i := 2 TO AttrCount DO                (* project on left-hand side\  1534  1538  1551  1573  1534
c     \ *)
  1575                  FOR j := 2 TO AttrCount DO                                1574  1539  1574  1574  1574
  1576                     IF IsRelated (i, j, A) THEN                            1572  1535  1574  1575  1572  1572
  1577                        Relations.Include (B, i, j);                        1536  1572  1573  1576  1576
  1578                     END;                                                   1572
  1579                  END;                                                      1578
  1580               END;                                                         1579
  1581               IF Relations.IsEmpty (B) THEN                                1576  1577  1187  1577  1576
  1582                  ReleaseRelation (B);                                      1547  1581
  1583                  RETURN;                                                   1457
  1584               END;                                                         1580
  1585               ActD := D;        (* is B already covered by (subset of) some x in D? \  1555  1530
c     \*)
  1586               WHILE ActD # NIL DO                                          1531  1585  1531  1575
  1587                  IF Relations.IsSubset (B, ActD^.Relation) THEN            1581  1581     *  1582  1586  1535  1581
  1588                     ReleaseRelation (B);                                   1582  1587
  1589                     RETURN;                                                1583
  1590                  END;                                                      1584
  1591                  ActD := ActD^.Next;                                       1587     *  1545
  1592               END;                                                         1590
  1593               ActD := D;                (* remove all x in D covered by (subset of) \  1591  1585
c     \B *)
  1594               LastNext := ADR (D);                                         1556    21  1593
  1595               WHILE ActD # NIL DO                                          1586  1593  1586  1586
  1596                  IF Relations.IsSubset (ActD^.Relation, B) THEN            1587  1587  1587  1595  1587  1588  1587
  1597                     ActD := ActD^.Next;                                    1596     *  1591
  1598                     Free (TSIZE (tSetOfRel), LastNext^);                     22   188    52  1594
  1599                     LastNext^ := ActD;                                     1598  1597
  1600                  ELSE                                                      1569
  1601                     LastNext := ADR (ActD^.Next);                          1599  1594  1599  1597
  1602                     ActD := ActD^.Next;                                    1601     *  1601
  1603                  END;                                                      1592
  1604               END;                                                         1603
  1605               ActD := Alloc (TSIZE (tSetOfRel));        (* include B in D *)     1602    22  1598  1598
  1606               ActD^.Next := D;                                             1605  1602  1594
  1607               ActD^.Relation := B;                                         1606  1596  1596
  1608               D := ActD;                                                   1606  1607
  1609               FOR UserIndex := Minimum (Users) TO Maximum (Users) DO       1575   202  1189   422  1575  1190     *  1595
  1610                  IF IsElement (UserIndex, Users) AND IsElement (UserIndex, Relevant)\  1596  1488  1609  1609  1434     *
                                                                                     *  1467
      \ THEN                                                                      1596
  1611                     Enqueue (UserIndex);                                    520  1610
  1612                  END;                                                      1604
  1613               END;                                                         1612
  1614            END;                                                            1613
  1615            IF BaseClass^.Kind # Tree.NoClass THEN                          1610  1570  1570  1570  1570  1610
  1616               CheckWAG5 (BaseClass, A);                                    1550  1615  1576
  1617            END;                                                            1614
  1618         END;                                                               1617
  1619 }; .
  1620 
  1621 
  1622 
  1623 
  1624 
  1625 
  1626 
  1627 
  1628 
Cross reference: 

-A-
 A                             1487  1491  1492  1494  1495  1503  1504  1505  1507  1508  1513  1514  1516  1517  1519  1520  1521 
                               1526  1532  1553  1562  1566  1571  1572  1576  1616 
 ActChild                      1526  1533  1534  1538  1539 
 ActClass                        80   195   196   197   199   200   201   219   220   221   222   416   422   432   444   496   497 
                                498   513   514   515   557   595   596   597   616   617   618   634   674   675   676   700   701 
                                702   730   747   748   749   755   756   766   767   768   774   775   789   790   791   802   803 
                                813   814   815   823   824   876   907   908   909  1506  1517  1529  1529  1538  1539  1567 
 ActD                          1528  1530  1531  1535  1545  1545  1555  1585  1586  1587  1591  1591  1593  1595  1596  1597  1597 
                               1599  1601  1602  1602  1605  1606  1607  1608 
 Action                         964   964  1064  1064  1159  1159  1251  1251 
 ActionPart                    1520 
 ADR                             21  1594  1601 
 Ag                             172 
 Alloc                           22  1605 
 AND                            109   109   123   137   153   153   160   581   597   618   658   676   701   745   745   748   763 
                                763   767   786   786   791   793   796   810   810   815   816   817   839   851   853   926   935 
                                936   951   952   963  1028  1029  1047  1048  1063  1077  1078  1114  1122  1123  1142  1143  1158 
                               1195  1197  1199  1216  1217  1235  1236  1250  1269  1270  1271  1357  1423  1434  1610 
 ARRAY                           16 
 Assign                          34   360   400   488   550   865   888  1492  1505  1532 
 AssignEmpty                     29  1177 
 AttrCount                      430   431   445   446   449   450   455   456   496   497   510   511   513   514   559   578   595 
                                616   636   655   674   700   747   766   789   813   835   838   849   852   903   904   908   909 
                                933   947   948   949  1026  1044  1045  1045  1120  1138  1139  1140  1214  1231  1232  1233  1421 
                               1422  1432  1433  1433  1440  1440  1454  1533  1534  1538  1539  1573  1573  1574  1575 
 Attribute                      109   110   597   606   618   619   676   690   702   703   722   749   762   768   769   793   796 
                                809   816   816   817   817   840   841   851   854   855   931   937   953  1024  1030  1049  1118 
                               1124  1144  1212  1218  1237  1338  1365  1372  1380  1519 
 AttributeDemand                 57   284   318   320 
 AttributeIn                     56   279   298   300 
 AttributeOut                    56   280   302   304 
 AttributeParam                  57   282   310   312 
 Attributes                     571   576   648   653   717   736   740  1507  1511  1524 
 AttributeStack                  57   285   322   324 
 AttributeTree                   56   281   306   308 
 AttributeVar                    57   283   314   316 
 AttrIndex                      596   617   675   701   748   756   767   775   791   803   815   824 
 AttrInstance                    83  1332  1333  1343  1352  1385 

-B-
 B                             1527  1529  1532  1537  1544  1547  1554  1573  1577  1581  1582  1587  1588  1596  1607 
 BaseClass                      197   558   559   580   581   583   635   636   657   658   659  1570  1615  1616 
 BEGIN                          133   147 
 BOOLEAN                         79   131   145 

-C-
 cDNC                            51   229   235 
 CheckLAG                       331  1418 
 CheckNormalForm                177  1398 
 CheckSAG                       337  1451 
 CheckWAG0                      366  1475  1478  1496 
 CheckWAG1                     1481  1484  1497 
 CheckWAG2                      371   380  1500 
 CheckWAG3                     1507  1511  1521  1544 
 CheckWAG4                     1514  1524 
 CheckWAG5                     1494  1517  1550  1616 
 Child                          109   110   419   441   507   588   597   664   677   719   744   750   785   793   796   840   841 
                                851   854   855   900   931   937   946   947   948   953  1024  1030  1043  1044  1045  1049  1118 
                               1124  1137  1138  1139  1144  1212  1218  1230  1231  1232  1237  1338  1365  1371  1372  1379  1380 
                               1431  1432  1433  1440  1471  1480  1513  1524  1533  1534  1538  1539 
 Children                        66 
 ChildrenDyn                     56   277   294   296 
 ChildrenIn                      56   278   290   292 
 ChildsClass                     82   420   421   422   443   444   444   445   446   447   509   510   511   518   519   520   902 
                                903   904   905   946   949  1043  1045  1137  1140  1230  1233  1431  1433  1440 
 ChildUse                        47 
 cLAG                            51   332   334 
 Class                          134   148   175   196   197   199   200   201   220   221   396   406   415   420   422   422   429 
                                432   442   443   444   445   446   447   449   450   451   454   455   456   458   468   495   496 
                                497   498   508   509   510   511   513   514   515   518   519   520   530   556   558   559   580 
                                581   583   595   596   597   616   617   618   633   635   636   657   658   659   674   675   676 
                                700   701   702   715   729   747   748   749   755   756   766   767   768   774   775   789   790 
                                791   802   803   813   814   815   823   824   834   875   901   902   903   904   905   907   908 
                                909   946   949   988  1043  1045  1103  1137  1140  1230  1233  1295  1310  1325  1400  1420  1431 
                               1433  1440  1453  1465  1472  1477  1481  1484  1486  1500  1502  1514  1524  1526  1529  1529  1533 
                               1533  1534  1534  1538  1539  1550  1553 
 ClassCount                      74   187   189   190   357   358   359   397   398   408 
 Classes                        173 
 cLNC                            51   184 
 Closure                         33   196   220  1571 
 cOAG                            51   248   254 
 CompDNC1                       221   222   493 
 CompDNC2                       227   528 
 CompIndex                      186   394 
 CompIndexToClass               191   404 
 CompOAG0a                      238   554   571   576 
 CompOAG0b                      240   631   648   653 
 CompOAG0c                      241   713   717 
 CompOAG0d                      242   727   736 
 CompOAG0e                      740   783 
 CompOAG1                       244   832 
 CompOAG2                       246   873   877 
 CompOAG3a                      258   986  1284 
 CompOAG3b                      260  1101 
 CompSNC1                       197   203   427 
 CompSNC2                       208   466 
 CompUsers                      192   413   417 
 Computed                        42 
 CONST                           61 
 CopyDef                         45 
 CopyUse                         45 
 cSAG                            51   338   340 
 cSNC                            51   210   216 
 cWAG                            51   375 
 CycleInDNC                     533 
 CycleInOAG                     880 
 CycleInSNC                     471 
 CycleInWAG                    1559 
 Cyclics                         69   359   360   361   362   368   477   478   479   480   539   540   541   542   886   887   890 
                                892  1488  1489  1565  1566  1567  1568 

-D-
 D                             1493  1530  1585  1593  1594  1606  1608 
 Debug                          754   773   801   822   989   997  1020  1035  1054  1069  1081  1104  1181  1219  1238  1252  1262 
                               1273 
 DEC                            103   117   120   974  1173  1223  1242  1256  1266 
 Def                             46 
 Demand                          48 
 Dequeue                         38   195   219   371 
 Difference                      34   866   889 
 DNC                            220   487   488   498   499   500   515   518   519   531   536   540   547   550   866   889  1490 
 DO                             108   134   135   148   151   159   194   200   218   361   365   370   379   430   431   445   446 
                                496   497   510   511   595   616   674   700   747   766   789   790   813   814   835   836   838 
                                849   850   852   903   904   925   933   934   949   950   962   995  1003  1015  1026  1027  1045 
                               1046  1062  1076  1113  1120  1121  1127  1140  1141  1147  1157  1162  1179  1187  1193  1210  1214 
                               1215  1233  1234  1249  1268  1301  1316  1331  1333  1401  1403  1405  1421  1422  1429  1433  1440 
                               1454  1455  1531  1533  1534  1574  1575  1586  1595  1609 
 DP                             400  1404  1424  1435  1441  1456  1492  1505 
 Dummy                           48   746   765   788   812  1357  1369  1376  1402 
 DynArray                        23 

-E-
 E                             1089  1559 
 ELSE                           158   180   239   259   342   345   348   351   354   377   388   561   638   961  1061  1156  1201 
                               1248  1285  1349  1362  1569  1600 
 ELSIF                          211   230   249   944  1041  1135  1197  1199  1228  1360 
 END                            104   105   112   115   116   118   119   121   122   124   127   128   139   140   142   143   156 
                                157   162   163   164   166   167   182   204   205   206   214   223   233   243   252   261   286 
                                293   297   301   305   309   313   317   321   325   326   327   328   332   338   344   347   350 
                                353   363   367   372   381   383   387   390   423   436   437   438   439   459   460   461   462 
                                481   483   486   502   503   504   505   521   522   523   524   543   545   548   563   584   586 
                                593   600   601   603   604   614   623   624   626   627   640   660   662   672   682   683   687 
                                688   698   705   706   708   709   720   723   752   753   760   771   772   779   798   799   800 
                                807   819   820   821   828   843   844   845   846   847   857   858   859   860   861   869   893 
                                895   898   910   911   912   941   942   943   957   958   959   960   968   969   970   972   973 
                                975   979   980   981  1000  1001  1009  1010  1012  1013  1038  1039  1040  1057  1058  1059  1060 
                               1072  1073  1074  1084  1085  1086  1087  1091  1095  1096  1097  1130  1131  1132  1133  1134  1150 
                               1151  1152  1153  1154  1155  1165  1166  1167  1168  1169  1171  1172  1174  1184  1185  1203  1204 
                               1205  1207  1208  1225  1226  1227  1244  1245  1246  1247  1258  1259  1260  1277  1278  1279  1280 
                               1286  1287  1288  1289  1303  1318  1341  1345  1351  1354  1355  1364  1367  1375  1383  1387  1388 
                               1389  1390  1391  1409  1410  1411  1412  1413  1414  1426  1427  1437  1438  1443  1444  1445  1446 
                               1447  1458  1459  1460  1541  1542  1543  1546  1572  1578  1579  1580  1584  1590  1592  1603  1604 
                               1612  1613  1614  1617  1618 
 endif                          758   777   805   826   991   999  1022  1037  1056  1071  1083  1106  1183  1221  1240  1254  1264 
                               1275 
 Enqueue                         38   409   435   458   489   501   520  1611 
 Errors                          59 
 Exclude                         30  1019  1034  1053  1068  1090  1267 
 EXIT                           104   111   114   118   971  1009  1012  1170  1202  1207 
 EXPORT                          15 
 Extensions                     221  1469  1497 
 Extract                         29   362   366   380 

-F-
 f                               48 
 FALSE                          114   138   155   161   364   544   602   625   686   707   759   778   806   827   894  1408  1425 
                               1436  1442  1457 
 First                           47   152   930  1023  1117  1269  1336  1347  1360  1369  1377 
 FOR                            135   151   159   199   430   431   445   446   496   497   510   511   595   616   674   700   747 
                                766   789   813   835   838   849   852   903   904   933   947   962   995  1026  1044  1062  1076 
                               1120  1127  1138  1147  1157  1162  1179  1214  1231  1249  1268  1301  1316  1331  1401  1403  1421 
                               1422  1432  1440  1454  1455  1533  1534  1574  1575  1609 
 ForallAttributes                52   203   222   417   571   576   648   653   717   736   740   877  1468  1478 
 ForallClasses                   52   177   186   191   192   208   221   227   238   240   241   242   244   246   258   260   264 
                                287   331   337  1469  1497 
 Free                            22  1598 
 FROM                            21    22    23    24    25    27    32    37    40    55 

-G-
 GetCyclics                      35   478   540   887  1566 
 GLOBAL                          19 
 GrammarClass                    51   184   210   216   229   235   248   254   332   334   338   340   375 
 GrammarIsDNC                   349 
 GrammarIsInNormalForm          179 
 GrammarIsLAG                   343 
 GrammarIsNotInNormalForm       181 
 GrammarIsNotWAG                382   389 
 GrammarIsOAG                   346 
 GrammarIsSAG                   341 
 GrammarIsSNC                   352 
 GrammarIsWAG                   376 

-H-
 HasCycle                        65   190   209   360   365   366   374   379   380   384   482  1572 
 HasReflexive                    34   469   531  1572 

-I-
 I                              179   181   212   231   250   341   343   346   349   352   376   382   389 
 i                               76   131   136   145   149   150   153   160   430   432   433   434   445   447   449   455   496 
                                498   499   500   510   513   518   519   595   596   597   616   617   618   674   675   676   700 
                                701   702   747   748   749   766   767   768   789   790   791   813   814   815   835   836   842 
                                849   850   856   903   905   908   923   925   926   926   928   929   974   995   996   996   998 
                               1008  1015  1017  1018  1019  1021  1111  1113  1114  1114  1116  1129  1149  1164  1173  1179  1180 
                               1182  1184  1196  1198  1200  1202  1210  1211  1263  1265  1267  1301  1302  1302  1316  1317  1317 
                               1331  1332  1401  1402  1404  1421  1424  1429  1435  1441  1454  1456  1533  1535  1538  1574  1576 
                               1577 
 i2                              76   933   934   935   939   940   947   950   951   955   956   962   963   964   966   967  1004 
                               1007  1008  1009  1011  1012  1026  1027  1028  1032  1033  1034  1036  1044  1046  1047  1051  1052 
                               1053  1055  1062  1063  1064  1066  1067  1068  1070  1076  1077  1078  1079  1080  1082  1120  1121 
                               1122  1126  1128  1138  1141  1142  1146  1148  1157  1158  1159  1161  1163  1189  1192  1193  1196 
                               1198  1200  1202  1206  1207  1214  1215  1216  1220  1222  1224  1231  1234  1235  1239  1241  1243 
                               1249  1250  1251  1253  1255  1257  1268  1269  1270  1271  1272  1274  1276 
 Ident                          471   533   880  1089  1559 
 Idents                          25 
 IF                             104   109   113   118   120   136   149   152   160   178   184   201   209   216   228   235   237 
                                247   254   255   257   263   272   288   290   294   298   302   306   310   314   318   322   332 
                                334   338   340   374   421   432   433   447   448   469   470   484   498   499   512   518   531 
                                532   546   558   580   586   589   590   594   596   607   608   615   617   635   657   662   665 
                                666   673   675   691   692   699   701   720   723   745   748   763   767   786   791   810   815 
                                837   839   851   853   863   878   879   896   905   926   932   935   945   951   963   979   980 
                                981   996  1007  1009  1012  1025  1028  1042  1047  1063  1077  1088  1095  1096  1097  1114  1119 
                               1122  1128  1136  1142  1148  1158  1163  1180  1192  1194  1207  1213  1216  1229  1235  1250  1269 
                               1283  1286  1287  1288  1334  1335  1336  1346  1347  1356  1357  1358  1368  1369  1376  1377  1402 
                               1404  1406  1423  1430  1434  1441  1456  1535  1558  1570  1572  1576  1581  1587  1596  1610  1615 
 ifdef                          754   773   801   822   989   997  1020  1035  1054  1069  1081  1104  1181  1219  1238  1252  1262 
                               1273 
 IMPORT                          21    22    23    24    25    27    32    37    40    55    59 
 IN                             109   152   184   216   235   254   334   340   590   594   608   615   666   673   692   699   745 
                                763   786   792   795   810   816   817   837   839   851   853   936   952  1029  1048  1123  1143 
                               1194  1194  1199  1217  1236  1269  1334  1335  1336  1346  1347  1356  1357  1357  1358  1360  1368 
                               1376  1377  1402  1423  1434  1570 
 INC                            397   567   592   602   612   625   644   670   685   696   707   733   927   938   954   965  1011 
                               1016  1031  1050  1065  1115  1125  1145  1160  1206 
 INCL                           210   229   248   332   338   375   930  1023  1117 
 Include                         30   213   232   251   422   434   453   482   500   519   842   856   906   929   940   956   967 
                                996  1018  1033  1052  1067  1080  1116  1126  1129  1146  1149  1161  1164  1184  1211  1224  1243 
                               1257  1276  1467  1489  1536  1572  1577 
 include                         62 
 Index                          398   407   409   422   435   444   458   482   489   501   520  1466  1467  1488  1489  1572 
 IndexSize                       84   187   188 
 IndexToClass                    16   188   195   202   219   362   366   371   380   407 
 Inherited                       43   150   570   591   609   652   667   693   786   792   810   816   839   851   932   936  1009 
                               1025  1029  1119  1123  1197  1213  1217  1334  1407 
 InitWAG                        362  1463  1468  1469  1472 
 Input                           43   590   608   666   692 
 Instance                       108   108   149   150   152   597   618   676   702   749   756   768   775   790   803   814   824 
                                836   839   841   850   853   855   925   928   934   939   950   955   964   966   998  1009  1015 
                               1017  1021  1027  1032  1036  1046  1051  1055  1064  1066  1070  1082  1113  1121  1141  1159  1182 
                               1193  1210  1215  1220  1222  1234  1239  1241  1251  1253  1255  1263  1265  1269  1274  1302  1317 
                               1317  1317  1332  1332  1402  1405  1423  1429  1434 
 InstCount                      135   151   159   399   399   477   487   487   539   549   549   864   864   885   885   886   921 
                                923   962   976   993   994   995  1062  1076  1088  1107  1111  1127  1147  1157  1162  1175  1178 
                               1179  1249  1268  1301  1316  1331  1401  1403  1421  1440  1454  1455  1491  1491  1504  1504  1529 
                               1529  1565 
 InstOffset                     449   450   455   456   513   514   908   909   947   948  1044  1045  1138  1139  1231  1232  1432 
                               1433  1440  1538  1539 
 InternalErrorCompOAG          1089 
 IO                              24 
 IsComputable                    71   994   996  1003  1004  1005  1007  1019  1034  1053  1068  1078  1080  1093  1178  1184  1187 
                               1189  1190  1192  1267  1271  1276  1282 
 IsComputable3a                 131   143   926   996  1079  1114 
 IsComputable3b                 145   167  1180  1272 
 IsComputed                      70   137   154   160   921   926   929   935   940   951   956   963   967   977   993  1018  1028 
                               1033  1047  1052  1063  1067  1077  1092  1107  1114  1116  1122  1126  1142  1146  1158  1161  1177 
                               1211  1216  1224  1235  1243  1250  1257  1270  1281 
 IsCyclic                        35   878 
 IsElement                       28   137   154   160   201   211   230   237   249   255   257   263   272   288   444   470   484 
                                532   546   863   879   896   926   935   951   963   979   980   981  1007  1028  1047  1063  1077 
                               1078  1095  1096  1097  1114  1122  1142  1158  1192  1216  1235  1250  1270  1271  1286  1287  1288 
                               1466  1488  1610  1610 
 IsEmpty                         38   194   209   218   361   365   370   374   379  1003  1187  1581 
 IsRelated                       34   136   153   160   432   433   447   448   498   499   512   518   596   617   675   701   748 
                                767   791   815   905  1128  1148  1163  1404  1424  1435  1441  1456  1535  1576 
 IsSubset                      1587  1596 

-J-
 j                               76   132   135   136   137   146   151   152   153   154   159   160   160   431   432   433   434 
                                446   447   450   456   497   498   499   500   511   514   518   519   838   839   841   842   852 
                                853   855   856   904   905   909  1005  1012  1127  1128  1129  1147  1148  1149  1162  1163  1164 
                               1190  1207  1403  1404  1405  1422  1423  1424  1432  1434  1435  1440  1441  1455  1456  1534  1535 
                               1539  1575  1576  1577 

-K-
 k                               76   564   567   581   583   585   586   586   597   602   619   625   641   644   658   659   661 
                                662   662   678   684   703   707   716   720   723   731   733   742   745   750   757   759   763 
                                769   776   778   786   793   796   804   806   810   816   817   825   827 
 Kind                            75   558   570   575   580   594   615   635   646   652   657   673   699  1570  1615 

-L-
 LastNext                      1556  1594  1598  1599  1601 
 Left                            46   109   150   932  1009  1025  1119  1197  1213  1335  1357  1406 
 LifeTime1                       55   264 
 LifeTime3                       55   287 
 LOCAL                         1551 
 LONGINT                         84 
 LOOP                           107   924  1006  1112  1191 

-M-
 MakeArray                       23   188 
 MakeQueue                       38   189   357 
 MakeRelation                    33   399   487   549   864   885  1491  1504  1529  1573 
 MakeSet                         28   190   358   359   408   477   539   886   921   993   994  1107  1178  1565 
 Maximum                         29   200  1005  1190  1609 
 MaxSet                          50   474   485   536   547   867   897  1562 
 MaxVisit                        50   586   586   662   662 
 Memory                          22 
 Minimum                         29   199  1004  1189  1609 

-N-
 n                               76   103   104   108   117   118   559   562   578   592   602   612   625   636   639   655   670 
                                685   696   707   927   928   938   939   954   955   965   966   976   992  1016  1017  1021  1031 
                               1032  1036  1050  1051  1055  1065  1066  1070  1088  1109  1115  1125  1145  1160  1175  1220  1222 
                               1223  1239  1241  1242  1253  1255  1256  1263  1265  1266  1283 
 Name                           471   533   755   774   802   823   880   990  1089  1105  1296  1311  1326  1365  1371  1379  1559 
 Next                           123  1514  1521  1545  1591  1597  1601  1602  1606 
 NextAttr                      1526  1544 
 NIL                           1493  1531  1586  1595 
 NoAttribute                   1516 
 NoClass                        125  1570  1615 
 NonBaseComp                     47 
 NOT                            137   154   160   194   211   218   230   249   255   361   365   370   379   433   448   470   499 
                                518   532   879   926   935   951   963  1003  1009  1028  1047  1063  1077  1078  1114  1122  1142 
                               1158  1187  1194  1216  1235  1250  1270  1271  1357  1376  1402  1466  1488 
 NoTree                          41   421   442   508   901   945  1042  1136  1229  1430 

-O-
 OAG                            136   153   160   549   550   596   617   675   701   748   767   791   815   842   856   865   878 
                                887   888   897   905   907  1128  1129  1148  1149  1163  1164 
 OF                              16 
 Optimize                        55 
 OptimizeVisits                 123   128 
 Options                         52   211   213   230   232   237   249   251   255   257   263   272   288   470   484   532   546 
                                863   879   896   979   980   981  1090  1095  1096  1097  1286  1287  1288 
 OR                             149   444   590   608   666   692   746   765   788   794   812   816  1194  1406  1570 
 ORD                            211   213   230   232   237   249   251   255   257   263   272   288   470   484   532   546   863 
                                879   896   979   980   981  1090  1095  1096  1097  1286  1287  1288 
 Order                           11    13   108   170   173   928   939   955   966  1017  1032  1051  1066  1222  1241  1255  1265 
                               1317  1317  1332 
 Output                          43   746   764   787   811  1199 

-P-
 Parents                         67 
 ParentUse                       47 
 Part                           864   865   866   867   868   885   888   889   890   891 
 Partition                      109   110   589   592   597   602   607   611   619   625   665   669   677   684   691   695   703 
                                707   720   720   720   723   723   723   745   750   757   759   763   769   776   778   786   793 
                                796   804   806   810   816   817   825   827   840   841   851   854   855   931   937   953  1024 
                               1030  1049  1118  1124  1144  1212  1218  1237  1338  1372  1380 
 POINTER                         16  1551 
 Prio                            72  1188  1195  1196  1197  1198  1199  1200 
 PROCEDURE                      131   145   170   394   404   413   427   466   493   528   554   631   713   727   783   832   873 
                                986  1101  1293  1308  1323  1398  1418  1451  1463  1475  1484  1500  1511  1524  1550 
 Properties                     109   113   149   150   152   590   591   594   608   609   615   666   667   673   692   693   699 
                                745   746   746   763   764   765   786   787   788   792   795   810   811   812   816   817   837 
                                839   851   853   930   932   936   944   952  1009  1023  1025  1029  1041  1048  1117  1119  1123 
                               1135  1143  1194  1194  1197  1199  1213  1217  1228  1236  1269  1298  1313  1328  1334  1335  1336 
                               1346  1347  1356  1357  1357  1358  1360  1368  1369  1376  1377  1402  1406  1407  1423  1434  1570 
 PUBLIC                          13 

-Q-
 Queue                           37    59   444 

-R-
 Read                            42   746   765   788   812  1194 
 Referenced                      41  1570 
 Relation                      1535  1587  1596  1607 
 Relations                       32    59   434   453   500   519   842   856   906  1129  1149  1164  1492  1505  1532  1536  1577 
                               1581  1587  1596 
 ReleaseQueue                    38   225   356   385 
 ReleaseRelation                 33   868   891  1490  1495  1508  1547  1582  1588 
 ReleaseSet                      28   368   384   480   542   892   977  1092  1093  1281  1282  1568 
 Relevant                        68   358  1466  1467  1610 
 REPEAT                         566   568   573   643   645   650   732   734   738   922  1110 
 Reporting                       77   364   378  1558 
 RETURN                         123   126   138   141   155   161   165   592   599   613   622   671   681   697   704   751   770 
                                797   818  1408  1425  1436  1442  1457  1583  1589 
 Reverse                         42 
 Right                           46   113   149   944  1041  1135  1228  1346  1368  1407 

-S-
 Selector                       945   946   947   948  1042  1043  1044  1045  1136  1137  1138  1139  1229  1230  1231  1232  1371 
                               1379  1430  1431  1432  1433  1440 
 Sets                            27    59   209   360   361   365   374   379  1003  1187 
 SHORTCARD                       76   131   132   145   146 
 SNC                            196   399   400   432   433   434   447   451   454   469   474   478   485   488 
 Stable                          79   569   572   574   577   602   625   647   649   651   654   686   707   735   737   739   741 
                                759   778   806   827 
 Stack                           44 
 StdOutput                       24   273   274   274   275   275   276   289   291   292   292   295   296   296   299   300   300 
                                303   304   304   307   308   308   311   312   312   315   316   316   319   320   320   323   324 
                                324   472   473   473   475   476   476   479   534   535   535   537   538   538   541   755   755 
                                756   757   757   757   774   774   775   776   776   776   802   802   803   804   804   804   823 
                                823   824   825   825   825   867   882   884   884   990   990   990   998   998  1021  1021  1021 
                               1036  1036  1036  1055  1055  1055  1070  1070  1070  1082  1082  1105  1105  1105  1182  1182  1220 
                               1220  1220  1239  1239  1239  1253  1253  1253  1263  1263  1263  1274  1274  1296  1297  1298  1299 
                               1300  1302  1304  1311  1312  1313  1314  1315  1317  1319  1326  1327  1328  1329  1330  1337  1338 
                               1339  1340  1342  1344  1348  1350  1353  1359  1361  1363  1365  1366  1370  1371  1372  1373  1374 
                               1378  1379  1380  1381  1382  1384  1386  1392  1393  1394  1560  1561  1561  1563  1564  1564  1567 
 Success                         78   106   114   120   123   176   178   226   228   245   247   330   332   336   338   544   894 
                               1408  1425  1436  1442  1457 
 SwitchedOnOptionL              212   231   250 
 Synthesized                     43   113   149   575   591   609   646   667   693   745   763   795   817   837   853   944   952 
                               1041  1048  1135  1143  1228  1236  1356  1406  1423  1434 
 SYSTEM                          21 

-T-
 t                              131   134   145   148   170   177   186   191   192   208   227   238   240   241   242   244   246 
                                258   260   264   287   331   337   394   404   407   413   416   417   427   466   474   479   485 
                                493   528   536   541   547   554   557   631   634   713   727   730   783   832   867   873   876 
                                877   890   897   926   979   980   981   986   996  1079  1095  1096  1097  1101  1114  1180  1272 
                               1284  1286  1287  1288  1293  1308  1323  1398  1418  1451  1463  1468  1475  1478  1484  1494  1496 
                               1500  1506  1513  1514  1550  1562 
 Test                            45   746   764   787   811  1194  1358 
 THEN                           104   110   113   118   120   137   150   154   160   178   184   201   210   211   216   229   230 
                                235   237   248   249   254   255   257   263   272   288   290   294   298   302   306   310   314 
                                318   322   332   334   338   340   375   421   432   433   447   452   469   470   484   498   499 
                                517   518   531   532   546   558   582   586   589   591   594   598   607   610   615   621   635 
                                658   662   665   668   673   680   691   694   699   703   720   723   746   750   765   769   788 
                                796   812   817   837   841   851   855   863   878   879   896   905   926   932   937   944   945 
                                953   964   979   980   981   996  1007  1009  1012  1025  1030  1041  1042  1049  1064  1079  1088 
                               1095  1096  1097  1114  1119  1124  1128  1135  1136  1144  1148  1159  1163  1180  1192  1195  1197 
                               1199  1207  1213  1218  1228  1229  1237  1251  1272  1283  1286  1287  1288  1334  1335  1336  1346 
                               1347  1356  1357  1358  1360  1368  1369  1376  1377  1402  1404  1407  1424  1430  1435  1441  1456 
                               1535  1558  1570  1572  1576  1581  1587  1596  1610  1615 
 Thread                          45 
 tInstance                       41    83 
 TO                              16   135   151   159   200   430   431   445   446   496   497   510   511   595   616   674   700 
                                747   766   789   813   835   838   849   852   903   904   933   947   962   995  1026  1044  1062 
                               1076  1120  1127  1138  1147  1157  1162  1179  1214  1231  1249  1268  1301  1316  1331  1401  1403 
                               1421  1422  1432  1440  1454  1455  1533  1534  1551  1574  1575  1609 
 TRAFO                           11 
 TREE                            12 
 Tree                            12    16    40   125   170   394   404   413   427   466   493   528   554   558   580   631   635 
                                657   713   727   783   832   873   986  1101  1293  1308  1323  1398  1418  1451  1463  1475  1570 
                               1615 
 tRelation                       33  1487  1503  1511  1524  1527  1550  1554 
 TRUE                           106   126   141   165   176   226   245   330   336   378   569   574   647   651   735   739 
 tSet                            28    71 
 tSetOfRel                       52  1598  1605 
 tSetOfRelPtr                    53  1528  1551  1555 
 tSetOfRelPtrPtr               1551  1556 
 TSIZE                           21   188  1598  1605 
 tTree                           16    41    82   131   145   188 
 TYPE                          1551 

-U-
 Union                           30 
 UNTIL                          572   577   578   649   654   655   737   741   742   976  1175 
 Use                             46 
 UserClass                       81   202   203   449   450   451   454   455   456   458 
 UserIndex                       73   199   201   202  1609  1610  1610  1611 
 Users                          199   200   201   408   422  1609  1609  1610 

-V-
 VAR                             16    64   132   146  1487  1503  1527  1528  1554  1555  1556 
 Variable                        44 
 Visit                           76   931   937   953  1024  1030  1049  1118  1124  1144  1212  1218  1237 
 Visits                         110   120   581   583   585   658   659   661   716   742 

-W-
 W                              471   533   880 
 WHILE                          194   218   361   365   370   379  1003  1187  1531  1586  1595 
 WITH                           108   134   148   790   814   836   850   925   934   950  1015  1027  1046  1113  1121  1141  1193 
                               1210  1215  1234  1333  1405  1429 
 Write                           42 
 WriteClass                      50 
 WriteClassProperties            49  1298  1313  1328 
 WriteCyclics                    49   479   541  1567 
 WriteDependencies               49   474   485   536   547   867   890   897  1562 
 WriteI                          24   292   296   300   304   308   312   316   320   324   757   757   776   776   804   804   825 
                                825  1021  1036  1055  1070  1220  1239  1253  1263  1302  1317  1338  1372  1380 
 WriteIdent                      25   755   774   802   823   990  1105  1296  1311  1326  1365  1371  1379 
 WriteInstance                   49  1302  1317 
 WriteName                       48   756   775   803   824   998  1021  1036  1055  1070  1082  1182  1220  1239  1253  1263  1274 
                               1343  1352  1385 
 WriteNl                         24   273   274   275   276   289   292   296   300   304   308   312   316   320   324   473   473 
                                476   476   479   535   535   538   538   541   757   776   804   825   867   884   884   990   990 
                                998  1021  1036  1055  1070  1082  1105  1105  1182  1220  1239  1253  1263  1274  1299  1300  1304 
                               1314  1315  1319  1329  1330  1340  1344  1353  1366  1374  1382  1386  1393  1394  1561  1561  1564 
                               1564  1567 
 WriteOrderDecl                  13   979  1095  1286  1293 
 WriteOrderEval                  13   980  1096  1287  1308 
 WriteRelation                   35 
 WriteS                          24   274   275   291   295   299   303   307   311   315   319   323   472   475   534   537   755 
                                756   774   775   802   803   823   824   881   998  1021  1036  1055  1070  1082  1182  1220  1239 
                               1253  1263  1274  1297  1312  1327  1337  1339  1342  1348  1350  1359  1361  1363  1370  1373  1378 
                               1381  1384  1392  1560  1563 
 WriteVisitSequence              13   981  1097  1288  1323 

-_-
 _                             1513  1516  1519  1520  1526  1526  1526  1553 

end cross reference, 4382 occurrences of 278 identifiers.
