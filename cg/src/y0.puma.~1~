TRAFO GramYacc
TREE Tree
PUBLIC ParsSpec

GLOBAL {

FROM IO		IMPORT WriteS, WriteNl;
FROM StringMem	IMPORT WriteString;
FROM Idents	IMPORT NoIdent, tIdent;
FROM Texts	IMPORT WriteText;
FROM Sets	IMPORT IsElement, Include;
FROM TreeC2	IMPORT TreeIO;

FROM Tree	IMPORT
   NoTree	, tTree		, Input		, Reverse	,
   Class	, NoClass	, Child		, Attribute	,
   ActionPart	, HasSelector	, HasAttributes	, NoCodeAttr	,
   Referenced	, Options	, TreeRoot	, QueryTree	,
   ClassCount	, iNoTree	, itTree	, iModule	,
   f		, WI, WN	, ForallClasses	, ForallAttributes,
   Nonterminal	, Terminal	, IdentifyAttribute,
   Generated	, String	;

IMPORT Strings;

VAR	Node		,
	ActClass	,
	TheClass	,
	TheAttr		: tTree;
	ActActionIndex	,
	PrevActionIndex	: SHORTCARD;
	IsImplicit	: BOOLEAN;

PROCEDURE GetBaseClass (Class: tTree): tTree;
   BEGIN
      WHILE Class^.Class.BaseClass^.Kind # NoClass DO
	 Class := Class^.Class.BaseClass;
      END;
      RETURN Class;
   END GetBaseClass;

PROCEDURE IsLast (Class, Action: tTree): BOOLEAN;
   VAR Found, Last: BOOLEAN;
   BEGIN
      IsLast2 (Class, Action, Found, Last);
      RETURN Last;
   END IsLast;

PROCEDURE IsLast2 (t, Action: tTree; VAR pFound, pLast: BOOLEAN);
   VAR Found, Last: BOOLEAN;
   BEGIN
      CASE t^.Kind OF
      | Class:
	    IsLast2 (t^.Class.Attributes, Action, pFound, pLast);
	    IF pFound OR NOT pLast THEN RETURN; END;
	    IsLast2 (t^.Class.BaseClass, Action, pFound, pLast);
      | Child:
	    IsLast2 (t^.Child.Next, Action, Found, Last);
	    pFound := Found;
	    IF Found THEN
	       pLast := Last;
	    ELSE
	       pLast := FALSE;
	    END;
      | Attribute:
	    IsLast2 (t^.Attribute.Next, Action, pFound, pLast);
      | ActionPart:
	    IsLast2 (t^.ActionPart.Next, Action, Found, Last);
	    pFound := Found OR (Action = t);
	    IF Found THEN
	       pLast := Last;
	    ELSE
	       pLast := Last AND (Action = t);
	    END;
      ELSE
	    pFound := FALSE;
	    pLast  := TRUE;
      END;
   END IsLast2;
}

PROCEDURE ParsSpec (t: Tree)

Ag (..) :- {
	!%{!
	@# include "Scanner.h"@
	!/* EXPORT */!
	WriteText (f, ParserCodes^.Codes.Export);
	Node := Modules;
	WHILE Node^.Kind = Tree.Module DO
	  WriteText (f, Node^.Module.ParserCodes^.Codes.Export);
	  Node := Node^.Module.Next;
	END;
	!/* GLOBAL */!
	WriteText (f, ParserCodes^.Codes.Global);
	Node := Modules;
	WHILE Node^.Kind = Tree.Module DO
	   WriteText (f, Node^.Module.ParserCodes^.Codes.Global);
	   Node := Node^.Module.Next;
	END;
	!/* LOCAL */!
	WriteText (f, ParserCodes^.Codes.Local);
	Node := Modules;
	WHILE Node^.Kind = Tree.Module DO
	  WriteText (f, Node^.Module.ParserCodes^.Codes.Local);
	  Node := Node^.Module.Next;
	END;
	!!
	!void BeginParser ()!
	!{!
	WriteText (f, ParserCodes^.Codes.Begin);
	Node := Modules;
	WHILE Node^.Kind = Tree.Module DO
	  WriteText (f, Node^.Module.ParserCodes^.Codes.Begin);
	  Node := Node^.Module.Next;
	END;
	!}!
	!!
	!void CloseParser ()!
	!{!
	WriteText (f, ParserCodes^.Codes.Close);
	Node := Modules;
	WHILE Node^.Kind = Tree.Module DO
	  WriteText (f, Node^.Module.ParserCodes^.Codes.Close);
	  Node := Node^.Module.Next;
	END;
	!}!
	!!
        ParsVariant (Classes);
	!%}!
	!!
	!%union {!
	! tScanAttribute Scan;!
	Node := Classes;
	WHILE Node^.Kind = Class DO
	  WITH Node^.Class DO
	     IF {Nonterminal, Referenced, HasAttributes} <= Properties THEN
	       IF (String IN Properties) AND NOT (HasSelector IN Properties) THEN
		 ! yy! WN (Name); ! /* ! WI (Name); ! */ yy! WN (Name); !;!
	       ELSE
		 ! yy! WI (Selector); ! ! WI (Selector); !;!
	       END;
	     END;
	     Node := Next;
	  END;
	END;
	!}!
	!!
	!%token!
	ForallClasses (Classes, Token);
	!!
	PrecDefs (Precs);
	!!
	!%%!
	!!
	ForallClasses (Classes, ParsSpec);
}; .
Class (..) :- {
	IF {Nonterminal, Referenced} <= Properties THEN
	   TheClass := t;
	   Grammar (t);
	END;
}; .


PROCEDURE ParsVariant (t: Tree)

Class (..) :- {
	IF {Nonterminal, Referenced, HasAttributes} <= Properties THEN
	  !typedef struct { ! 
	  ForallAttributes (Attributes, RecordField);
	  GenExt (Extensions);
          IF (String IN Properties) AND NOT (HasSelector IN Properties) THEN
	    !} /* ! WI (Name); ! */ yy! WN (Name); !;!
	  ELSE
	    !} yy! WI (Selector); !;!
	  END;
	END;
	ParsVariant (Next);
}; .


PROCEDURE GenExt (t: Tree)

Class (..) :- {
	ForallAttributes (Attributes, RecordField);
	GenExt (Extensions);
	GenExt (Next);
}; .


PROCEDURE Token (t: Tree)

Class (..) :- {
	IF {Terminal, Referenced} <= Properties THEN
	   ! ! WI (Name); ! ! WN (Code); !!
	END;
}; .


PROCEDURE RecordField (t: Tree)

Attribute (..) :- {
	IF (NoCodeAttr * Properties) = {} THEN 
	   WI (Type); ! ! WI (Name); !; ! 
	END;
}; .


PROCEDURE PrecDefs (t: Tree)

LeftAssoc (..) :- {
	!%left ! PrecDefs (Names); !!
	PrecDefs (Next);
}; .
RightAssoc (..) :- {
	!%right! PrecDefs (Names); !!
	PrecDefs (Next);
}; .
NonAssoc (..) :- {
	!%none ! PrecDefs (Names); !!
	PrecDefs (Next);
}; .
Name (..) :- {
	! ! WI (Name);
	PrecDefs (Next);
}; .


PROCEDURE Grammar (t: Tree)

Class (..) :- {
	IF Extensions^.Kind = Tree.NoClass THEN		(* Low ? *)
	   WITH TheClass^.Class DO
	      IF String IN Properties THEN !yy! WN (Name); ELSE WI (Name); END;
	   END;
	   !	: ! 
	   ActClass := t;
	   PrevActionIndex := 0;
	   IsImplicit := FALSE;
	   ForallAttributes (t, Rule);
	   IF Prec # NoIdent THEN !%prec ! WI (Prec); ! ! END;
	   !;!
	   PrevActionIndex := 0;
	   IsImplicit := TRUE;
	   ForallAttributes (t, Implicit);
	ELSE
	   Rule (Extensions);
	END;
}; .


PROCEDURE Rule (t: Tree)

Class (..) :- {
	Grammar (t);
	Rule (Next);
}; .
Child (..) :- {
	IF {String, Nonterminal} <= Class^.Class.Properties THEN !yy! WN (Type); ELSE WI (Type); END; ! ! 
}; .
ActionPart (..) :- {
      IF NOT IsElement (ORD ('v'), Options) THEN
	IF IsLast (ActClass, t) THEN
	   !{! 
	   IF PrevActionIndex # 0 THEN
	      Node := GetBaseClass (TheClass);
	      WITH Node^.Class DO
		 ! $$.! 
		 IF String IN Properties THEN !yy! WN (Name); ELSE WI (Name); END;
		 ! = $! WN (PrevActionIndex); !.! 
		 IF String IN Properties THEN !yy! WN (Name); ELSE WI (Name); END;
		 !;!
	      END;
	   END;
	   Rule (Actions);
	   !} ! 
	ELSE
	   !xx! WN (Name); ! ! 
	END;
	PrevActionIndex := ParsIndex;
      END;
}; .
Assign (..) :- {
	Rule (Results); !=! Rule (Arguments); !;!
	Rule (Next);
}; .
Copy (..) :- {
	Rule (Results); ! = ! Rule (Arguments); !;!
	Rule (Next);
}; .
TargetCode (..) :- {
	Rule (Code); !;!
	Rule (Next);
}; .
Order (..) :- {
	Rule (Next);
}; .
Check (..) :- {
	IF Statement # NoTree THEN
	   IF Condition # NoTree THEN
	      !if (! Rule (Condition); !) ; else { ! Rule (Statement); ! }!
	   ELSE
	      Rule (Statement);
	   END;
	END;
	Rule (Next);
}; .
Designator (..) :- {
	TheAttr := IdentifyAttribute (ActClass, Selector);
	IF TheAttr # NoTree THEN
	  Node := TheAttr^.Child.Class;
	  IF Node # NoTree THEN
	    !$! 
	    IF NOT IsImplicit THEN
	       WN (TheAttr^.Child.ParsIndex);
	    ELSE
	       WN (SHORTINT (TheAttr^.Child.ParsIndex + 1 - ActActionIndex));
	    END;
	    IF Nonterminal IN Node^.Class.Properties THEN	(* nonterminal *)
	      Node := GetBaseClass (Node);
	      IF (String IN Node^.Class.Properties) AND NOT (HasSelector IN Node^.Class.Properties) THEN
	        !.yy! WN (Node^.Class.Name);
	      ELSE
	        !.! WI (Node^.Class.Name);
	      END;
	    ELSE						(* terminal *)
	      IF (String IN Node^.Class.Properties) AND NOT (HasSelector IN Node^.Class.Properties) THEN
	        !.Scan.yy! WN (Node^.Class.Code);
	      ELSE
	        !.Scan.! WI (Node^.Class.Selector);
	      END;
	    END;
	    !.! WI (Attribute);
	  ELSE
	    WI (Selector); !:! WI (Attribute);
	  END;
	ELSE
	  WI (Selector); !:! WI (Attribute);
	END;
	Rule (Next);
}; .
Ident (..) :- {
	TheAttr := IdentifyAttribute (ActClass, Attribute);
	Node := GetBaseClass (TheClass);
	IF TheAttr # NoTree THEN
	  IF (String IN Node^.Class.Properties) AND NOT (HasSelector IN Node^.Class.Properties) THEN
	    !$$.yy! WN (Node^.Class.Name); !.! WI (Attribute);
	  ELSE
	    !$$.! WI (Node^.Class.Name); !.! WI (Attribute);
	  END;
	ELSE
	  WI (Attribute);
	END;
	Rule (Next);
}; .
Any (..) :- {
	WriteString (f, Code);
	Rule (Next);
}; .
Anys (..) :- {
	Rule (Layouts);
	Rule (Next);
}; .
LayoutAny (..) :- {
	WriteString (f, Code);
	Rule (Next);
}; .


PROCEDURE Implicit (t: Tree)

ActionPart (..) :- {
	IF NOT (Generated IN Properties) AND NOT IsLast (ActClass, t) THEN
	   INCL (Properties, Generated);
	   ActActionIndex := ParsIndex;
	   !xx! WN (Name); !	: {! 
	   IF PrevActionIndex # 0 THEN
	      Node := GetBaseClass (TheClass);
	      WITH Node^.Class DO
		 ! $$.! 
		 IF String IN Properties THEN !yy! WN (Name); ELSE WI (Name); END;
		 ! = $! WN (SHORTINT (PrevActionIndex + 1 - ActActionIndex)); !.! 
		 IF String IN Properties THEN !yy! WN (Name); ELSE WI (Name); END;
		 !;!
	      END;
	   END;
	   Rule (Actions);
	   !} .!
	END;
	PrevActionIndex := ParsIndex;
}; .

