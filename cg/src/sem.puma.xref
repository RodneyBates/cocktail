     1 
     2 (* file sem.puma , of cg *) 
     3 (* NOTE: This file is run through cpp, which gripes about
c    4          single quotes inside comments. *) 
     5 
     6 (* Ich, Doktor Josef Grosch, Informatiker, 23.5.1989 *)
     7 (* Rodney Bates 11-95.  Compute Class.ClassChildCount and Child.ChildIndex. 
c    8    RMB Aug 96 
c    9      when constructing new actions for inserted copy rules in CopyRule, 
c   10      1) put each new action into a separate ActionPart 
c   11         (Otherwise, separate action subtrees, as pointed to by the Action
c   12          field of an instance,  get linked together, which is ok when they
c   13          are located starting with the Actions field of an ActionsPart,
c   14          but causes emission of duplicate actions when instances are
c   15          used to generate output.  
c   16      2) give each new action part a ParsIndex and a Name field. 
c   17         (Otherwise conventional generation of lalr is bad.) 
c   18    RMB Jun 98 Add use of Link property of a child to cause the child
c   19        not to be involved in automatic generation of attribute copy
c   20    RMB Oct 98 Add a colon to a label. 
c   21        rules. 
c   22    RMB July 99 Change mDesignator calls to add AttributePos field.
c   23    RMB July 99 change # include to reflect new build location
c   24    RMB July 99 Add VAR to rule local decls. 
c   25 *)
    26 
    27 TRAFO Semantics                                                               *     *
    28 TREE Tree                                                                     *     *
    29 PUBLIC Semantics                                                              *    27
    30 
    31 EXPORT { VAR TypeCount: SHORTCARD; }                                          *     *     *     *
    32 
    33 GLOBAL {                                                                      *
    34 
    35 FROM SYSTEM     IMPORT TSIZE, ADR;                                            *     *     *     *     *
    36 FROM General    IMPORT Max;                                                  35     *    35     *
    37 FROM IO         IMPORT StdOutput, WriteN, WriteS, WriteI, WriteNl;           36     *    36     *     *     *     *     *
    38 FROM DynArray   IMPORT MakeArray;                                            37     *    37     *
    39 FROM StringMem  IMPORT tStringRef;                                           38     *    38     *
    40 FROM Strings    IMPORT tString, IntToString, Append, Concatenate, ArrayToString,         39     *    39     *     *     *
                                                                                     *     *
    41                         Length, Char;                                         *     *
    42 FROM Idents     IMPORT WriteIdent, tIdent, NoIdent, MakeIdent, MaxIdent, GetString;      40     *    40     *     *     *
                                                                                     *     *     *
    43 FROM Texts      IMPORT MakeText;                                             42     *    42     *
    44 
    45 IMPORT Sets ;                                                                43     *
    46 FROM Sets       IMPORT                                                       43    45    45
    47    tSet         , MakeSet       , ReleaseSet    , AssignEmpty   ,             *     *     *     *
    48    IsElement    , Include       , IsEmpty       , Extract       ,             *     *     *     *
    49    Select       , Difference    , Complement    , ForallDo      ;             *     *     *     *
    50 
    51 FROM Relations  IMPORT tRelation, MakeRelation, IsCyclic, GetCyclics, Assign, IsRela\    46     *    46     *     *     *
                                                                                     *     *
      \ted;                                                                          *
    52 FROM Positions  IMPORT NoPosition;                                           51     *    51     *
    53 
    54 FROM Tree       IMPORT                                                       52    28    52
    55    NoTree       , tTree         , tInstance     , tInstancePtr  ,             *     *     *     *
    56    Computed     , Reverse       , Link          ,                             *     *     *
    57    Write         , Read          ,                                            *     *
    58    Inherited    , Synthesized   , Input         , Output        ,             *     *     *     *
    59    Stack        , Variable      , Ignore        , CopyDef       ,             *     *     *     *
    60    CopyUse      , Thread        , NoAttribute   , MultInhComp   ,             *     *     *     *
    61    Test         , Left          , Right         , NoCodeAttr    ,             *     *     *     *
    62    NonBaseComp  , Dummy         , Terminal      ,                             *     *     *
    63    Nonterminal  , HasChildren   , HasAttributes , HasActions    ,             *     *     *     *
    64    Reachable    , Referenced    , Implicit      , mActionPart   ,             *     *     *     *
    65    mClass       , mAttribute    , mChild        , mIdent        ,             *     *     *     *
    66    mCopy        , mDesignator   , MaxSet        , WriteName     ,             *     *     *     *
    67    Options      , TreeRoot      , ForallClasses , ForallAttributes,           *     *     *     *
    68    GrammarClass , cLNC          , WriteDependencies, WriteClass ,             *     *     *     *
    69    IdentifyClass, IdentifyAttribute, IdentifyModule, TypeNames  ,             *     *     *     *
    70    ClassCount   , nNoClass      , nNoAttribute  , nNoDesignator ,             *     *     *     *
    71    nNoAction    , nNoName       , iPosition     , itPosition    ,             *     *     *     *
    72    WriteCyclics , HasItem       , Mark          , Abstract      ,             *     *     *     *
    73    InitIdentifyClass, InitIdentifyClass2;                                     *     *
    74    
    75 IMPORT Relations, StringMem, Errors;                                         54    51    39     *
    76 
    77 CONST                                                                         *
    78 # include "../gen/consts1"                                                    *
    79 
    80 VAR                                                                          31
    81    CopyInherited, CopySynthesized, CopyThreaded,                              *     *     *
    82    ChildCount, AttributeCount, ActionCount, ActionName : INTEGER;             *     *     *     *     *
    83    ItemCount    ,                                                             *
    84    ChecksCount  ,                                                             *
    85    ReverseCount : INTEGER;                                                    *    82
    86    iNull        ,                                                             *
    87    Ident        : tIdent;                                                     *    42
    88    ClassNames   ,                                                             *
    89    SelectorNames,                                                             *
    90    VariantNames ,                                                             *
    91    PrecNames    ,                                                             *
    92    CodesUsed    ,                                                             *
    93    Results      ,                                                             *
    94    Arguments    ,                                                             *
    95    Cyclics      : tSet;                                                       *    47
    96    MaxInstCount ,                                                             *
    97    TokenCode    ,                                                             *
    98    DummyIndex   ,                                                             *
    99    i, j, k      : SHORTCARD;                                                  *     *     *    31
   100    InstanceSize : LONGINT;                                                    *     *
   101    IsAbstract   ,                                                             *
   102    Success      : BOOLEAN;                                                    *     *
   103    Module       ,                                                             *
   104    Node         ,                                                             *
   105    Attribute    ,                                                             *
   106    Child        ,                                                             *
   107    TheAction    ,                                                             *
   108    TheClass     ,                                                             *
   109    Class        : tTree;                                                      *    55
   110    String       ,                                                             *
   111    String2      : tString;                                                    *    40
   112    ActProperties: BITSET;                                                     *     *
   113 
   114 PROCEDURE LookUp (i: tIdent; t: tTree): BOOLEAN;                              *     *    99    87     *   109   102
   115    BEGIN                                                                      *
   116       WHILE t^.Kind = Tree.Name DO                                            *   114     *    54     *     *
   117          IF t^.Name.Name = i THEN RETURN TRUE; END;                           *   116   116     *   114     *     *     *
                                                                                     *
   118          t := t^.Name.Next;                                                 117     *   117     *
   119       END;                                                                  117
   120       RETURN FALSE;                                                         117     *
   121    END LookUp;                                                              119   114
   122 
   123 PROCEDURE ProcessIgnore2 (t: tTree): tTree;                                 114     *   118   114     *
   124    VAR r: tTree;                                                             80     *   123
   125    BEGIN                                                                    115
   126       IF t^.Kind # Tree.NoAttribute THEN                                    117   123   116   116    60   117
   127          t^.AttrOrAction.Next := ProcessIgnore2 (t^.AttrOrAction.Next);     126     *   118   123     *     *     *
   128       END;                                                                  121
   129       IF (t^.Kind = Tree.Child) AND (Ignore IN t^.Child.Properties) OR      126   127   126   126   106     *    59     *
                                                                                     *     *     *     *
   130          (t^.Kind = Tree.Attribute) AND (Ignore IN t^.Attribute.Properties) OR    129   129   129   105   129   129   129
                                                                                     *     *   129   129
   131          (t^.Kind = Tree.ActionPart) AND (Ignore IN t^.ActionPart.Properties) THEN      130   130   130     *   130   130
                                                                                   130     *     *   130   126
   132          RETURN t^.AttrOrAction.Next;                                       120   131   127   127
   133       END;                                                                  128
   134       RETURN t;                                                             132   132
   135    END ProcessIgnore2;                                                      133   127
   136 
   137 PROCEDURE CompBaseClass (t, b: tTree);                                      123     *   134     *   124
   138    BEGIN                                                                    125
   139       IF t^.Kind = Tree.Class THEN                                          129   137   131   131   109   131
   140          t^.Class.BaseClass := b;                                           139   139     *   137
   141          CompBaseClass (t^.Class.Next, b);                                  137   140   140   132   140
   142          CompBaseClass (t^.Class.Extensions, t);                            141   141   141     *     *
   143       END;                                                                  135
   144    END CompBaseClass;                                                       143   142
   145 
   146 PROCEDURE CompParsIndex (t: tTree; VAR Index: SHORTCARD);                   137     *   142   137   124     *    99
   147    VAR OldIndex : SHORTCARD;                                                146     *   146
   148    BEGIN                                                                    138
   149       OldIndex := Index;                                                    147   146
   150       CASE t^.Kind OF                                                         *   146   139     *
   151       | Tree.Class:                                                         139   142
   152          CompParsIndex (t^.Class.Attributes, Index);                        146   150   151     *   149
   153          CompParsIndex (t^.Class.Extensions, Index);                        152   152   152   142   152
   154          CompParsIndex (t^.Class.Next, OldIndex);                           153   153   153   141   149
   155       | Tree.Child:                                                         151   129
   156          INC (Index);                                                         *   153
   157          t^.Child.ParsIndex := Index;                                       154   155     *   156
   158          CompParsIndex (t^.Child.Next, Index);                              154   157   157   154   157
   159       | Tree.Attribute:                                                     155   130
   160          CompParsIndex (t^.Attribute.Next, Index);                          158   158   159   158   158
   161       | Tree.ActionPart:                                                    159   131
   162          INC (Index);                                                       156   160
   163          t^.ActionPart.ParsIndex := Index;                                  160   161   157   162
   164          INC (ActionName);                                                  162    82
   165          t^.ActionPart.Name := ActionName;                                  163   163   118   164
   166          CompParsIndex (t^.ActionPart.Next, Index);                         160   165   165   160   163
   167       ELSE                                                                    *
   168       END;                                                                  144
   169    END CompParsIndex;                                                       168   166
   170 
   171 (* Number children only, from 1. *)
   172 PROCEDURE CompChildIndex (t: tTree; VAR Index: SHORTCARD);                  146     *   166   146   147   166   147
   173    VAR OldIndex : SHORTCARD;                                                172   154   172
   174    BEGIN                                                                    148
   175       OldIndex := Index;                                                    173   172
   176       CASE t^.Kind OF                                                       150   172   150   150
   177       | Tree.Class:                                                         161   154
   178          CompChildIndex (t^.Class.Attributes, Index);                       172   176   177   152   175
   179          t^.Class.ClassChildCount := Index;                                 178   178     *   178
   180          CompChildIndex (t^.Class.Extensions, Index);                       178   179   179   153   179
   181          CompChildIndex (t^.Class.Next, OldIndex);                          180   180   180   166   175
   182       | Tree.Child:                                                         177   158
   183          INC (Index);                                                       164   180
   184          t^.Child.ChildIndex := Index;                                      181   182     *   183
   185          CompChildIndex (t^.Child.Next, Index);                             181   184   184   181   184
   186       | Tree.Attribute:                                                     182   160
   187          CompChildIndex (t^.Attribute.Next, Index);                         185   185   186   185   185
   188       | Tree.ActionPart:                                                    186   166
   189          CompChildIndex (t^.ActionPart.Next, Index);                        187   187   188   187   187
   190       ELSE                                                                  167
   191       END;                                                                  169
   192    END CompChildIndex;                                                      191   189
   193 
   194 PROCEDURE CompIndex (t: tTree; In: SHORTCARD; VAR Out: SHORTCARD);          172     *   189   172     *   173   173     *
                                                                                     *
   195    BEGIN                                                                    174
   196       CASE t^.Kind OF                                                       176   194   176   176
   197       | Tree.Class:                                                         188   181
   198          CompIndex (t^.Class.Attributes, In, Out);                          194   196   197   178   194   194
   199          t^.Class.AttrCount := Out;                                         198   198     *   198
   200          CompIndex (t^.Class.Extensions, Out, Out);                         198   199   199   180   199     *
   201          CompIndex (t^.Class.Next, In, Out);                                200   200   200   189   198   200
   202       | Tree.NoClass:                                                       197     *
   203       | Tree.Child:                                                         202   185
   204          INC (In);                                                          183   201
   205          t^.Child.AttrIndex := In;                                          201   203     *   204
   206          CompIndex (t^.Child.Next, In, Out);                                201   205   205   201   205   201
   207       | Tree.Attribute:                                                     203   187
   208          INC (In);                                                          204   206
   209          t^.Attribute.AttrIndex := In;                                      206   207   205   208
   210          CompIndex (t^.Attribute.Next, In, Out);                            206   209   209   206   209   206
   211       | Tree.ActionPart:                                                    207   189
   212          CompIndex (t^.ActionPart.Next, In, Out);                           210   210   211   210   210   210
   213       | Tree.NoAttribute:                                                   211   126
   214          Out := In;                                                         212   212
   215       END;                                                                  192
   216    END CompIndex;                                                           215   212
   217 
   218 PROCEDURE CompInstance (t: tTree; In: SHORTCARD; VAR Out: SHORTCARD);       194     *   212   194   214   194   194   214
                                                                                     *
   219    BEGIN                                                                    195
   220       CASE t^.Kind OF                                                       196   218   196   196
   221       | Tree.Class:                                                         213   201
   222          CompInstance (t^.Class.Attributes, In , Out);                      218   220   221   198   218   218
   223          t^.Class.InstCount := t^.Class.AttrCount + Out;                    222   222     *     *     *   199   222
   224          MaxInstCount := Max (MaxInstCount, t^.Class.InstCount);             96    36     *   223   223   223
   225          CompInstance (t^.Class.Extensions, Out, Out);                      222   224   224   200   223     *
   226          CompInstance (t^.Class.Next, In, Out);                             225   225   225   212   222   225
   227       | Tree.NoClass:                                                       221   202
   228       | Tree.Child:                                                         227   206
   229          t^.Child.InstOffset := In;                                         226   228     *   226
   230          IF t^.Child.Class # NoTree THEN                                    139   229   229   226    55   139
   231             CompInstance (t^.Child.Next, In + t^.Child.Class^.Class.AttrCount, Out);    226   230   230   226   229     *
                                                                                     *   230     *   223   226
   232          ELSE                                                               190
   233             CompInstance (t^.Child.Next, In, Out);                          231   231   231   231   231   231
   234          END;                                                               216
   235       | Tree.Attribute:                                                     228   210
   236          CompInstance (t^.Attribute.Next, In, Out);                         233   233   235   233   233   233
   237       | Tree.ActionPart:                                                    235   212
   238          CompInstance (t^.ActionPart.Next, In, Out);                        236   236   237   236   236   236
   239       | Tree.NoAttribute:                                                   237   213
   240          Out := In;                                                         238   238
   241       END;                                                                  234
   242    END CompInstance;                                                        241   238
   243 
   244 PROCEDURE CompBitCount (t: tTree; In: SHORTCARD; VAR Out: SHORTCARD);       218     *   238   218   240   218   218   240
                                                                                     *
   245    BEGIN                                                                    219
   246       CASE t^.Kind OF                                                       220   244   220   220
   247       | Tree.Class:                                                         239   231
   248          CompBitCount (t^.Class.Attributes, In, Out);                       244   246   247   222   244   244
   249          t^.Class.BitCount := Out;                                          248   248     *   248
   250          CompBitCount (t^.Class.Extensions, Out, Out);                      248   249   249   225   249     *
   251          CompBitCount (t^.Class.Next, In, Out);                             250   250   250   238   248   250
   252       | Tree.NoClass:                                                       247   227
   253       | Tree.Child:                                                         252   233
   254          IF {Input, Test, Dummy} * t^.Child.Properties = {} THEN INC (In); END;   230    58    61    62   251   253   131
                                                                                   230   208   251   242
   255          CompBitCount (t^.Child.Next, In, Out);                             251   254   254   251   254   251
   256       | Tree.Attribute:                                                     253   236
   257          IF {Input, Test, Dummy} * t^.Attribute.Properties = {} THEN INC (In); END;     254   254   254   254   255   256
                                                                                   254   254   254   255   254
   258          CompBitCount (t^.Attribute.Next, In, Out);                         255   257   257   255   257   255
   259       | Tree.ActionPart:                                                    256   238
   260          CompBitCount (t^.ActionPart.Next, In, Out);                        258   258   259   258   258   258
   261       | Tree.NoAttribute:                                                   259   239
   262          Out := In;                                                         260   260
   263       END;                                                                  257
   264    END CompBitCount;                                                        263   260
   265 
   266 PROCEDURE CompBitOffset (t: tTree; In: SHORTCARD; VAR Out: SHORTCARD);      244     *   260   244   262   244   244   262
                                                                                     *
   267    BEGIN                                                                    245
   268       CASE t^.Kind OF                                                       246   266   246   246
   269       | Tree.Class:                                                         261   251
   270          CompBitOffset (t^.Class.Attributes, In , Out);                     266   268   269   248   266   266
   271          CompBitOffset (t^.Class.Extensions, Out, Out);                     270   270   270   250   270     *
   272          CompBitOffset (t^.Class.Next, In, Out);                            271   271   271   260   270   271
   273       | Tree.NoClass:                                                       269   252
   274       | Tree.Child:                                                         273   255
   275          t^.Child.BitOffset := In;                                          272   274     *   272
   276          IF t^.Child.Class # NoTree THEN                                    257   275   275   272   230   257
   277             CompBitOffset (t^.Child.Next, In + t^.Child.Class^.Class.BitCount, Out);    272   276   276   272   275     *
                                                                                     *   276     *   249   272
   278          ELSE                                                               232
   279             CompBitOffset (t^.Child.Next, In, Out);                         277   277   277   277   277   277
   280          END;                                                               264
   281       | Tree.Attribute:                                                     274   258
   282          CompBitOffset (t^.Attribute.Next, In, Out);                        279   279   281   279   279   279
   283       | Tree.ActionPart:                                                    281   260
   284          CompBitOffset (t^.ActionPart.Next, In, Out);                       282   282   283   282   282   282
   285       | Tree.NoAttribute:                                                   283   261
   286          Out := In;                                                         284   284
   287       END;                                                                  280
   288    END CompBitOffset;                                                       287   284
   289 
   290 PROCEDURE InitInstance (t: tTree; Offset: SHORTCARD; InstancePtr: tInstancePtr);        266     *   284   266     *   266
                                                                                     *    55
   291    BEGIN                                                                    267
   292       CASE t^.Kind OF                                                       268   290   268   268
   293       | Tree.Class:                                                         285   277
   294          InitInstance (t^.Class.BaseClass , Offset, InstancePtr);           290   292   293   140   290   290
   295          InitInstance (t^.Class.Attributes, Offset, InstancePtr);           294   294   294   270   294   294
   296       | Tree.NoClass:                                                       293   273
   297       | Tree.Child:                                                         296   279
   298          WITH InstancePtr^ [t^.Child.AttrIndex] DO                            *   295   295   297   209   116
   299             Attribute  := t;                                                282   298
   300             Properties := t^.Child.Properties + {Left};                     257   299   298     *    61
   301             Action     := ADR (Action);                                       *    35     *
   302          END;                                                               288
   303          IF t^.Child.Class # NoTree THEN                                    276   300   300   295   276   276
   304             InitInstance1 (t^.Child.Class, t, Offset + t^.Child.InstOffset, Instance\     *   303   303   303     *   295
                                                                                     *     *   229
      \Ptr);                                                                       298
   305          END;                                                               302
   306          InitInstance (t^.Child.Next, Offset, InstancePtr);                 295   304   304   284   304   304
   307       | Tree.Attribute:                                                     297   299
   308          WITH InstancePtr^ [t^.Attribute.AttrIndex] DO                      298   306   306   307   298   298
   309             Attribute  := t;                                                308   308
   310             Properties := t^.Attribute.Properties + {Left};                 300   309   309     *   300
   311             Action     := ADR (Action);                                     301   301     *
   312          END;                                                               305
   313          InitInstance (t^.Attribute.Next, Offset, InstancePtr);             306   310   310   306   306   308
   314       | Tree.ActionPart:                                                    307   284
   315          InitInstance (t^.ActionPart.Next, Offset, InstancePtr);            313   313   314   313   313   313
   316       | Tree.NoAttribute:                                                   314   285
   317       END;                                                                  312
   318    END InitInstance;                                                        317   315
   319 
   320 PROCEDURE InitInstance1 (t, selector: tTree; Offset: SHORTCARD; InstancePtr: tInstan\   290   304   315     *   290   315
                                                                                   290   315
      \cePtr);                                                                     290
   321    BEGIN                                                                    291
   322       CASE t^.Kind OF                                                       292   320   292   292
   323       | Tree.Class:                                                         316   304
   324          InitInstance1 (t^.Class.BaseClass , selector, Offset, InstancePtr);      320   322   323   294   320   320   320
   325          InitInstance1 (t^.Class.Attributes, selector, Offset, InstancePtr);      324   324   324   295   324   324   324
   326       | Tree.NoClass:                                                       323   296
   327       | Tree.Child:                                                         326   306
   328          WITH InstancePtr^ [Offset + t^.Child.AttrIndex] DO                 308   325   325   325   327   308   308
   329             Selector   := selector;                                           *   325
   330             Attribute  := t;                                                313   328
   331             Properties := t^.Child.Properties + {Right};                    310   330   328     *    61
   332             Action     := ADR (Action);                                     311   311     *
   333          END;                                                               318
   334          InitInstance1 (t^.Child.Next, selector, Offset, InstancePtr);      325   331   331   315   329   328   328
   335       | Tree.Attribute:                                                     327   330
   336          WITH InstancePtr^ [Offset + t^.Attribute.AttrIndex] DO             328   334   334   334   335   328   328
   337             Selector   := selector;                                         329   334
   338             Attribute  := t;                                                336   336
   339             Properties := t^.Attribute.Properties + {Right};                331   338   338     *   331
   340             Action     := ADR (Action);                                     332   332     *
   341          END;                                                               333
   342          InitInstance1 (t^.Attribute.Next, selector, Offset, InstancePtr);        334   339   339   334   337   336   336
   343       | Tree.ActionPart:                                                    335   315
   344          InitInstance1 (t^.ActionPart.Next, selector, Offset, InstancePtr);       342   342   343   342   342   342   342
   345       | Tree.NoAttribute:                                                   343   316
   346       END;                                                                  341
   347    END InitInstance1;                                                       346   344
   348 
   349 VAR relation    : tRelation;                                                266     *    51
   350 VAR result      : INTEGER;                                                  349     *    85
   351 
   352 PROCEDURE EnterDependency (argument: Sets.tElement);                        320     *     *    46     *
   353    BEGIN                                                                    321
   354       Relations.Include (relation, result, argument);                        75    48   349   350   352
   355    END EnterDependency;                                                     347   352
   356 
   357 VAR MultipleInheritedActions    : BOOLEAN;                                  350     *   114
   358 
   359 PROCEDURE CompDP1 (t: tTree; VAR Set: tSet; Usage: INTEGER; NonBase, Check: BOOLEAN)\   352     *   344   320   357     *
                                                                                    95     *   350     *     *   357
      \;
   360    VAR Attribute, ChildsClass   : tTree;                                    359   342     *   359
   361    VAR Offset   : SHORTCARD;                                                360   344   320
   362    BEGIN                                                                    353
   363       CASE t^.Kind OF                                                       322   359   322   322
   364       | Tree.Class:                                                         345   325
   365             CompDP1 (t^.Class.BaseClass , Set, Usage, FALSE  , Check);      359   363   364   324   359   359   120   359
   366             MultipleInheritedActions := FALSE;                              357   365
   367             CompDP1 (t^.Class.Attributes, Set, Usage, NonBase, Check);      365   365   365   325   365   365   359   365
   368       | Tree.NoClass:                                                       364   326
   369       | Tree.Attribute:                                                     368   360
   370             IF t^.Attribute.AttrIndex # DummyIndex THEN         (* HAGs *)        303   367   369   336    98   303
   371                Relations.Include (relation, DummyIndex, t^.Attribute.AttrIndex);        354   354   354   370   370   370
                                                                                   370
   372             END;                                                            355
   373             CompDP1 (t^.Attribute.Next, Set, Usage, NonBase, Check);        367   371   371   344   367   367   367   367
   374       | Tree.Child:                                                         369   334
   375             ChildsClass := t^.Child.Class;                                  360   373   374   367
   376             IF ChildsClass # NoTree THEN                                    370   375   303   370
   377                IF NOT (Input IN t^.Child.Properties) THEN       (* HAGs *)        376     *   257   131   375   375   339
                                                                                   376
   378                   Relations.Include (relation, DummyIndex, t^.Child.AttrIndex);   371   371   371   371   377   377   371
   379                   FOR i := 1 TO ChildsClass^.Class.AttrCount DO               *   117     *   376   375   231   336
   380                      Relations.Include (relation, Class^.Class.AttrCount + t^.Child.\   378   378   378   379     *   379
                                                                                   378   378
      \InstOffset + i, t^.Child.AttrIndex);                                        304   379     *     *   378
   381                   END;                                                      372
   382                END;                                                         381
   383 
   384                Attribute := IdentifyAttribute (ChildsClass, iNull);         373    69   379    86
   385                Offset := Class^.Class.AttrCount + t^.Child.InstOffset + Attribute^.C\   361   380     *   380   380   380
                                                                                   380   384
      \hild.AttrIndex;                                                               *   380
   386                Relations.Include (relation, DummyIndex, Offset);            380   380   380   378   385
   387                INCL (Class^.Class.Instance^[Offset].Properties, Right);       *   385     *     *   386   377   339
   388             END;                                                            382
   389             CompDP1 (t^.Child.Next, Set, Usage, NonBase, Check);            373   385   385   373   373   373   373   373
   390       | Tree.ActionPart:                                                    374   344
   391             IF MultInhComp IN t^.ActionPart.Properties THEN MultipleInheritedActions\   377    60   377   389   390   387
                                                                                   377   366
      \ := TRUE; END;                                                              117   388
   392             CompDP1 (t^.ActionPart.Actions, Set, Usage, NonBase, Check);    389   391   391     *   389   389   389   389
   393             CompDP1 (t^.ActionPart.Next   , Set, Usage, NonBase, Check);    392   392   392   389   392   392   392   392
   394       | Tree.NoAttribute:                                                   390   345
   395       | Tree. Assign :                                                      394    51
   396             IF IsCopy (t^.Assign.Arguments) THEN t^.Kind := Tree.Copy; END;       391     *   393   395    94   391     *
                                                                                   363   395     *   391
   397             AssignEmpty (Results  );                                         47    93
   398             AssignEmpty (Arguments);                                        397   396
   399             CompDP1 (t^.Assign.Results  , Results  , Write, NonBase, TRUE );      393   396   396   397     *    57   393
                                                                                   391
   400             CompDP1 (t^.Assign.Arguments, Arguments, Read , NonBase, FALSE);      399   399   399   398     *    57   399
                                                                                   366
   401             IF IsEmpty (Results) THEN                                       396    48   399   396
   402                ? AssignmentLhsNamesNoAttributes E ?                           *     *
   403             END;                                                            396
   404             WHILE NOT IsEmpty (Results) DO                                  116   377   401   401   379
   405                result := Extract (Results);                                 354    48   404
   406                WITH Class^.Class.Instance^[result] DO                       336   387     *   387   405   404
   407                   IF (Action = ADR (Action)) OR (MultInhComp IN Properties) OR NOT M\   401   340   340     *   130   391
                                                                                   391   391     *   404
      \ultipleInheritedActions THEN                                                391   401
   408                      Action := t;                                           407   400
   409                      IF t^.Kind = Tree.Copy THEN CopyArg := Select (Arguments); END;    407   408   396   396   396   407
                                                                                     *    49   400   403
   410                   END;                                                      409
   411                END;                                                         410
   412                ForallDo (Arguments, EnterDependency);                        49   409   355
   413             END;                                                            411
   414             CompDP1 (t^.Assign.Next, Set, Usage, NonBase, Check);           400   409   400   393   393   393   400   393
   415       | Tree. Copy :                                                        409   409
   416             AssignEmpty (Results  );                                        398   405
   417             AssignEmpty (Arguments);                                        416   412
   418             CompDP1 (t^.Copy.Results  , Results  , Write, NonBase, TRUE );        414   414   415   416     *   399   414
                                                                                   399
   419             CompDP1 (t^.Copy.Arguments, Arguments, Read , NonBase, TRUE );        418   418   418   417     *   400   418
                                                                                   418
   420             IF IsEmpty (Results) THEN                                       409   404   418   409
   421                ? CopyRuleLhsNamesNoAttributes E ?                             *   402
   422             END;                                                            413
   423             WHILE NOT IsEmpty (Results) DO                                  404   407   420   420   406
   424                result := Extract (Results);                                 406   405   423
   425                WITH Class^.Class.Instance^[result] DO                       406   406     *   406   424   423
   426                   IF (Action = ADR (Action)) OR (MultInhComp IN Properties) OR NOT M\   420   408   407     *   407   407
                                                                                   407   407     *   423
      \ultipleInheritedActions THEN                                                407   420
   427                      Action  := t;                                          426   419
   428                      CopyArg := Select (Arguments);                         409   409   419
   429                   END;                                                      422
   430                END;                                                         429
   431                ForallDo (Arguments, EnterDependency);                       412   428   412
   432             END;                                                            430
   433             CompDP1 (t^.Copy.Next, Set, Usage, NonBase, Check);             419   427   419   414   414   414   419   414
   434       | Tree. TargetCode :                                                  415     *
   435             AssignEmpty (Results  );                                        417   424
   436             AssignEmpty (Arguments);                                        435   431
   437             CompDP1 (t^.TargetCode.Results, Results  , Write, NonBase, TRUE );    433   433   434   435     *   418   433
                                                                                   419
   438             CompDP1 (t^.TargetCode.Code   , Arguments, Read , NonBase, FALSE);    437   437   437     *   436   419   437
                                                                                   400
   439             Difference (Arguments, Results);                                 49   438   437
   440             IF IsEmpty (Results) AND IsCode (t^.TargetCode.Code) THEN       426   423   439   131     *   438   438   438
                                                                                   426
   441                ? BlockLhsNamesNoAttributes E ?                                *   421
   442             END;                                                            432
   443             WHILE NOT IsEmpty (Results) DO                                  423   426   440   440   425
   444                result := Extract (Results);                                 425   424   443
   445                WITH Class^.Class.Instance^[result] DO                       425   425     *   425   444   443
   446                   IF (Action = ADR (Action)) OR (MultInhComp IN Properties) OR NOT M\   440   427   426     *   426   426
                                                                                   426   426     *   443
      \ultipleInheritedActions THEN                                                426   440
   447                      Action  := t;                                          446   440
   448                   END;                                                      442
   449                END;                                                         448
   450                ForallDo (Arguments, EnterDependency);                       431   439   431
   451             END;                                                            449
   452             CompDP1 (t^.TargetCode.Next, Set, Usage, NonBase, Check);       438   447   440   433   433   433   438   433
   453       | Tree. Order:                                                        434     *
   454             AssignEmpty (Results  );                                        436   444
   455             AssignEmpty (Arguments);                                        454   450
   456             CompDP1 (t^.Order.Results  , Results  , Read, NonBase, TRUE );        452   452   453   454     *   438   452
                                                                                   437
   457             CompDP1 (t^.Order.Arguments, Arguments, Read, NonBase, TRUE );        456   456   456   455     *   456   456
                                                                                   456
   458             WHILE NOT IsEmpty (Results) DO                                  443   446   443   456   445
   459                result := Extract (Results);                                 445   444   458
   460                ForallDo (Arguments, EnterDependency);                       450   457   450
   461             END;                                                            451
   462             CompDP1 (t^.Order.Next, Set, Usage, NonBase, Check);            457   457   457   452   452   452   457   452
   463       | Tree. Check :                                                       453   462
   464             IF t^.Check.Results # NoTree THEN                               446   462   463   459   376   446
   465                AssignEmpty (Results  );                                     455   464
   466                AssignEmpty (Arguments);                                     465   460
   467                CompDP1 (t^.Check.Results, Results, Write, NonBase, FALSE);        462   464   464   465     *   437   462
                                                                                   438
   468             END;                                                            461
   469             IF t^.Check.Condition # NoTree THEN                             464   467   467     *   464   464
   470                CompDP1 (t^.Check.Condition, Arguments, Read, NonBase, FALSE);     467   469   469   469   466   457   467
                                                                                   467
   471             END;                                                            468
   472             IF t^.Check.Statement # NoTree THEN                             469   470   470     *   469   469
   473                CompDP1 (t^.Check.Statement, Arguments, Read, NonBase, FALSE);     470   472   472   472   470   470   470
                                                                                   470
   474             ELSE                                                            278
   475                ? CheckWithoutStatement W ?                                    *     *
   476             END;                                                            471
   477             CompDP1 (t^.Check.Actions, Arguments, Read, NonBase, FALSE);    473   473   473   392   473   473   473   473
   478             IF t^.Check.Results # NoTree THEN                               472   477   477   467   472   472
   479                result := Extract (Results);                                 459   459   478
   480                Class^.Class.Instance^[result].Action := t;                  445     *   445   479   447   478
   481                ForallDo (Arguments, EnterDependency);                       460   477   460
   482                CompDP1 (t^.Check.Next, Set, Usage, NonBase, Check);         477   480   478   462   462   462   477     *
   483             END;                                                            476
   484       | Tree.NoAction:                                                      463     *
   485       | Tree. Designator :                                                  484     *
   486             Attribute := IdentifyAttribute (Class, t^.Designator.Selector);       385   384   480   482   485   337
   487             IF (Attribute # NoTree) AND (Attribute^.Kind = Tree.Child) THEN       478   486   478   440     *   409   485
                                                                                   389   478
   488                ChildsClass := Attribute^.Child.Class;                       384   487   487   486
   489                Offset := Class^.Class.AttrCount + Attribute^.Child.InstOffset;    387   488     *   385   488   488   385
   490                INCL (Attribute^.Child.Properties, Read);                    387   489   489   446   477
   491                IF ChildsClass # NoTree THEN                                 487   488   487   487
   492                   Attribute := IdentifyAttribute (ChildsClass, t^.Designator.Attribu\   490   486   491   486   486
      \te);                                                                          *
   493                   IF Attribute # NoTree THEN                                491   492   491   491
   494                      Include (Set, Offset + Attribute^.Child.AttrIndex);    386   482   489   493   490   385
   495                      INCL (Attribute^.Child.Properties, Usage);             490   494   494   490   482
   496                      IF Usage = Write THEN                                  493   495   467   493
   497                         INCL (Attribute^.Child.Properties, Inherited);      495   495   495   495    58
   498                         INCL (Class^.Class.Instance^ [Offset + Attribute^.Child.Attr\   497   489     *   480   494   497
                                                                                   497
      \Index].Properties, Computed);                                               494   497    56
   499                         IF Synthesized IN Attribute^.Child.Properties THEN        496    58   446   498   498   498   496
   500                            ? InheritedUseOfSynthesizedAttribute E Ident t^.Designato\     *   441    87   492
      \r.Attribute ?                                                               492   499
   501                         END;                                                483
   502                         WITH Class^.Class.Instance^ [Offset + Attribute^.Child.AttrI\   445   498     *   498   498   500
                                                                                   499
      \ndex] DO                                                                    498   458
   503                            IF NonBase AND NOT MultipleInheritedActions AND (NonBaseC\   499   482   487   458   446     *
      \omp IN Properties) AND                                                       62   499   499     *
   504                               NOT (MultInhComp IN Properties) THEN          503   446   503   503   499
   505                               ? AttributeMultipleComputed E Ident t^.Designator.Attr\     *   500   500   500   500
      \ibute ?                                                                     502
   506                            END;                                             501
   507                            IF NOT MultipleInheritedActions OR (MultInhComp IN Proper\   503   504   503   446   504   504
      \ties) THEN                                                                  504   504
   508                               EXCL (Properties, MultInhComp);                 *   507   507
   509                               IF NonBase THEN INCL (Properties, NonBaseComp); END;      507   503   507   498   508   503
                                                                                   506
   510                               IF MultipleInheritedActions THEN INCL (Properties, Mul\   509   507   509   509   509
      \tInhComp); END;                                                             508   509
   511                            END;                                             510
   512                         END;                                                511
   513                      END;                                                   512
   514                   ELSIF Check THEN                                            *   482   510
   515                      ? ChildsClassHasNoSuchAttribute E Ident t^.Designator.Attribute\     *   505   505   505   505   505
      \ ?
   516                   END;                                                      513
   517                END;                                                         516
   518             ELSIF Check THEN                                                514   514   514
   519                ? NoSuchChild E Ident t^.Designator.Selector ?                 *   515   515   515   515   486
   520             END;                                                            517
   521             CompDP1 (t^.Designator.Next, Set, Usage, NonBase, Check);       482   519   519   482   494   496   509   518
   522       | Tree. Ident :                                                       487   519
   523             Attribute := IdentifyAttribute (Class, t^.Ident.Attribute);     515   492   502   521   522     *
   524             IF Attribute # NoTree THEN                                      510   523   493   518
   525                Include (Set, Attribute^.Child.AttrIndex);                   494   521   524   502   502
   526                INCL (Attribute^.Child.Properties, Usage);                   510   525   525   510   521
   527                IF Usage = Write THEN                                        524   526   496   524
   528                   INCL (Attribute^.Child.Properties, Synthesized);          526   526   526   526   499
   529                   INCL (Class^.Class.Instance^ [Attribute^.Child.AttrIndex].Properti\   528   523     *   502   528   528
                                                                                   525
      \es, Computed);                                                              528   498
   530                   IF Inherited IN Attribute^.Child.Properties THEN          527   497   507   529   529   529   527
   531                      ? SynthesizedUseOfInheritedAttribute E Ident t^.Ident.Attribute\     *   519   523   523     *   530
      \ ?
   532                   END;                                                      520
   533                   WITH Class^.Class.Instance^ [Attribute^.Child.AttrIndex] DO     502   529     *   529   531   530   529
                                                                                   502
   534                      IF NonBase AND NOT MultipleInheritedActions AND (NonBaseComp IN\   530   521   503   507   510     *
                                                                                   509   530
      \ Properties) AND                                                            530     *
   535                         NOT (MultInhComp IN Properties) THEN                534   510   534   534   530
   536                         ? AttributeMultipleComputed E Ident t^.Ident.Attribute ?        505   531   531   531     *   533
   537                      END;                                                   532
   538                      IF NOT MultipleInheritedActions OR (MultInhComp IN Properties) \   534   535   534   507   535   535
                                                                                   535
      \THEN                                                                        535
   539                         EXCL (Properties, MultInhComp);                     508   538   538
   540                         IF NonBase THEN INCL (Properties, NonBaseComp); END;      538   534   538   529   539   534   537
   541                         IF MultipleInheritedActions THEN INCL (Properties, MultInhCo\   540   538   540   540   540
      \mp); END;                                                                   539   540
   542                      END;                                                   541
   543                   END;                                                      542
   544                END;                                                         543
   545             ELSIF Check THEN                                                518   521   541
   546                ? NoSuchAttribute E Ident t^.Ident.Attribute ?                 *   536   536   536     *   536
   547             END;                                                            544
   548             CompDP1 (t^.Ident.Next, Set, Usage, NonBase, Check);            521   546   546   521   525   527   540   545
   549       | Tree.Remote:                                                        522     *
   550             CompDP1 (t^.Remote.Designators, Set, Usage, NonBase, Check);    548   548   549     *   548   548   548   548
   551             CompDP1 (t^.Remote.Next, Set, Usage, NonBase, Check);           550   550   550   548   550   550   550   550
   552       | Tree.Any:                                                           549     *
   553             CompDP1 (t^.Any.Next, Set, Usage, NonBase, Check);              551   551   552   551   551   551   551   551
   554       | Tree.Anys:                                                          552     *
   555             CompDP1 (t^.Anys.Next, Set, Usage, NonBase, Check);             553   553   554   553   553   553   553   553
   556       | Tree.NoDesignator:                                                  554     *
   557       END;                                                                  547
   558    END CompDP1;                                                             557   555
   559 
   560 PROCEDURE IsCode (t: tTree): BOOLEAN;                                       359   440   555   360   359
   561    BEGIN                                                                    362
   562       CASE t^.Kind OF                                                       363   560   487   363
   563       | Tree.Designator                                                     556   521
   564       , Tree.Ident                                                          563   548
   565       , Tree.Remote      : RETURN TRUE;                                     564   551   134   457
   566       | Tree.Any         : RETURN IsCode (t^.Any.Next);                     565   553   565   560   562     *   555
   567       | Tree.Anys        : RETURN IsCode (t^.Anys.Next);                    566   555   566   566   566     *   566
   568       | Tree.NoDesignator: RETURN FALSE;                                    567   556   567   477
   569       END;                                                                  558
   570    END IsCode;                                                              569   567
   571 
   572 PROCEDURE CopyTree (t: tTree): tTree;                                       560     *   567   560     *
   573    BEGIN                                                                    561
   574       CASE t^.Kind OF                                                       562   572   562   562
   575       | Tree.Attribute: WITH t^.Attribute DO                                568   546   533   574     *   533
   576             RETURN mAttribute (CopyTree (Next), Name, Type, Properties, Pos);     568    65   572   567   165     *   541
                                                                                     *
   577          END;                                                               570
   578       | Tree.Child: WITH t^.Child DO                                        575   533   575   575     *   575
   579             RETURN mChild (CopyTree (Next), Name, Type, Properties, Pos);   576    65   576   576   576   576   576   576
   580          END;                                                               577
   581       | Tree.ActionPart: WITH t^.ActionPart DO                              578   393   578   578     *   578
   582             RETURN mActionPart (CopyTree (Next), Actions);                  579    64   579   579   477
   583          END;                                                               580
   584       | Tree.NoAttribute:                                                   581   394
   585          RETURN nNoAttribute;                                               582    70
   586       END;                                                                  583
   587    END CopyTree;                                                            586   582
   588 
   589 PROCEDURE ExpandMultiple (Class: tTree);                                    572     *   533   572
   590    VAR Node, class: tTree;                                                  361   104     *   589
   591    BEGIN                                                                    573
   592       WITH Class^.Class DO                                                  581   589     *   581
   593          IF NOT (Mark IN Properties) THEN                                   541   538    72   538   579   545
   594             INCL (Properties, Mark);                                        541   593   593
   595             IF BaseClass^.Kind = Tree.Class THEN ExpandMultiple (BaseClass); END;       593   365   574   584   592   593
                                                                                   589     *   587
   596             Node := Names;                                                  590     *
   597             WHILE Node^.Kind = Tree.Name DO                                 458   596   595   595   579   592
   598                WITH Node^.Name DO                                           592   597   597   597
   599                   class := IdentifyClass (TreeRoot^.Ag.Classes, Name);      590    69    67     *     *   598
   600                   IF class # NoTree THEN                                    595   599   524   595
   601                      ExpandMultiple (class);                                595   600
   602                      TheClass := Class;                                     108   595
   603                      ForallAttributes (class, ExpandMultiple2);              67   601     *
   604                   END;                                                      595
   605                   Node := Next;                                             598   582
   606                END;                                                         604
   607             END;                                                            606
   608             EXCL (Properties, Mark);                                        539   594   594
   609          END;                                                               607
   610       END;                                                                  609
   611 END ExpandMultiple;                                                         610   601
   612 
   613 PROCEDURE AppendAttr (VAR Attributes: tTree; Attribute: tTree);             589     *   590   367   590   575     *
   614    BEGIN                                                                    591
   615       IF Attributes^.Kind = NoAttribute THEN                                600   613   597   584   600
   616          Attribute^.AttrOrAction.Next := Attributes;                        613   132   605   615
   617          Attributes := Attribute;                                           616   616
   618       ELSE                                                                  474
   619          AppendAttr (Attributes^.AttrOrAction.Next, Attribute);             613   617   616   616   617
   620       END;                                                                  611
   621    END AppendAttr;                                                          620   619
   622 }
   623 
   624 BEGIN   {                                                                   614
   625    ItemCount            := 0;                                                83
   626    ChecksCount          := 0;                                                84
   627    MaxInstCount         := 0;                                               224
   628    CopyInherited        := 0;                                                81
   629    CopySynthesized      := 0;                                                81
   630    CopyThreaded         := 0;                                                81
   631    IntToString (0, String); iNull := MakeIdent (String);                     40   110   384    42     *
   632 }
   633 
   634 PROCEDURE Semantics (t: Tree)                                               613    29   581   597
   635 
   636 Ag (..) :- {                                                                599
   637         InitIdentifyClass (Classes);                                         73   599
   638         ForallClasses (Classes, StampItems);                                 67   637     *
   639         StampItems (Modules);                                               638     *
   640         ExpandProps (Props);                                                  *     *
   641         ExpandProps (Modules);                                              640   639
   642         IF Ignore IN Properties THEN                                        615   131   593   608   615
   643            ProcessIgnore (ParserCodes);                                       *     *
   644            ProcessIgnore (TreeCodes);                                       643     *
   645            ProcessIgnore (EvalCodes);                                       644     *
   646         END;                                                                621
   647         ProcessIgnore (Decls);                                              645     *
   648         ForallClasses (Classes, ProcessIgnore);                             638   638   647
   649         ProcessIgnore (Modules);                                            648   641
   650         ExpandModules (Decls);                                                *   647
   651         ExpandModules (Modules);                                            650   649
   652       IF IsElement (ORD ('c'), Options) THEN                                642    48     *    67   642
   653         ArrayToString ("bool", String);                                      40   631
   654       ELSE                                                                  618
   655         ArrayToString ("BOOLEAN", String);                                  653   653
   656       END;                                                                  646
   657         Ident := MakeIdent (String);                                        564   631   655
   658         TypeCount := MaxIdent ();                                            31    42
   659         MakeSet (TypeNames, TypeCount);                                      47    69   658
   660         Include (TypeNames, Ident);                                         525   659   657
   661         Semantics (Classes);                                                634   648
   662 }; .
   663 Class (..) :- {                                                             602
   664         CompBaseClass (t, nNoClass);                    (* ast *)           144   634    70
   665         ForallClasses (t, ExpandMultiple);                                  648   664   611
   666         ClassCount := 0;                                                     70
   667         MakeSet (CodesUsed, MaxIdent ());                                   659    92   658
   668         ForallClasses (t, CountClasses);                                    665   665     *
   669         ForallClasses (t, CheckReverse);                                    668   668     *
   670         INCL (t^.Class.Properties, Referenced);                             594   669   663   642    64
   671         CompReachable (t);                                                    *   670
   672 
   673       IF IsElement (ORD ('x'), Options) OR                                  652   652   652   652   538
   674          IsElement (ORD ('z'), Options) OR                                  673   673   673   673
   675          IsElement (ORD ('u'), Options) THEN                                674   674   674   652
   676         TokenCode := 0;                                                      97
   677         ForallClasses (t, CodeTerminals);                                   669   671     *
   678         ActionName := 0;                                                    165
   679         i := 0;                                                             380
   680         CompChildIndex (t, i);                                              192   677   679
   681         i := 0;                                                             680
   682         CompParsIndex (t, i);                                               169   680   681
   683         ForallClasses (t, CheckUsage2);                                     677   682     *
   684       END;                                                                  656
   685 
   686         ForallClasses (t, ExpandChecks);                                    683   683     *
   687         ForallClasses (t, Identify);                                        686   686     *
   688         MakeSet (ClassNames, MaxIdent ());                                  667    88   667
   689         MakeSet (SelectorNames, MaxIdent ());                               688    89   688
   690         MakeSet (VariantNames, MaxIdent ());                                689    90   689
   691         MakeSet (PrecNames, MaxIdent ());                                   690    91   690
   692         CheckNames (TreeRoot^.Ag.Precs);                                      *   599   636     *
   693         ForallClasses (t, CheckNames);                                      687   687   692
   694         ReleaseSet (ClassNames);                                             47   688
   695         ReleaseSet (SelectorNames);                                         694   689
   696         ReleaseSet (VariantNames);                                          695   690
   697         ReleaseSet (PrecNames);                                             696   691
   698         ReleaseSet (CodesUsed);                                             697   667
   699         ForallClasses (t, CheckDesignator);                                 693   693     *
   700         CompBitCount (t, 1, i);                                             264   699   682
   701         CompBitOffset (t, 0, i);                                            288   700   700
   702 
   703       IF IsElement (ORD ('.'), Options) THEN            (* ag *)            673   675   675   675   675
   704         CompIndex (t, 0, i);                                                216   701   701
   705         CompInstance (t, 0, i);                                             242   704   704
   706         MakeSet (MaxSet, MaxInstCount);                                     691    66   627
   707         Complement (MaxSet);                                                 49   706
   708         ForallClasses (t, InitInstance0);                                   699   705     *
   709         ForallClasses (t, CompDP);                                          708   708     *
   710       IF IsElement (ORD ('2'), Options) THEN                                703   703   703   703   703
   711         WriteNl (StdOutput);                                                 37    37
   712         WriteS (StdOutput, "Inherited Attribute Computation Rules"); WriteNl (StdOut\    37   711   711
      \put);                                                                         *
   713         WriteS (StdOutput, "-------------------------------------"); WriteNl (StdOut\   712   712   712
      \put);                                                                         *
   714         WriteNl (StdOutput);                                                713   713
   715       END;                                                                  684
   716         ForallClasses (t, CopyProperties);                                  709   709     *
   717         ForallClasses (t, CheckInherited);                                  716   716     *
   718       IF IsElement (ORD ('1'), Options) THEN                                710   710   710   710   710
   719         WriteNl (StdOutput);                                                714   714
   720         WriteS (StdOutput, "Inserted Copy Rules"); WriteNl (StdOutput);     713   719   719     *
   721         WriteS (StdOutput, "-------------------"); WriteNl (StdOutput);     720   720   720     *
   722         WriteNl (StdOutput);                                                721   721
   723       END;                                                                  715
   724         Success := TRUE;                                                    102   565
   725         ForallClasses (t, CheckComplete);                                   717   717     *
   726         IF Success THEN INCL (GrammarClass, cLNC); END;                     718   724   718   670    68    68   723
   727         IF CopyInherited > 0 THEN                                           726   628   726
   728            ? CopyRuleInsertionsInherited I Integer CopyInherited ?            *     *     *   727
   729         END;                                                                726
   730         IF CopySynthesized > 0 THEN                                         727   629   727
   731            ? CopyRuleInsertionsSynthesized I Integer CopySynthesized ?        *   728   728   730
   732         END;                                                                729
   733         IF CopyThreaded > 0 THEN                                            730   630   730
   734            ? CopyRuleInsertionsThreaded I Integer CopyThreaded ?              *   731   731   733
   735         END;                                                                732
   736         ForallClasses (t, CheckUsage);                                      725   725     *
   737       END;                                                                  735
   738 }; .
   739 
   740 
   741 (* ast *)
   742 
   743 PROCEDURE StampItems (t: Tree)                                              634   639   736   634
   744 
   745 Module (..) :- {                                                            103
   746         ForallClasses (Classes, StampItems);                                736   661   743
   747         StampItems (Next);                                                  746   619
   748 }; .
   749 Class (..) :- {                                                             670
   750         IF Abstract IN Properties THEN                                      733    72   642   670   733
   751            ForallAttributes (Attributes, StampItems);                       603   619   747
   752         END;                                                                737
   753 }; .
   754 Child (..) :- {                                                             578
   755         INC (ItemCount); Item := ItemCount;                                 257   625     *     *
   756 }; .
   757 Attribute (..) :- {                                                         619
   758         INC (ItemCount); Item := ItemCount;                                 755   755   755     *
   759 }; .
   760 ActionPart (..) :- {                                                        581
   761         INC (ItemCount); Item := ItemCount;                                 758   758   758     *
   762 }; .
   763 
   764 
   765 PROCEDURE ExpandProps (t: Tree)                                             743   641   743   743
   766 
   767 Module (..) :- {                                                            745
   768         ExpandProps (Props);                                                765   640
   769         ExpandProps (Next);                                                 768   747
   770 }; .
   771 Prop (..) :- {                                                                *
   772         ActProperties := Properties;                                        112   750
   773         ExpandProps (Names);                                                769   596
   774         ExpandProps (Next);                                                 773   769
   775 }; .
   776 Select (..) :- {                                                            428
   777         CheckSelect (Names);                                                  *   773
   778         ActProperties := {Ignore};                                          772   642
   779         IF NOT LookUp (TreeRoot^.Ag.Name, Names) THEN                       750   593   121   692   692   599   777   750
   780            TreeRoot^.Ag.Properties := TreeRoot^.Ag.Properties + ActProperties;    779   779   772     *     *     *   778
   781            ExpandProps (TreeRoot^.Ag.Decls);                                774   780   780   650
   782            ForallClasses (TreeRoot^.Ag.Classes, ExpandProps);               746   781   781   746   781
   783         END;                                                                752
   784         Module := TreeRoot^.Ag.Modules;                                     767   782   782   651
   785         WHILE Module^.Kind = Tree.Module DO                                 597   784   615   765     *   598
   786            IF NOT LookUp (Module^.Module.Name, Names) THEN                  779   779   779   785     *   779   779   779
   787               Module^.Module.Properties := Module^.Module.Properties + ActProperties\   786     *   780     *     *     *
                                                                                   780
      \;
   788               ExpandProps (Module^.Module.Decls);                           782   787     *   781
   789               ForallClasses (Module^.Module.Classes, ExpandProps);          782   788     *   782   788
   790            END;                                                             783
   791            Module := Module^.Module.Next;                                   789     *     *   774
   792         END;                                                                790
   793         ExpandProps (Next);                                                 789   791
   794 }; .
   795 Name (..) :- {                                                              786
   796         IF Name = TreeRoot^.Ag.Name THEN                                    786   795   784   784     *   786
   797            TreeRoot^.Ag.Properties := TreeRoot^.Ag.Properties + ActProperties;    796   796   787     *     *     *   787
   798            ExpandProps (TreeRoot^.Ag.Decls);                                793   797   797   788
   799            ForallClasses (TreeRoot^.Ag.Classes, ExpandProps);               789   798   798   789   798
   800         ELSE                                                                654
   801            Module := IdentifyModule (TreeRoot^.Ag.Modules, Name);           791    69   799   799   784   796
   802            IF Module = NoTree THEN                                          796   801   600   796
   803               ? ModuleNotDeclared W Ident Name ?                              *   475   660   801
   804            ELSE                                                             800
   805               Module^.Module.Properties := Module^.Module.Properties + ActProperties\   802     *   797     *     *     *
                                                                                   797
      \;
   806               ExpandProps (Module^.Module.Decls);                           799   805     *   798
   807               ForallClasses (Module^.Module.Classes, ExpandProps);          799   806     *   799   806
   808            END;                                                             792
   809         END;                                                                808
   810         ExpandProps (Next);                                                 807   793
   811 }; .
   812 Decl (..) :- {                                                                *
   813         ForallAttributes (Attributes, ExpandProps);                         751   751   810
   814         ExpandProps (Next);                                                 813   810
   815 }; .
   816 Class (..) :- {                                                             749
   817         Properties := Properties + ActProperties;                           805     *   805
   818         ForallAttributes (Attributes, ExpandProps);                         813   813   814
   819 }; .
   820 Child (..) :- {                                                             754
   821         Properties := Properties + ActProperties;                           817     *   817
   822 }; .
   823 Attribute (..) :- {                                                         757
   824         Properties := Properties + ActProperties;                           821     *   821
   825 }; .
   826 ActionPart (..) :- {                                                        760
   827         Properties := Properties + ActProperties;                           824     *   824
   828 }; .
   829 
   830 
   831 PROCEDURE CheckSelect (t: Names)                                            765   777   765   786
   832 
   833 Name (..) :- {                                                              803
   834         IF NOT ((Name = TreeRoot^.Ag.Name) OR (IdentifyModule (TreeRoot^.Ag.Modules,\   802   786   833   801   801     *
                                                                                   674   801     *     *   801
      \ Name) # NoTree)) THEN                                                        *   802   802
   835            ? ModuleNotDeclared W Ident Name ?                               803   803   803   834
   836         END;                                                                809
   837         CheckSelect (Next);                                                 831   814
   838 }; .
   839 
   840 
   841 PROCEDURE ProcessIgnore (t: Tree)                                           831   649   831   785
   842 
   843 Module (..) :- {                                                            807
   844         IF Ignore IN Properties THEN                                        834   778   750   827   834
   845            ProcessIgnore (ParserCodes);                                     841   643
   846            ProcessIgnore (TreeCodes);                                       845   644
   847            ProcessIgnore (EvalCodes);                                       846   645
   848         END;                                                                836
   849         ProcessIgnore (Decls);                                              847   806
   850         ForallClasses (Classes, ProcessIgnore);                             807   807   849
   851         ProcessIgnore (Next);                                               850   837
   852 }; .
   853 Codes (..) :- {                                                               *
   854         MakeText (Export);                                                   43     *
   855         MakeText (Import);                                                  854     *
   856         MakeText (Global);                                                  855     *
   857         MakeText (Local);                                                   856     *
   858         MakeText (Begin);                                                   857     *
   859         MakeText (Close);                                                   858     *
   860 }; .
   861 Decl (..) :- {                                                              812
   862         Attributes := ProcessIgnore2 (Attributes);                          818   135     *
   863         ProcessIgnore (Next);                                               851   851
   864 }; .
   865 Class (..) :- {                                                             816
   866         Attributes := ProcessIgnore2 (Attributes);                          862   862     *
   867         IF Ignore IN Properties THEN Names := nNoName; END;                 844   844   844   844   844   831    71   848
   868 }; .
   869 
   870 
   871 PROCEDURE ExpandModules (t: Tree)                                           841   651   841   841
   872 
   873 Module (..) :- {                                                            843
   874         ExpandModules (Decls);                                              871   849
   875         ExpandModules (Classes);                                            874   850
   876         ExpandModules (Next);                                               875   863
   877 }; .
   878 Decl (..) :- {                                                              861
   879         Attribute       := Attributes;                                      823   866
   880         ActProperties   := Properties;                                      827   867
   881         ExpandModules (Names);                                              876   867
   882         ExpandModules (Next);                                               881   876
   883 }; .
   884 Name (..) :- {                                                              835
   885         Class := IdentifyClass (TreeRoot^.Ag.Classes, Name);                865   599   834   834   875   884
   886         IF Class = NoTree THEN                                              867   885   834   867
   887            IF TreeRoot^.Ag.Classes^.Kind = Tree.NoClass THEN                886   885   885   885   785   871   368   886
   888               TreeRoot^.Ag.Classes := mClass (Name, ActProperties, CopyTree (Attribu\   887   887   887    65   885   880
                                                                                   587
      \te),                                                                        879
   889                  nNoClass, TreeRoot^.Ag.Classes, Name, Pos, 0, NoIdent, nNoName);       664   888   888   888   888   579
                                                                                    42   867
   890               InitIdentifyClass2 (TreeRoot^.Ag.Classes);                     73   889   889   889
   891            ELSE                                                             804
   892               Node := TreeRoot^.Ag.Classes;                                 605   890   890   890
   893               WHILE Node^.Class.Next^.Kind # Tree.NoClass DO                785   892   886   882   887   887   887   785
   894                  Node := Node^.Class.Next;                                  893     *   893   893
   895               END;                                                          867
   896               Node^.Class.Next := mClass (Name, ActProperties, CopyTree (Attribute),    894   894   894   888   889   888
                                                                                   888   888
   897                  nNoClass, Node^.Class.Next, Name, Pos, 0, NoIdent, nNoName);     889   896   896   896   896   889   889
                                                                                   889
   898               InitIdentifyClass2 (Node^.Class.Next);                        890   897   897   897
   899            END;                                                             895
   900         ELSE                                                                891
   901            IF Class^.Class.Attributes^.Kind = Tree.NoAttribute THEN         887   898     *   879   893   893   615   887
   902               Class^.Class.Attributes := CopyTree (Attribute);              901     *   901   896   896
   903            ELSE                                                             900
   904               Node := Class^.Class.Attributes;                              898   902     *   902
   905               WHILE Node^.Attribute.Next^.Kind # Tree.NoAttribute DO        893   904   902   898   901   901   901   893
   906                  Node := Node^.Attribute.Next;                              905     *   905   905
   907               END;                                                          899
   908               Node^.Attribute.Next := CopyTree (Attribute);                 906   906   906   902     *
   909            END;                                                             907
   910         END;                                                                909
   911         ExpandModules (Next);                                               882   908
   912 }; .
   913 Class (..) :- {                                                             904
   914         Class := IdentifyClass (TreeRoot^.Ag.Classes, Name);                913   885   892   892   892   897
   915         ForallClasses (Extensions, InitIdentifyClass2);                     850   271   898
   916         IF Class = NoTree THEN                                              901   914   886   901
   917            IF TreeRoot^.Ag.Classes^.Kind = Tree.NoClass THEN                916   914   914   914   905   905   893   916
   918               TreeRoot^.Ag.Classes := mClass (Name, Properties, Attributes, Extensio\   917   917   917   896   914   880
                                                                                   904
      \ns,                                                                         915
   919                  TreeRoot^.Ag.Classes, Selector, Pos, Code, Prec, Names);   918   918   918   519   897   440     *   881
   920               InitIdentifyClass2 (TreeRoot^.Ag.Classes);                    915   919   919   919
   921            ELSE                                                             903
   922               Node := TreeRoot^.Ag.Classes;                                 908   920   920   920
   923               WHILE Node^.Class.Next^.Kind # Tree.NoClass DO                905   922   916   911   917   917   917   905
   924                  Node := Node^.Class.Next;                                  923     *   923   923
   925               END;                                                          910
   926               Node^.Class.Next := mClass (Name, Properties, Attributes, Extensions,     924   924   924   918   918   918
                                                                                   918   918
   927                  Node^.Class.Next, Selector, Pos, Code, Prec, Names);       926   926   926   919   919   919   919   919
   928               InitIdentifyClass2 (Node^.Class.Next);                        920   927   927   927
   929            END;                                                             925
   930         ELSE                                                                921
   931            IF Class^.Class.Attributes^.Kind = Tree.NoAttribute THEN         917   928     *   926   923   923   905   917
   932               Class^.Class.Attributes := Attributes;                        931     *   931     *
   933            ELSE                                                             930
   934               Node := Class^.Class.Attributes;                              928   932     *   932
   935               WHILE Node^.Attribute.Next^.Kind # Tree.NoAttribute DO        923   934   908   928   931   931   931   923
   936                  Node := Node^.Attribute.Next;                              935     *   935   935
   937               END;                                                          929
   938               Node^.Attribute.Next := Attributes;                           936   936   936   934
   939            END;                                                             937
   940 
   941            IF Class^.Class.Extensions^.Kind = Tree.NoClass THEN             931   934     *   926   935   935   923   931
   942               Class^.Class.Extensions := Extensions;                        941     *   941     *
   943            ELSE                                                             933
   944               Node := Class^.Class.Extensions;                              938   942     *   942
   945               WHILE Node^.Class.Next^.Kind # Tree.NoClass DO                935   944   944   938   941   941   941   935
   946                  Node := Node^.Class.Next;                                  945     *   945   945
   947               END;                                                          939
   948               Node^.Class.Next := Extensions;                               946   946   946   944
   949            END;                                                             947
   950 
   951            IF Class^.Class.Names^.Kind = Tree.NoName THEN                   941   948     *   927   945   945     *   941
   952               Class^.Class.Names := Names;                                  951     *   951     *
   953            ELSE                                                             943
   954               Node := Class^.Class.Names;                                   948   952     *   952
   955               WHILE Node^.Name.Next^.Kind # Tree.NoName DO                  945   954   926   948   951   951   951   945
   956                  Node := Node^.Name.Next;                                   955     *   955   955
   957               END;                                                          949
   958               Node^.Name.Next := Names;                                     956   956   956   954
   959            END;                                                             957
   960         END;                                                                959
   961         ExpandModules (Next);                                               911   958
   962 }; .
   963 
   964 
   965 PROCEDURE ExpandChecks (t: Tree)                                            871   686   871   955
   966 
   967 Class (..) :- {                                                             954
   968         Class := t;                                                         967   965
   969         ExpandChecks (Attributes);                                          965   938
   970         IF (BaseClass^.Kind = Tree.NoClass) THEN        (* Top ? *)         951   595   955   965   945   951
   971            Attributes := mAttribute (Attributes, iNull, iNull, {Synthesized, Compute\   969   576     *   631     *   528
      \d, Dummy}, NoPosition);                                                     529   257    52
   972         END;                                                                960
   973 }; .
   974 Child (..) :- {                                                             820
   975         ExpandChecks (Next);                                                969   961
   976 }; .
   977 Attribute (..) :- {                                                         938
   978         ExpandChecks (Next);                                                975   975
   979 }; .
   980 ActionPart (..) :- {                                                        826
   981         ExpandChecks (Actions);                                             978   582
   982         ExpandChecks (Next);                                                981   978
   983 }; .
   984 Assign (..) :- {                                                            414
   985         ExpandChecks (Next);                                                982   982
   986 }; .
   987 Copy (..) :- {                                                              433
   988         ExpandChecks (Next);                                                985   985
   989 }; .
   990 TargetCode (..) :- {                                                        452
   991         ExpandChecks (Next);                                                988   988
   992 }; .
   993 Order (..) :- {                                                             462
   994         ExpandChecks (Next);                                                991   991
   995 }; .
   996 Check (..) :- {                                                             555
   997         IF Results = NoTree THEN                                            970   479   916   970
   998            INC (ChecksCount);                                               761   626
   999            IntToString (ChecksCount, String);                               631   998   657
  1000            Ident := MakeIdent (String);                                     835   657   999
  1001            Class^.Class.Attributes := mAttribute (Class^.Class.Attributes, Ident, Id\   968     *   971   971     *     *
                                                                                     *  1000
      \ent,                                                                          *
  1002               {Test}, NoPosition);                                          257   971
  1003            Results := mIdent (Ident, NoPosition, nNoDesignator);            997    65  1001  1002    70
  1004         ELSE                                                                953
  1005            Class^.Class.Attributes := mAttribute (Class^.Class.Attributes,       1001     *  1001  1001     *     *     *
  1006               Results^.Ident.Attribute, Results^.Ident.Attribute, {Test}, NoPosition\  1003  1003   977     *     *     *
                                                                                  1002  1003
      \);
  1007         END;                                                                972
  1008         ExpandChecks (Next);                                                994   994
  1009 }; .
  1010 
  1011 
  1012 PROCEDURE ExpandMultiple2 (t: Tree)                                         965   603   968   970
  1013 
  1014 Child (..) :- {                                                             974
  1015         IF NOT HasItem (TheClass, Item) THEN                                997   834    72   602   761   997
  1016            Node := mChild (NoTree, Name, Type, Properties, Pos);            958   579   997   958   579   926   927
  1017            Node^.AttrOrAction.Item := Item;                                1016   619  1015     *
  1018            AppendAttr (TheClass^.Class.Attributes, Node);                   621  1015  1005  1005  1017
  1019         END;                                                               1007
  1020 }; .
  1021 Attribute (..) :- {                                                        1006
  1022         IF NOT HasItem (TheClass, Item) THEN                               1015  1015  1015  1018  1017  1015
  1023            Node := mAttribute (NoTree, Name, Type, Properties, Pos);       1018  1005  1016  1016  1016  1016  1016
  1024            Node^.AttrOrAction.Item := Item;                                1023  1017  1022     *
  1025            AppendAttr (TheClass^.Class.Attributes, Node);                  1018  1022  1018  1018  1024
  1026         END;                                                               1019
  1027 }; .
  1028 ActionPart (..) :- {                                                        980
  1029         IF NOT HasItem (TheClass, Item) THEN                               1022  1022  1022  1025  1024  1022
  1030            Node := mActionPart (NoTree, Actions);                          1025   582  1023   981
  1031            Node^.AttrOrAction.Item := Item;                                1030  1024  1029     *
  1032            INCL (Node^.ActionPart.Properties, MultInhComp);                 726  1031  1028  1023   541
  1033            AppendAttr (TheClass^.Class.Attributes, Node);                  1025  1029  1025  1025  1032
  1034         END;                                                               1026
  1035 }; .
  1036 
  1037 
  1038 PROCEDURE CountClasses (t: Tree)                                           1012   668  1012  1012
  1039 
  1040 Class (..) :- {                                                            1033
  1041         IF NOT (Abstract IN Properties) THEN INC (ClassCount); END;        1029  1029   750   867  1032  1029   998   666
                                                                                  1034
  1042         ChildCount      := 0;                                                82
  1043         AttributeCount  := 0;                                                82
  1044         ActionCount     := 0;                                                82
  1045         Class := t;                                                        1040  1038
  1046         ForallAttributes (t, CountClasses);                                 818  1045  1038
  1047         IF ChildCount     > 0 THEN INCL (t^.Class.Properties, HasChildren       ); E\  1041  1042  1041  1032  1046  1045
                                                                                  1041    63
      \ND;                                                                        1041
  1048         IF AttributeCount > 0 THEN INCL (t^.Class.Properties, HasAttributes     ); E\  1047  1043  1047  1047  1047  1047
                                                                                  1047    63
      \ND;                                                                        1047
  1049         IF ActionCount    > 0 THEN INCL (t^.Class.Properties, HasActions        ); E\  1048  1044  1048  1048  1048  1048
                                                                                  1048    63
      \ND;                                                                        1048
  1050         IF (Terminal IN Properties) AND (Code # 0) THEN                    1049    62  1041  1049   534   927  1049
  1051            IF IsElement (Code, CodesUsed) THEN                             1050   718  1050   698  1050
  1052               ? TerminalCodeMultipleUsed E Integer Code ?                     *   546   734  1051
  1053            END;                                                            1049
  1054            Include (CodesUsed, Code);                                       660  1051  1052
  1055         END;                                                               1053
  1056 }; .
  1057 Child (..) :- {                                                            1014
  1058         INC (ChildCount);                                                  1041  1047
  1059 }; .
  1060 Attribute (..) :- {                                                        1021
  1061         IF (NoCodeAttr * Properties) = {} THEN                             1051    61  1050  1051
  1062            Include (TypeNames, Type);                                      1054   660  1023
  1063            IF (Nonterminal IN Class^.Class.Properties) OR (Name # iPosition) THEN      1061    63  1050  1049     *  1061
                                                                                   834  1023    71  1061
  1064               INC (AttributeCount);                                        1058  1048
  1065            END;                                                            1055
  1066         END;                                                               1065
  1067 }; .
  1068 ActionPart (..) :- {                                                       1032
  1069         INC (ActionCount);                                                 1064  1049
  1070 }; .
  1071 
  1072 
  1073 PROCEDURE CompReachable (t: Tree)                                          1038   671  1049  1038
  1074 
  1075 Class (..) :-                                                              1063
  1076         NOT (Reachable IN Properties);                                     1041    64  1063  1063
  1077         INCL (Properties, Reachable);                                      1049  1076  1076
  1078         ForallAttributes (Attributes, CompReachable);                      1046  1033  1073
  1079         ForallClasses (Extensions, CompReachable);                          915   948  1078
  1080         .
  1081 Child (..) :- {                                                            1057
  1082         Class := IdentifyClass (TreeRoot^.Ag.Classes, Type);               1075   914   922   922   922  1062
  1083         IF Class # NoTree THEN                                             1063  1082  1030  1063
  1084            INCL (Class^.Class.Properties, Referenced);                     1077  1083     *  1077   670
  1085            CompReachable (Class);                                          1079  1084
  1086         ELSE                                                               1004
  1087       IF NOT IsElement (ORD ('j'), Options) THEN                           1083  1076  1051   718   718  1083
  1088            ? NodeTypeNotDeclared W Ident Type ?                               *   835  1006  1082
  1089       END;                                                                 1066
  1090            IF TreeRoot^.Ag.Classes^.Kind = Tree.NoClass THEN               1087  1082  1082  1082   970  1073   970  1087
  1091               TreeRoot^.Ag.Classes := mClass (Type, {Terminal, Implicit, Reachable, \  1090  1090  1090   926  1088  1050
                                                                                    64  1077
      \Referenced},                                                               1084
  1092                  nNoAttribute, nNoClass, TreeRoot^.Ag.Classes, Type, Pos, 0, NoIdent\   585   897  1091  1091  1091  1091
                                                                                  1023   897
      \, nNoName);                                                                 897
  1093               InitIdentifyClass2 (TreeRoot^.Ag.Classes);                    928  1092  1092  1092
  1094               TreeRoot^.Ag.Classes^.Class.BaseClass := nNoClass;           1093  1093  1093  1085   970  1092
  1095               Class := TreeRoot^.Ag.Classes;                               1094  1094  1094  1094
  1096            ELSE                                                            1086
  1097               Node := TreeRoot^.Ag.Classes;                                1033  1095  1095  1095
  1098               WHILE Node^.Class.Next^.Kind # Tree.NoClass DO                955  1097  1095  1008  1090  1090  1090   955
  1099                  Node := Node^.Class.Next;                                 1098     *  1098  1098
  1100               END;                                                         1089
  1101               Node^.Class.Next := mClass (Type, {Terminal, Implicit, Reachable, Refe\  1099  1099  1099  1091  1092  1091
                                                                                  1091  1091
      \renced},                                                                   1091
  1102                  nNoAttribute, nNoClass, Node^.Class.Next, Type, Pos, 0, NoIdent, nN\  1092  1094  1101  1101  1101  1101
                                                                                  1092  1092
      \oName);                                                                    1092
  1103               InitIdentifyClass2 (Node^.Class.Next);                       1093  1102  1102  1102
  1104               Node^.Class.Next^.Class.BaseClass := nNoClass;               1103  1103  1103     *  1094  1102
  1105               Class := Node^.Class.Next;                                   1104  1104     *  1104
  1106            END;                                                            1100
  1107            INC (ClassCount);                                               1069  1041
  1108         END;                                                               1106
  1109 }; .
  1110 
  1111 
  1112 PROCEDURE CodeTerminals (t: Tree)                                          1073   677  1073  1098
  1113 
  1114 Class (..) :- {                                                            1105
  1115         IF ({Terminal, Referenced} <= Properties) AND (Code = 0) THEN      1090  1101  1101  1084  1050  1054  1090
  1116            REPEAT INC (TokenCode); UNTIL NOT IsElement (TokenCode, CodesUsed);      *  1107   676     *  1087  1087     *
                                                                                  1054
  1117            Code := TokenCode;                                              1115  1116
  1118         END;                                                               1108
  1119         IF (Terminal IN Properties) AND (BaseClass^.Kind = Tree.NoClass) THEN   (* T\  1115  1115  1076  1115  1115  1104
                                                                                  1098  1112  1098  1115
c     \op ? *)
  1120            Attributes := mAttribute (Attributes, iPosition, itPosition, {Synthesized\  1078  1023     *  1063    71   971
      \, Computed, Input, Read}, NoPosition);                                      971   377   490  1006
  1121         END;                                                               1118
  1122 }; .
  1123 
  1124 
  1125 PROCEDURE CheckReverse (t: Tree)                                           1112   669  1112  1119
  1126 
  1127 Class (..) :- {                                                            1114
  1128         IF Extensions^.Kind = Tree.NoClass THEN         (* Low ? *)        1119  1079  1119  1125  1119  1119
  1129            ReverseCount := 0;                                                85
  1130            ForallAttributes (t, CheckReverse);                             1078  1125  1125
  1131         END;                                                               1121
  1132 }; .
  1133 Child (..) :- {                                                            1081
  1134          IF Reverse IN Properties THEN                                     1128    56  1119  1119  1128
  1135             INC (ReverseCount);                                            1116  1129
  1136             IF ReverseCount > 1 THEN                                       1134  1135  1134
  1137                ? OnlyOneReverseAllowedInNodeType E ?                          *  1052
  1138             END;                                                           1131
  1139          END;                                                              1138
  1140 }; .
  1141 
  1142 
  1143 PROCEDURE CheckNames (t: Tree)                                             1125   693  1130  1128
  1144 
  1145 Class (..) :- {                                                            1127
  1146         IF IsElement (Name, ClassNames) THEN                               1136  1116  1063   694  1136
  1147            ? NodeTypeMultipleDeclared E Ident Name ?                          *  1137  1088  1146
  1148         END;                                                               1139
  1149         Include (ClassNames, Name);                                        1062  1146  1147
  1150         IF Terminal IN Properties THEN                                     1146  1119  1134  1134  1146
  1151            IF IsElement (Selector, VariantNames) THEN                      1150  1146   927   696  1150
  1152               ? VariantSelectorMultipleDeclared E Ident Selector ?            *  1147  1147  1151
  1153            END;                                                            1148
  1154            Include (VariantNames, Selector);                               1149  1151  1152
  1155         END;                                                               1153
  1156         IF (Prec # NoIdent) AND NOT IsElement (Prec, PrecNames) THEN       1151   927  1102  1119  1116  1151     *   697
                                                                                  1151
  1157            ? PrecedenceNotDeclared E Ident Prec ?                             *  1152  1152  1156
  1158         END;                                                               1155
  1159         IF Extensions^.Kind = Tree.NoClass THEN         (* Low ? *)        1156  1128  1128  1143  1128  1156
  1160            AssignEmpty (SelectorNames);                                     466   695
  1161            ForallAttributes (t, CheckNames);                               1130  1143  1143
  1162         END;                                                               1158
  1163         CheckNames2 (Names);                                                  *   958
  1164 }; .
  1165 Child (..) :- {                                                            1133
  1166         IF IsElement (Name, SelectorNames) THEN                            1159  1156  1149  1160  1159
  1167            IF NOT (IsElement (ORD ('x'), Options) OR                       1166  1156  1166  1087  1087  1063
  1168                    IsElement (ORD ('z'), Options) OR                       1167  1167  1167  1167
  1169                    IsElement (ORD ('u'), Options)) THEN                    1168  1168  1168  1166
  1170               ? SelectorMultipleDeclared E Ident Name ?                       *  1157  1157  1166
  1171            END;                                                            1162
  1172         END;                                                               1171
  1173         Include (SelectorNames, Name);                                     1154  1166  1170
  1174 }; .
  1175 Attribute (..) :- {                                                        1060
  1176         IF IsElement (Name, SelectorNames) THEN                            1167  1169  1173  1173  1169
  1177            ? SelectorMultipleDeclared E Ident Name ?                       1170  1170  1170  1176
  1178         END;                                                               1172
  1179         Include (SelectorNames, Name);                                     1173  1176  1177
  1180 }; .
  1181 LeftAssoc (..) :- {                                                           *
  1182         CheckNames (Names);                                                1161  1163
  1183         CheckNames (Next);                                                 1182  1105
  1184 }; .
  1185 RightAssoc (..) :- {                                                          *
  1186         CheckNames (Names);                                                1183  1182
  1187         CheckNames (Next);                                                 1186  1183
  1188 }; .
  1189 NonAssoc (..) :- {                                                            *
  1190         CheckNames (Names);                                                1187  1186
  1191         CheckNames (Next);                                                 1190  1187
  1192 }; .
  1193 Name (..) :- {                                                             1179
  1194         IF IsElement (Name, PrecNames) THEN                                1176  1176  1193  1156  1176
  1195            ? PrecedenceMultipleDeclared E Ident Name ?                        *  1177  1177  1194
  1196         END;                                                               1178
  1197         Include (PrecNames, Name);                                         1179  1194  1195
  1198         CheckNames (Next);                                                 1191  1191
  1199 }; .
  1200 
  1201 
  1202 PROCEDURE CheckNames2 (t: Tree)                                            1143  1163  1161  1159
  1203 
  1204 Name (..) :- {                                                             1197
  1205         Class := IdentifyClass (TreeRoot^.Ag.Classes, Name);               1145  1082  1097  1097  1097  1204
  1206         IF Class = NoTree THEN                                             1194  1205  1083  1194
  1207            ? NodeTypeNotDeclared E Ident Name ?                            1088  1195  1195  1205
  1208         ELSE                                                               1096
  1209            IF NOT (Abstract IN Class^.Class.Properties) THEN               1206  1167  1041  1150  1206     *  1150  1206
  1210               ? AbstractTypeRequired E ?                                      *  1207
  1211            END;                                                            1196
  1212         END;                                                               1211
  1213         CheckNames2 (Next);                                                1202  1198
  1214 }; .
  1215 
  1216 
  1217 PROCEDURE CheckDesignator (t: Tree)                                        1202   699  1202  1202
  1218 
  1219 Class (..) :- {                                                            1209
  1220         Class := t;                                                        1219  1217
  1221         ForallAttributes (Attributes, CheckDesignator);                    1161  1120  1217
  1222 }; .
  1223 ActionPart (..) :- {                                                       1068
  1224         CheckDesignator (Actions);                                         1221  1030
  1225 }; .
  1226 Assign (..) :- {                                                            984
  1227         CheckDesignator (Results);                                         1224  1006
  1228         CheckDesignator (Arguments);                                       1227   481
  1229         CheckDesignator (Next);                                            1228  1213
  1230 }; .
  1231 Copy (..) :- {                                                              987
  1232         CheckDesignator (Results);                                         1229  1227
  1233         CheckDesignator (Arguments);                                       1232  1228
  1234         CheckDesignator (Next);                                            1233  1229
  1235 }; .
  1236 TargetCode (..) :- {                                                        990
  1237         CheckDesignator (Code);                                            1234  1117
  1238         CheckDesignator (Next);                                            1237  1234
  1239 }; .
  1240 Check (..) :- {                                                             996
  1241         CheckDesignator (Statement);                                       1238   473
  1242         CheckDesignator (Condition);                                       1241   470
  1243         CheckDesignator (Actions);                                         1242  1224
  1244         CheckDesignator (Next);                                            1243  1238
  1245 }; .
  1246 Designator (..) :- {                                                        563
  1247         Node := IdentifyAttribute (Class, Selector);                       1105   523  1220  1154
  1248         IF Node # NoTree THEN                                              1209  1247  1206  1209
  1249            IF Node^.Kind # Tree.Child THEN                                 1248  1248  1159  1217  1165  1248
  1250               ? ChildRequired E ?                                             *  1210
  1251            ELSE                                                            1208
  1252               IF Node^.Child.Class # NoTree THEN                           1249  1249  1249  1247  1248  1249
  1253                  Node := IdentifyAttribute (Node^.Child.Class, Attribute);       1252  1247     *  1252  1252  1175
  1254                  IF Node = NoTree THEN                                     1252  1253  1252  1252
  1255                     ? AttributeNotDeclared E Ident Attribute ?                *  1250  1207  1253
  1256                  END;                                                      1212
  1257               END;                                                         1256
  1258            END;                                                            1257
  1259         ELSE                                                               1251
  1260            ? SelectorNotDeclared E Ident Selector ?                           *  1255  1255  1247
  1261         END;                                                               1258
  1262         CheckDesignator (Next);                                            1244  1244
  1263 }; .
  1264 Remote (..) :- {                                                            565
  1265    Node := IdentifyClass (TreeRoot^.Ag.Classes, Type);                     1254  1205  1205  1205  1205  1102
  1266    IF Node = NoTree THEN                                                   1254  1265  1254  1254
  1267       ? NodeTypeNotDeclared E Ident Type ?                                 1207  1260  1260  1265
  1268    ELSE                                                                    1259
  1269       Node := IdentifyAttribute (Node, Attribute);                         1266  1253     *  1255
  1270       IF Node = NoTree THEN                                                1266  1269  1266  1266
  1271          ? AttributeNotDeclared E Ident Attribute ?                        1255  1267  1267  1269
  1272       END;                                                                 1261
  1273    END;                                                                    1272
  1274 };
  1275    CheckDesignator (Designators);                                          1262   550
  1276    CheckDesignator (Next);                                                 1275  1262
  1277    .
  1278 Order (..) ;                                                                993
  1279 Ident (..) ;                                                               1271
  1280 Any (..) ;                                                                  566
  1281 Anys (..) ;                                                                 567
  1282 LayoutAny (..) :- CheckDesignator (Next); .                                   *  1276  1276
  1283 
  1284 
  1285 (* ag *)
  1286 
  1287 PROCEDURE Identify (t: Tree)                                               1217   687  1220  1249
  1288 
  1289 Class (..) :- {                                                            1253
  1290         ForallAttributes (t, Identify);                                    1221  1287  1287
  1291 }; .
  1292 Child (..) :- {                                                            1253
  1293         Class := IdentifyClass (TreeRoot^.Ag.Classes, Type);               1289  1265  1265  1265  1265  1267
  1294         IF (Class = NoTree) AND NOT IsElement (ORD ('x'), Options) AND     1270  1293  1270  1156  1209  1194  1169  1169
                                                                                     *
  1295                                 NOT IsElement (ORD ('z'), Options) AND     1294  1294  1294  1294  1294
  1296                                 NOT IsElement (ORD ('u'), Options) THEN    1295  1295  1295  1295  1270
  1297            ? NodeTypeNotDeclared E Ident Type ?                            1267  1271  1279  1293
  1298         END;                                                               1273
  1299 }; .
  1300 
  1301 
  1302 PROCEDURE InitInstance0 (t: Tree)                                          1287   708  1290  1287
  1303 
  1304 Class (..) :- {                                                            1294
  1305         InstanceSize := InstCount;                                          100   224
  1306         MakeArray (Instance, InstanceSize, TSIZE (tInstance));               38   533  1305    35    55
  1307         InitInstance (t, AttrCount, Instance);                              318  1302   489  1306
  1308 }; .
  1309 
  1310 
  1311 PROCEDURE CompDP (t: Tree)                                                 1302   709  1307  1302
  1312 
  1313 Class (..) :- {                                                            1304
  1314         MakeRelation (DP, InstCount, InstCount);                             51     *  1305     *
  1315         relation := DP;                                                     386  1314
  1316         MakeSet (Results  , InstCount);                                     706  1232  1314
  1317         MakeSet (Arguments, InstCount);                                    1316  1233  1316
  1318         Class := t;                                                        1313  1311
  1319         Attribute := IdentifyAttribute (t, iNull);                         1271  1269  1318   971
  1320         DummyIndex := Attribute^.Attribute.AttrIndex;                       386  1319     *   533
  1321         INCL (Instance^[DummyIndex].Properties, Left);                     1084  1307  1320  1209   310
  1322         CompDP1 (t, Results, Write, TRUE, TRUE);                            558  1319  1316   527   724     *
  1323         ReleaseSet (Results  );                                             698  1322
  1324         ReleaseSet (Arguments);                                            1323  1317
  1325 }; .
  1326 
  1327 
  1328 PROCEDURE CopyProperties (t: Tree)                                         1311   716  1322  1311
  1329 
  1330 Class (..) :- {                                                            1318
  1331         FOR i := 1 TO InstCount DO                                          379   705   379  1317  1098
  1332            WITH Instance^[i] DO                                             598  1321  1331  1331
  1333               Properties := Properties + Attribute^.Child.Properties;      1321     *  1320  1292     *
  1334               IF (Action # ADR (Action)) AND (Action^.Kind = Tree.Copy) THEN     1294   480   446     *  1295     *  1249
                                                                                  1328  1231  1296
  1335                  INCL (Properties, CopyDef);                               1321  1333    59
  1336                  INCL (Instance^[CopyArg].Properties, CopyUse);            1335  1332   428  1335    60
  1337               END;                                                         1298
  1338       IF IsElement (ORD ('2'), Options) THEN                               1334  1296  1296  1296  1334
  1339               IF NOT (NonBaseComp IN Properties) AND (Action # ADR (Action)) AND       1338  1296   540  1209  1336  1334
                                                                                  1334  1334     *     *
  1340                  (({Synthesized, Left} <= Properties) OR                   1120  1321  1339  1168
  1341                  ({Inherited, Right} <= Properties)) THEN                   530   387  1340  1338
  1342                  WriteIdent     (StdOutput, Name);                           42   722  1207
  1343                  WriteS         (StdOutput, "   = { ");                     721  1342
  1344                  WriteClass     (Action);                                    68  1339
  1345                  WriteS         (StdOutput, " } .");                       1343  1343
  1346                  WriteNl        (StdOutput);                                722  1345
  1347               END;                                                         1337
  1348       END;                                                                 1347
  1349            END;                                                            1348
  1350         END;                                                               1349
  1351 }; .
  1352 
  1353 
  1354 PROCEDURE CheckUsage (t: Tree)                                             1328   736  1328  1334
  1355 
  1356 Class (..) :- {                                                            1330
  1357         IF Extensions^.Kind = Tree.NoClass THEN         (* Low ? *)        1339  1159  1334  1354  1159  1341
  1358            Class := t;                                                     1356  1354
  1359            IsAbstract := Abstract IN Properties;                            101  1209  1339  1341
  1360            ForallAttributes (t, CheckUsage);                               1290  1358  1354
  1361         END;                                                               1350
  1362 }; .
  1363 Child (..) :- {                                                            1333
  1364       IF NOT IsElement (ORD ('W'), Options) AND NOT IsAbstract THEN        1357  1339  1338  1338  1338  1339     *  1359
                                                                                  1357
  1365         IF NOT (Input IN Properties) AND NOT (Write IN Properties) THEN    1364  1364  1120  1359  1359  1364     *  1322
                                                                                     *     *  1364
  1366            ? AttributeNeverSet W Ident Name ?                                 *  1088  1297  1342
  1367         END;                                                               1361
  1368         IF NOT (Output IN Properties) AND NOT (Read IN Properties) AND     1365  1365    58  1365  1365  1365     *  1120
                                                                                     *     *     *
  1369            NOT IsElement (ORD ('x'), Options) AND                          1368  1364  1364  1364  1368
  1370            NOT IsElement (ORD ('z'), Options) AND                          1369  1369  1369  1369  1369
  1371            NOT IsElement (ORD ('u'), Options) THEN                         1370  1370  1370  1370  1365
  1372            ? AttributeNeverUsed W Ident Name ?                                *  1366  1366  1366
  1373         END;                                                               1367
  1374       END;                                                                 1373
  1375         IF ({Input, Write} <= Properties) AND ((Class = NoTree) OR         1368  1365  1365  1368  1370  1358  1294  1340
  1376            (Class # NoTree) AND NOT (Terminal IN Class^.Class.Properties)) THEN  1375  1375  1375  1371  1150  1368     *
                                                                                     *  1375  1371
  1377            ? AssignmentToInputAttribute E Ident Name ?                        *  1297  1372  1372
  1378         END;                                                               1374
  1379         IF {Synthesized, Inherited} <= Properties THEN                     1375  1340  1341  1376  1376
  1380            ? AttributeSynthesizedAsWellAsInherited E Ident Name ?             *  1377  1377  1377
  1381         END;                                                               1378
  1382 }; .
  1383 Attribute (..) :-                                                          1333
  1384         ({{Test, Dummy}} * Properties) = {{}};                             1006   971  1379
  1385 {     IF NOT IsElement (ORD ('W'), Options) AND NOT IsAbstract THEN        1379  1376  1371  1371  1371  1376     *  1364
                                                                                  1379
  1386         IF NOT (Input IN Properties) AND NOT (Write IN Properties) THEN    1385  1385  1375  1376  1384  1385     *  1375
                                                                                     *     *  1385
  1387            ? AttributeNeverSet W Ident Name ?                              1366  1372  1380  1380
  1388         END;                                                               1381
  1389         IF NOT (Output IN Properties) AND NOT (Read IN Properties) THEN    1386  1386  1368  1386  1386  1386     *  1368
                                                                                     *     *  1386
  1390            ? AttributeNeverUsed W Ident Name ?                             1372  1387  1387  1387
  1391         END;                                                               1388
  1392       END;                                                                 1391
  1393         IF ({Input, Write} <= Properties) AND ((Class = NoTree) OR         1389  1386  1386  1389  1389  1376  1376  1375
  1394            (Class # NoTree) AND NOT (Terminal IN Class^.Class.Properties)) THEN  1393  1393  1393  1389  1376  1389     *
                                                                                     *  1393  1389
  1395            ? AssignmentToInputAttribute E Ident Name ?                     1377  1380  1390  1390
  1396         END;                                                               1392
  1397         IF {Synthesized, Inherited} <= Properties THEN                     1393  1379  1379  1394  1394
  1398            ? AttributeSynthesizedAsWellAsInherited E Ident Name ?          1380  1395  1395  1395
  1399         END;                                                               1396
  1400 }; .
  1401 
  1402 
  1403 PROCEDURE CheckUsage2 (t: Tree)                                            1354   683  1360  1357
  1404 
  1405 Class (..) :-                                                              1394
  1406    NOT IsElement (ORD ('W'), Options);                                     1394  1385  1385  1385
  1407    NOT (Reachable IN Properties);                                          1406  1101  1394  1397
  1408    VAR String: tString;                                                     613  1000   111
  1409    GetString (Name, String);                                                 42  1398  1408
  1410    (Char (String, 1) # 'y') AND (Char (String, 2) # 'y');                    41  1409  1394     *     *
  1411      ? NodeTypeNotUsed W Ident Name ?                                         *  1390  1398  1409
  1412    .
  1413 
  1414 
  1415 PROCEDURE CheckInherited (t: Tree)                                         1403   717  1403  1403
  1416 
  1417 Class (..) :- {                                                            1405
  1418         IF BaseClass^.Kind = Tree.Class THEN            (* NOT Top ? *)    1397  1119  1357  1415  1417  1397
  1419            CheckInherited (Attributes);                                    1415  1221
  1420         END;                                                               1399
  1421 }; .
  1422 Child (..) :- {                                                            1363
  1423         IF Inherited IN Properties THEN                                    1418  1397  1407  1407  1418
  1424            ? InheritedAttributesAllowedOnlyInBaseClasses E Ident Name ?       *  1398  1411  1411
  1425         END;                                                               1420
  1426         CheckInherited (Next);                                             1419  1282
  1427 }; .
  1428 Attribute (..) :- {                                                        1383
  1429         IF Inherited IN Properties THEN                                    1423  1423  1423  1423  1423
  1430            ? InheritedAttributesAllowedOnlyInBaseClasses E Ident Name ?    1424  1424  1424  1424
  1431         END;                                                               1425
  1432         CheckInherited (Next);                                             1426  1426
  1433 }; .
  1434 
  1435 
  1436 PROCEDURE CheckComplete (t: Tree)                                          1415   725  1415  1418
  1437 
  1438 Class (..) :- {                                                            1418
  1439         IF (Extensions^.Kind = Tree.NoClass) OR         (* Low ? *)        1429  1357  1418  1436  1357  1393
  1440            NOT IsElement (ORD ('B'), Options) THEN                         1407  1406  1406  1406  1429
  1441            FOR i := 1 TO InstCount DO                                      1331  1332  1331  1331  1332
  1442               WITH Instance^ [i] DO                                        1332  1336  1441  1441
  1443                  IF ( { Input , Computed } * Properties = { } )  AND       1439  1393  1120  1429  1410
  1444                     ((Terminal IN t^.Class.Properties) AND                 1394  1429  1436  1438  1443  1443
  1445                      (Attribute^.Kind = Tree.Attribute) OR                 1428  1439  1439     *  1439
  1446                     ({Synthesized, Left} <= Properties) OR                 1397  1340  1444  1445
  1447                     ({Inherited,  Right} <= Properties)) THEN              1429  1341  1446  1440
  1448                     CopyRule (t);                                             *  1444
  1449                     IF j = 0 THEN                                          1443    99  1447
  1450                        GetString (Name, String);                           1409  1430  1410
  1451                        ArrayToString (" = ", String2);                      655   111
  1452                        Concatenate (String, String2);                        40  1450  1451
  1453                        IF Right IN Properties THEN                         1449  1447  1444  1447  1449
  1454                           GetString (Selector^.Child.Name, String2);       1450  1260  1422  1450  1452
  1455                           Concatenate (String, String2);                   1452  1452  1454
  1456                           Append    (String, ':');                           40  1455
  1457                           GetString (Attribute^.Child.Name, String2);      1454  1445  1454  1454  1455
  1458                           Concatenate (String, String2);                   1455  1456  1457
  1459                        ELSE                                                1268
  1460                           GetString (Attribute^.Child.Name, String2);      1457  1457  1457  1457  1458
  1461                           Concatenate (String, String2);                   1458  1458  1460
  1462                        END;                                                1431
  1463                        ? AttributeComputationMissing E String String ?        *  1430  1461     *
  1464                     END;                                                   1462
  1465                  END;                                                      1464
  1466               END;                                                         1465
  1467            END;                                                            1466
  1468         END;                                                               1467
  1469 
  1470       IF IsElement (ORD ('L'), Options) THEN                               1453  1440  1440  1440  1453
  1471         FOR i := 1 TO AttrCount DO                                         1441  1442  1441  1307  1442
  1472            WITH Instance^ [i] DO                                           1442  1442  1471  1471
  1473               IF NOT (Input IN Properties) AND (Attribute^.Kind = Tree.Child) THEN     1470  1440  1443  1453  1453  1444
                                                                                  1460  1445  1445  1460  1470
  1474                  FOR j := 1 TO InstCount DO                                1471  1449  1471  1441  1472
  1475                     IF IsRelated (j, i, DP) THEN                           1473    51  1474  1472  1315  1473
  1476                        FOR k := 1 TO AttrCount DO                          1474    99  1474  1471  1474
  1477                           IF IsRelated (k, j, DP) THEN                     1475  1475  1476  1475  1475  1475
  1478                              Relations.Include (DP, k, i);                  386  1197  1477  1477  1475
  1479                           END;                                             1468
  1480                        END;                                                1479
  1481                     END;                                                   1480
  1482                  END;                                                      1481
  1483               END;                                                         1482
  1484            END;                                                            1483
  1485         END;                                                               1484
  1486       END;                                                                 1485
  1487 
  1488         IF IsCyclic (DP) THEN                                              1477    51  1478  1477
  1489            ? CycleInLocalDependenciesDP E Ident Name ?                        *  1463  1430  1460
  1490            WriteS (StdOutput, "Attribute Dependencies DP");                1345  1346
  1491            WriteNl (StdOutput); WriteNl (StdOutput);                       1346  1490     *     *
  1492            WriteDependencies (t, DP, MaxSet);                                68  1448  1488   707
  1493            WriteS (StdOutput, "Cyclic Attributes");                        1490  1491
  1494            WriteNl (StdOutput); WriteNl (StdOutput);                       1491  1493     *     *
  1495            MakeSet (Cyclics, InstCount);                                   1317    95  1474
  1496            GetCyclics (DP, Cyclics);                                         51  1492  1495
  1497            WriteCyclics (t, Cyclics); WriteNl (StdOutput);                   72  1492  1496  1494  1494
  1498            ReleaseSet (Cyclics);                                           1324  1497
  1499            Success := FALSE;                                                726   568
  1500         END;                                                               1486
  1501       IF IsElement (ORD ('M'), Options) THEN                               1488  1470  1470  1470  1488
  1502         WriteClass (t); WriteNl (StdOutput);                               1344  1497  1497  1497
  1503       END;                                                                 1500
  1504       IF IsElement (ORD ('P'), Options) THEN                               1501  1501  1501  1501  1501
  1505         WriteDependencies (t, DP, MaxSet);                                 1492  1502  1496  1492
  1506       END;                                                                 1503
  1507 }; .
  1508 
  1509 
  1510 PROCEDURE CopyRule (t: Tree)                                               1436  1448  1505  1473
  1511 (* global i is input: Instance subscript for the attribute
c 1512                       for which default copy computation is to
c 1513                       be supplied.
c 1514    global j is outpu: Instancs subscritp for the attribute
c 1515                       from which such a copy was generated.
c 1516                       Zero if no copy generated. 
c 1517 *) 
  1518 
  1519   LOCAL { VAR LLastParsIndex : SHORTCARD ;                                    *  1408     *   361
  1520           VAR LNewNode : tTree ;                                           1519     *   613
  1521         } 
  1522 
  1523 Class (..) :- {                                                            1444
  1524         WITH Instance^ [i] DO                                              1472  1472  1478  1476
  1525            j := 0;                                                         1477
  1526            IF i <= AttrCount THEN (* This is an attribute of the lhs node *)     1504  1524  1476  1504
  1527               Ident := Attribute^.Attribute.Name;                          1489  1473     *  1489
  1528               ForallAttributes (t, CopyRule2);                             1360  1510     *
  1529               (* This will set j to the instance subscript of the rightmost
c 1530                  nonlink child attribute with the same name and set global
c 1531                  Child to point to the child. j = 0 in none. *) 
  1532               IF j # 0 THEN (* Synthesized from rm child, including <attr>Out *)       1526  1525  1526
  1533                  INC (j, AttrCount + Child^.Child.InstOffset);             1135  1532  1526  1473     *   489
  1534                  Action := mCopy (nNoAction, NoPosition,                   1344    66    71  1120
  1535                     mIdent (Ident, NoPosition, nNoDesignator),             1003  1527  1534  1003
  1536                     mDesignator                                              66
  1537                       ( Instance ^[j].Selector^.Child.Name, Ident          1524  1533  1454  1533  1527  1535
  1538                       , NoPosition, NoPosition, nNoDesignator)             1535     *  1535
  1539                       ) ;
  1540                  INC (CopySynthesized);                                    1533   731
  1541               END;                                                         1506
  1542               IF (j = 0) AND (Thread IN Properties) THEN                   1532  1537  1473    60  1473  1473  1532
  1543                  (* <attr>Out := <attr>In copy for self node. *) 
  1544                  j := i - 1; (* <attr>In companion *)                      1542  1526
  1545                  Action := mCopy (nNoAction, NoPosition,                   1534  1534  1534  1538
  1546                     mIdent (Ident, NoPosition, nNoDesignator),             1535  1537  1545  1538
  1547                     mIdent (Instance^ [j].Attribute^.Attribute.Name, NoPosition, nNo\  1546  1537  1544  1527     *  1537
                                                                                  1546
      \Designator));                                                              1546
  1548                  INC (CopyThreaded);                                       1540   734
  1549               END;                                                         1541
  1550            ELSE (* attribute of Rhs node *)                                1459
  1551               IF (Thread IN Properties) AND (Selector^.Child.InstOffset > 0) THEN      1542  1542  1542  1542  1542  1537
                                                                                  1537  1533  1542
  1552                  Ident := Instance^ [i+1].Attribute^.Attribute.Name;       1546  1547  1544  1547     *  1547
  1553                           (* <attr>Out companion *)
  1554                  j := i - 1; (* Search to left from here *)                1547  1552
  1555                  LOOP                                                         *
  1556                     IF j <= AttrCount                                      1551  1554  1533
  1557                     THEN (* Do nott look at lhs attributes *)              1551
  1558                       j := 0; EXIT;                                        1556     *
  1559                     END;                                                   1549
  1560                     IF NOT ( Link IN Instance^ [j].Selector^.Child.Properties )        1556  1473    56  1551  1552  1558
                                                                                  1551  1551  1551
  1561                     AND ( Instance^ [j].Attribute^.Attribute.Name = Ident )      1551  1560  1560  1552     *  1552  1552
  1562                     THEN                                                   1557
  1563                        Action := mCopy (nNoAction, NoPosition,             1545  1545  1545  1547
  1564                           mDesignator                                      1536
  1565                             ( Selector^.Child.Name                         1560  1560  1561
  1566                             , Attribute^.Attribute.Name                    1561     *  1565
  1567                             , NoPosition, NoPosition, nNoDesignator        1563     *  1547
  1568                             ) ,
  1569                           mDesignator                                      1564
  1570                             ( Instance^ [j].Selector^.Child.Name           1561  1561  1565  1565  1566
  1571                             , Ident, NoPosition, NoPosition, nNoDesignator)      1561  1567     *  1567
  1572                             ) ;
  1573                        INC (CopyThreaded);                                 1548  1548
  1574                        EXIT;                                               1558
  1575                     END;                                                   1559
  1576                     DEC (j);                                                  *  1570
  1577                  END (* LOOP *) ;                                          1575
  1578               END (* IF *) ;                                               1577
  1579               IF j = 0 THEN                                                1560  1576  1562
  1580                  Ident := Attribute^.Attribute.Name;                       1571  1566     *  1570
  1581                  ForallAttributes (t, CopyRule);                           1528  1528  1510
  1582                  IF j # 0 THEN (* Inherit from parent *)                   1579  1579  1579
  1583                     Action := mCopy (nNoAction, NoPosition,                1563  1563  1563  1571
  1584                        mDesignator                                         1569
  1585                          ( Selector^.Child.Name, Ident                     1570  1570  1580  1580
  1586                          , NoPosition, NoPosition, nNoDesignator           1583     *  1571
  1587                          ) ,
  1588                        mIdent (Ident, NoPosition, nNoDesignator));         1547  1585  1586  1586
  1589                     INC (CopyInherited);                                   1573   728
  1590                  END;                                                      1578
  1591               END;                                                         1590
  1592            END;                                                            1591
  1593            IF j # 0 THEN                                                   1582  1582  1582
  1594               IF IsElement (ORD ('1'), Options) THEN                       1593  1504  1504  1504  1593
  1595                       WriteIdent (StdOutput, Name);                        1342  1502  1585
  1596                       WriteS     (StdOutput, "  = { ");                    1493  1595
  1597                       WriteClass (Action);                                 1502  1583
  1598                       WriteS     (StdOutput, " } .");                      1596  1596
  1599                       WriteNl    (StdOutput);                              1502  1598
  1600               END;                                                         1592
  1601               CopyArg := j;                                                1336  1593
  1602               TheAction := Action;                                          107  1597
  1603               Relations.Include (DP, i, j);                                1478  1478  1505  1554  1601
  1604               INCL (Properties, CopyDef);                                  1336  1560  1335
  1605               INCL (Instance^[CopyArg].Properties, CopyUse);               1604  1570  1601  1604  1336
  1606               INCL (Properties, Write);                                    1605  1605  1393
  1607               INCL (Properties, Computed);                                 1606  1606  1443
  1608               INCL (Instance^[CopyArg].Properties, Read);                  1607  1605  1605  1607  1389
  1609               INCL (Attribute^.Attribute.Properties, Write);               1608  1580     *  1608  1606
  1610               INCL (Attribute^.Attribute.Properties, Computed);            1609  1609     *  1609  1607
  1611               INCL (Instance^[CopyArg].Attribute^.Attribute.Properties, Read);   1610  1608  1608  1610     *  1610  1608
  1612               IF Right IN Properties THEN                                  1594  1453  1560  1611  1594
  1613                  INCL (Selector^.Child.Properties, Read);                  1611  1585  1585  1612  1611
  1614               END;                                                         1600
  1615               IF Right IN Instance^[CopyArg].Properties THEN               1612  1612  1612  1611  1611  1613  1612
  1616                  INCL (Instance^[CopyArg].Selector^.Child.Properties, Read);     1613  1615  1615  1613  1613  1615  1613
  1617               END;                                                         1614
  1618            END;                                                            1617
  1619         END;                                                               1618
  1620         IF j # 0 THEN                           (* update abstract syntax *)     1615  1603  1615
  1621            INCL (Properties, HasActions);                                  1616  1616  1049
  1622            IF Attributes^.Kind = Tree.NoAttribute THEN                     1620  1419  1473  1510   935  1620
  1623               Attributes := mActionPart (Attributes, TheAction);           1622  1030     *  1602
  1624               Attributes^.ActionPart.ParsIndex := 1 ;                      1623  1223   163
  1625               INC ( ActionName ) ;                                         1589   678
  1626               Attributes^.ActionPart.Name := ActionName ;                  1624  1624  1595  1625
  1627            ELSE                                                            1550
  1628               Node := Attributes;                                          1270  1626
  1629               LLastParsIndex := 0 ;                                        1519
  1630               LOOP                                                         1555
  1631                 CASE Node^.Kind                                             574  1628  1622
  1632                 OF Tree.Child                                               574  1622  1616
  1633                   : LLastParsIndex := Node^.Child.ParsIndex                1629  1631  1632  1624
  1634                 | Tree.ActionPart                                          1632  1626
  1635                   : LLastParsIndex := Node^.ActionPart.ParsIndex           1633  1633  1634  1633
  1636                 ELSE                                                       1627
  1637                 END (* CASE *)                                             1619
  1638               ; IF Node^.AttrOrAction.Next^.Kind = Tree.NoAttribute        1622  1635  1031  1432  1631  1634  1622
  1639                 THEN EXIT ;                                                1622  1574
  1640                 ELSE                                                       1636
  1641                   Node := Node^.AttrOrAction.Next;                         1638     *  1638  1638
  1642                 END (* IF *)                                               1637
  1643               END (* LOOP *) ;                                             1642
  1644               LNewNode := mActionPart (nNoAttribute, TheAction);           1520  1623  1102  1623
  1645               Node^.AttrOrAction.Next := LNewNode ;                        1641  1641  1641  1644
  1646               LNewNode^.ActionPart.ParsIndex := LLastParsIndex + 1 ;       1645  1635  1635  1635
  1647               INC ( ActionName ) ;                                         1625  1626
  1648               LNewNode^.ActionPart.Name := ActionName ;                    1646  1646  1626  1647
  1649            END;                                                            1643
  1650         END;                                                               1649
  1651 }; .
  1652 Child (..) :- {                                                            1633
  1653         IF Name = Ident THEN Child := Attribute; j := AttrIndex; END;      1638  1648  1588  1639  1652  1611  1620  1320
                                                                                  1650
  1654 }; .
  1655 Attribute (..) :- {                                                        1653
  1656         IF Name = Ident THEN Child := Attribute; j := AttrIndex; END;      1653  1653  1653  1653  1653  1655  1653  1653
                                                                                  1653
  1657 }; .
  1658 
  1659 
  1660 PROCEDURE CopyRule2 (t: Tree)                                              1510  1528  1581  1638
  1661 
  1662 Child (..) :-                                                              1656
  1663    Class # NoTree;                                                         1523  1394
  1664    NOT ( Link IN Properties ) ;                                            1560  1560  1615  1621
  1665    Attribute := t;                                                         1656  1660
  1666    ForallAttributes (Class, CopyRule);                                     1581  1663  1581
  1667    .
  1668 
  1669 PREDICATE IsCopy (Designators)                                                *   396  1275
  1670 
  1671 Designator (..) :-                                                         1246
  1672    VAR Attr : tTree ;                                                      1520     *  1520
  1673    VAR ChildsClass : tTree ;                                               1672   492  1672
  1674    Attr := IdentifyAttribute (Class, Selector);                            1672  1319  1666  1616
  1675    Attr # NoTree;                                                          1674  1663
  1676    Attr^.Kind = Tree.Child;                                                1675  1638  1660  1662
  1677    ChildsClass := Attr^.Child.Class;                                       1673  1676  1676  1674
  1678    ChildsClass # NoTree;                                                   1677  1675
  1679    IdentifyAttribute (ChildsClass, Attribute) # NoTree;                    1674  1678  1665  1678
  1680    IsWhiteSpace (Next);                                                       *  1645
  1681    .
  1682 Ident (..) :-                                                              1656
  1683    IdentifyAttribute (Class, Attribute) # NoTree;                          1679  1677  1679  1679
  1684    IsWhiteSpace (Next);                                                    1680  1680
  1685    .
  1686 Any (..) :-                                                                1280
  1687    IsWhiteSpace2 (Code);                                                      *  1237
  1688    IsCopy (Next);                                                          1669  1684
  1689    .
  1690 Anys (..) :-                                                               1281
  1691    IsCopy (Next);                                                          1688  1688
  1692    .
  1693 
  1694 PREDICATE IsWhiteSpace (Designators)                                       1669  1684  1669
  1695 
  1696 Any (..) :-                                                                1686
  1697    IsWhiteSpace2 (Code);                                                   1687  1687
  1698    IsWhiteSpace (Next);                                                    1694  1691
  1699    .
  1700 Anys (..) :-                                                               1690
  1701    IsWhiteSpace (Next);                                                    1698  1698
  1702    .
  1703 NoDesignator (..) :-                                                        568
  1704    .
  1705 
  1706 PREDICATE IsWhiteSpace2 (tStringRef) LOCAL { VAR i: CARDINAL; }            1694  1697    39  1519  1673  1603     *
  1707 
  1708 Code:_ :-                                                                  1697     *
  1709    VAR String : tString ;                                                  1706  1463  1408
  1710    VAR  ch : CHAR ;                                                        1709     *     *
  1711    StringMem.GetString (Code, String);                                       75  1460  1708  1709
  1712 {  FOR i := 1 TO Length (String) DO                                        1476  1706  1476    41  1711  1524
  1713       ch := Char (String, i);                                              1710  1410  1712  1712
  1714       IF (ch # ' ') AND (ch # 012C) AND (ch # 011C) THEN RETURN FALSE; END;      1656  1713  1561     *     *     *  1656
                                                                                   585  1499  1656
  1715    END;                                                                    1714
  1716 }; .
  1717 
Cross reference: 

-A-
 Abstract                        72   750  1041  1209  1359 
 AbstractTypeRequired          1210 
 Action                         301   301   311   311   332   332   340   340   407   407   408   426   426   427   446   446   447 
                                480  1334  1334  1334  1339  1339  1344  1534  1545  1563  1583  1597  1602 
 ActionCount                     82  1044  1049  1069 
 ActionName                      82   164   165   678  1625  1626  1647  1648 
 ActionPart                     131   131   161   163   165   166   188   189   211   212   237   238   259   260   283   284   314 
                                315   343   344   390   391   392   393   581   581   760   826   980  1028  1032  1068  1223  1624 
                               1626  1634  1635  1646  1648 
 Actions                        392   477   582   981  1030  1224  1243 
 ActProperties                  112   772   778   780   787   797   805   817   821   824   827   880   888   896 
 ADR                             35   301   311   332   340   407   426   446  1334  1339 
 Ag                             599   636   692   779   780   780   781   782   784   796   797   797   798   799   801   834   834 
                                885   887   888   889   890   892   914   917   918   919   920   922  1082  1090  1091  1092  1093 
                               1094  1095  1097  1205  1265  1293 
 AND                            129   130   131   440   487   503   503   503   534   534   534  1050  1115  1119  1156  1294  1294 
                               1295  1334  1339  1339  1364  1365  1368  1368  1369  1370  1375  1376  1385  1386  1389  1393  1394 
                               1410  1443  1444  1473  1542  1551  1561  1714  1714 
 Any                            552   553   566   566  1280  1686  1696 
 Anys                           554   555   567   567  1281  1690  1700 
 Append                          40  1456 
 AppendAttr                     613   619   621  1018  1025  1033 
 argument                       352   354 
 Arguments                       94   396   398   400   400   409   412   417   419   419   428   431   436   438   439   450   455 
                                457   457   460   466   470   473   477   481  1228  1233  1317  1324 
 ArrayToString                   40   653   655  1451 
 Assign                          51   395   396   399   400   414   984  1226 
 AssignEmpty                     47   397   398   416   417   435   436   454   455   465   466  1160 
 AssignmentLhsNamesNoAttribut\  402 
   es
 AssignmentToInputAttribute    1377  1395 
 Attr                          1672  1674  1675  1676  1677 
 AttrCount                      199   223   231   379   380   385   489  1307  1471  1476  1526  1533  1556 
 Attribute                      105   130   130   159   160   186   187   207   209   210   235   236   256   257   258   281   282 
                                299   307   308   309   310   313   330   335   336   338   339   342   360   369   370   371   373 
                                384   385   486   487   487   488   489   490   492   492   493   494   495   497   498   499   500 
                                502   505   515   523   523   524   525   526   528   529   530   531   533   536   546   575   575 
                                613   616   617   619   757   823   879   888   896   902   905   906   908   908   935   936   938 
                                977  1006  1006  1021  1060  1175  1253  1255  1269  1271  1319  1320  1320  1333  1383  1428  1445 
                               1445  1457  1460  1473  1527  1527  1547  1547  1552  1552  1561  1561  1566  1566  1580  1580  1609 
                               1609  1610  1610  1611  1611  1653  1655  1656  1665  1679  1683 
 AttributeComputationMissing   1463 
 AttributeCount                  82  1043  1048  1064 
 AttributeMultipleComputed      505   536 
 AttributeNeverSet             1366  1387 
 AttributeNeverUsed            1372  1390 
 AttributeNotDeclared          1255  1271 
 Attributes                     152   178   198   222   248   270   295   325   367   613   615   616   617   619   751   813   818 
                                862   862   866   866   879   901   902   904   918   926   931   932   932   934   938   969   971 
                                971  1001  1001  1005  1005  1018  1025  1033  1078  1120  1120  1221  1419  1622  1623  1623  1624 
                               1626  1628 
 AttributeSynthesizedAsWellAs\ 1380  1398 
   Inherited
 AttrIndex                      205   209   298   308   328   336   370   371   378   380   385   494   498   502   525   529   533 
                               1320  1653  1656 
 AttrOrAction                   127   127   132   616   619  1017  1024  1031  1638  1641  1645 

-B-
 b                              137   140   141 
 BaseClass                      140   294   324   365   595   595   970  1094  1104  1119  1418 
 BEGIN                          115   125   138   148   174   195   219   245   267   291   321   353   362   561   573   591   614 
                                624 
 Begin                          858 
 BitCount                       249   277 
 BitOffset                      275 
 BITSET                         112 
 BlockLhsNamesNoAttributes      441 
 BOOLEAN                        102   114   357   359   560 

-C-
 CARDINAL                      1706 
 CASE                           150   176   196   220   246   268   292   322   363   562   574  1631 
 ch                            1710  1713  1714  1714  1714 
 CHAR                          1710 
 Char                            41  1410  1410  1713 
 Check                          359   365   367   373   389   392   393   414   433   452   462   463   464   467   469   470   472 
                                473   477   478   482   482   514   518   521   545   548   550   551   553   555   996  1240 
 CheckComplete                  725  1436 
 CheckDesignator                699  1217  1221  1224  1227  1228  1229  1232  1233  1234  1237  1238  1241  1242  1243  1244  1262 
                               1275  1276  1282 
 CheckInherited                 717  1415  1419  1426  1432 
 CheckNames                     692   693  1143  1161  1182  1183  1186  1187  1190  1191  1198 
 CheckNames2                   1163  1202  1213 
 CheckReverse                   669  1125  1130 
 ChecksCount                     84   626   998   999 
 CheckSelect                    777   831   837 
 CheckUsage                     736  1354  1360 
 CheckUsage2                    683  1403 
 CheckWithoutStatement          475 
 Child                          106   129   129   155   157   158   182   184   185   203   205   206   228   229   230   231   231 
                                233   253   254   255   274   275   276   277   277   279   297   298   300   303   304   304   306 
                                327   328   331   334   374   375   377   378   380   380   385   385   389   487   488   489   490 
                                494   495   497   498   499   502   525   526   528   529   530   533   578   578   754   820   974 
                               1014  1057  1081  1133  1165  1249  1252  1253  1292  1333  1363  1422  1454  1457  1460  1473  1533 
                               1533  1537  1551  1560  1565  1570  1585  1613  1616  1632  1633  1652  1653  1656  1662  1676  1677 
 ChildCount                      82  1042  1047  1058 
 ChildIndex                     184 
 ChildRequired                 1250 
 ChildsClass                    360   375   376   379   384   488   491   492  1673  1677  1678  1679 
 ChildsClassHasNoSuchAttribute  515 
 Class                          109   139   140   141   142   151   152   153   154   177   178   179   180   181   197   198   199 
                                200   201   221   222   223   223   224   225   226   230   231   231   247   248   249   250   251 
                                269   270   271   272   276   277   277   293   294   295   303   304   323   324   325   364   365 
                                367   375   379   380   380   385   385   387   387   406   406   425   425   445   445   480   480 
                                486   488   489   489   498   498   502   502   523   529   529   533   533   589   592   592   595 
                                602   663   670   749   816   865   885   886   893   894   896   897   898   901   901   902   902 
                                904   904   913   914   916   923   924   926   927   928   931   931   932   932   934   934   941 
                                941   942   942   944   944   945   946   948   951   951   952   952   954   954   967   968  1001 
                               1001  1001  1001  1005  1005  1005  1005  1018  1025  1033  1040  1045  1047  1048  1049  1063  1063 
                               1075  1082  1083  1084  1084  1085  1094  1095  1098  1099  1101  1102  1103  1104  1104  1105  1105 
                               1114  1127  1145  1205  1206  1209  1209  1219  1220  1247  1252  1253  1289  1293  1294  1304  1313 
                               1318  1330  1356  1358  1375  1376  1376  1376  1393  1394  1394  1394  1405  1417  1418  1438  1444 
                               1523  1663  1666  1674  1677  1683 
 class                          590   599   600   601   603 
 ClassChildCount                179 
 ClassCount                      70   666  1041  1107 
 Classes                        599   637   638   648   661   746   782   789   799   807   850   875   885   887   888   889   890 
                                892   914   917   918   919   920   922  1082  1090  1091  1092  1093  1094  1095  1097  1205  1265 
                               1293 
 ClassNames                      88   688   694  1146  1149 
 cLNC                            68   726 
 Close                          859 
 Code                           438   440   919   927  1050  1051  1052  1054  1115  1117  1237  1687  1697  1708  1711 
 Codes                          853 
 CodesUsed                       92   667   698  1051  1054  1116 
 CodeTerminals                  677  1112 
 CompBaseClass                  137   141   142   144   664 
 CompBitCount                   244   248   250   251   255   258   260   264   700 
 CompBitOffset                  266   270   271   272   277   279   282   284   288   701 
 CompChildIndex                 172   178   180   181   185   187   189   192   680 
 CompDP                         709  1311 
 CompDP1                        359   365   367   373   389   392   393   399   400   414   418   419   433   437   438   452   456 
                                457   462   467   470   473   477   482   521   548   550   551   553   555   558  1322 
 CompIndex                      194   198   200   201   206   210   212   216   704 
 CompInstance                   218   222   225   226   231   233   236   238   242   705 
 Complement                      49   707 
 CompParsIndex                  146   152   153   154   158   160   166   169   682 
 CompReachable                  671  1073  1078  1079  1085 
 Computed                        56   498   529   971  1120  1443  1607  1610 
 Concatenate                     40  1452  1455  1458  1461 
 Condition                      469   470  1242 
 CONST                           77 
 Copy                           396   409   415   418   419   433   987  1231  1334 
 CopyArg                        409   428  1336  1601  1605  1608  1611  1615  1616 
 CopyDef                         59  1335  1604 
 CopyInherited                   81   628   727   728  1589 
 CopyProperties                 716  1328 
 CopyRule                      1448  1510  1581  1666 
 CopyRule2                     1528  1660 
 CopyRuleInsertionsInherited    728 
 CopyRuleInsertionsSynthesized  731 
 CopyRuleInsertionsThreaded     734 
 CopyRuleLhsNamesNoAttributes   421 
 CopySynthesized                 81   629   730   731  1540 
 CopyThreaded                    81   630   733   734  1548  1573 
 CopyTree                       572   576   579   582   587   888   896   902   908 
 CopyUse                         60  1336  1605 
 CountClasses                   668  1038  1046 
 CycleInLocalDependenciesDP    1489 
 Cyclics                         95  1495  1496  1497  1498 

-D-
 DEC                           1576 
 Decl                           812   861   878 
 Decls                          647   650   781   788   798   806   849   874 
 Designator                     485   486   492   500   505   515   519   521   563  1246  1671 
 Designators                    550  1275  1669  1694 
 Difference                      49   439 
 DO                             116   298   308   328   336   379   404   406   423   425   443   445   458   502   533   575   578 
                                581   592   597   598   785   893   905   923   935   945   955  1098  1331  1332  1441  1442  1471 
                               1472  1474  1476  1524  1712 
 DP                            1314  1315  1475  1477  1478  1488  1492  1496  1505  1603 
 Dummy                           62   254   257   971  1384 
 DummyIndex                      98   370   371   378   386  1320  1321 
 DynArray                        38 

-E-
 E                              402   421   441   500   505   515   519   531   536   546  1052  1137  1147  1152  1157  1170  1177 
                               1195  1207  1210  1250  1255  1260  1267  1271  1297  1377  1380  1395  1398  1424  1430  1463  1489 
 ELSE                           167   190   232   278   474   618   654   800   804   891   900   903   921   930   933   943   953 
                               1004  1086  1096  1208  1251  1259  1268  1459  1550  1627  1636  1640 
 ELSIF                          514   518   545 
 END                            117   119   121   128   133   135   143   144   168   169   191   192   215   216   234   241   242 
                                254   257   263   264   280   287   288   302   305   312   317   318   333   341   346   347   355 
                                372   381   382   388   391   396   403   409   410   411   413   422   429   430   432   442   448 
                                449   451   461   468   471   476   483   501   506   509   510   511   512   513   516   517   520 
                                532   537   540   541   542   543   544   547   557   558   569   570   577   580   583   586   587 
                                595   604   606   607   609   610   611   620   621   646   656   684   715   723   726   729   732 
                                735   737   752   783   790   792   808   809   836   848   867   895   899   907   909   910   925 
                                929   937   939   947   949   957   959   960   972  1007  1019  1026  1034  1041  1047  1048  1049 
                               1053  1055  1065  1066  1089  1100  1106  1108  1118  1121  1131  1138  1139  1148  1153  1155  1158 
                               1162  1171  1172  1178  1196  1211  1212  1256  1257  1258  1261  1272  1273  1298  1337  1347  1348 
                               1349  1350  1361  1367  1373  1374  1378  1381  1388  1391  1392  1396  1399  1420  1425  1431  1462 
                               1464  1465  1466  1467  1468  1479  1480  1481  1482  1483  1484  1485  1486  1500  1503  1506  1541 
                               1549  1559  1575  1577  1578  1590  1591  1592  1600  1614  1617  1618  1619  1637  1642  1643  1649 
                               1650  1653  1656  1714  1715 
 EnterDependency                352   355   412   431   450   460   481 
 Errors                          75 
 EvalCodes                      645   847 
 EXCL                           508   539   608 
 EXIT                          1558  1574  1639 
 ExpandChecks                   686   965   969   975   978   981   982   985   988   991   994  1008 
 ExpandModules                  650   651   871   874   875   876   881   882   911   961 
 ExpandMultiple                 589   595   601   611   665 
 ExpandMultiple2                603  1012 
 ExpandProps                    640   641   765   768   769   773   774   781   782   788   789   793   798   799   806   807   810 
                                813   814   818 
 EXPORT                          31 
 Export                         854 
 Extensions                     142   153   180   200   225   250   271   915   918   926   941   942   942   944   948  1079  1128 
                               1159  1357  1439 
 Extract                         48   405   424   444   459   479 

-F-
 FALSE                          120   365   366   400   438   467   470   473   477   568  1499  1714 
 FOR                            379  1331  1441  1471  1474  1476  1712 
 ForallAttributes                67   603   751   813   818  1046  1078  1130  1161  1221  1290  1360  1528  1581  1666 
 ForallClasses                   67   638   648   665   668   669   677   683   686   687   693   699   708   709   716   717   725 
                                736   746   782   789   799   807   850   915  1079 
 ForallDo                        49   412   431   450   460   481 
 FROM                            35    36    37    38    39    40    42    43    46    51    52    54 

-G-
 General                         36 
 GetCyclics                      51  1496 
 GetString                       42  1409  1450  1454  1457  1460  1711 
 GLOBAL                          33 
 Global                         856 
 GrammarClass                    68   726 

-H-
 HasActions                      63  1049  1621 
 HasAttributes                   63  1048 
 HasChildren                     63  1047 
 HasItem                         72  1015  1022  1029 

-I-
 I                              728   731   734 
 i                               99   114   117   379   380   679   680   681   682   700   701   704   705  1331  1332  1441  1442 
                               1471  1472  1475  1478  1524  1526  1544  1552  1554  1603  1706  1712  1713 
 Ident                           87   500   505   515   519   522   523   531   531   536   536   546   546   548   564   657   660 
                                803   835  1000  1001  1001  1003  1006  1006  1088  1147  1152  1157  1170  1177  1195  1207  1255 
                               1260  1267  1271  1279  1297  1366  1372  1377  1380  1387  1390  1395  1398  1411  1424  1430  1489 
                               1527  1535  1537  1546  1552  1561  1571  1580  1585  1588  1653  1656  1682 
 Identify                       687  1287  1290 
 IdentifyAttribute               69   384   486   492   523  1247  1253  1269  1319  1674  1679  1683 
 IdentifyClass                   69   599   885   914  1082  1205  1265  1293 
 IdentifyModule                  69   801   834 
 Idents                          42 
 IF                             117   126   129   139   230   254   257   276   303   370   376   377   391   396   401   407   409 
                                420   426   440   446   464   469   472   478   487   491   493   496   499   503   507   509   510 
                                524   527   530   534   538   540   541   593   595   600   615   642   652   673   703   710   718 
                                726   727   730   733   750   779   786   796   802   834   844   867   886   887   901   916   917 
                                931   941   951   970   997  1015  1022  1029  1041  1047  1048  1049  1050  1051  1061  1063  1083 
                               1087  1090  1115  1119  1128  1134  1136  1146  1150  1151  1156  1159  1166  1167  1176  1194  1206 
                               1209  1248  1249  1252  1254  1266  1270  1294  1334  1338  1339  1357  1364  1365  1368  1375  1379 
                               1385  1386  1389  1393  1397  1418  1423  1429  1439  1443  1449  1453  1470  1473  1475  1477  1488 
                               1501  1504  1526  1532  1542  1551  1556  1560  1579  1582  1593  1594  1612  1615  1620  1622  1638 
                               1653  1656  1714 
 Ignore                          59   129   130   131   642   778   844   867 
 Implicit                        64  1091  1101 
 IMPORT                          35    36    37    38    39    40    42    43    45    46    51    52    54    75 
 Import                         855 
 IN                             129   130   131   377   391   407   426   446   499   503   504   507   530   534   535   538   593 
                                642   750   844   867  1041  1050  1063  1076  1119  1134  1150  1209  1339  1359  1365  1365  1368 
                               1368  1376  1386  1386  1389  1389  1394  1407  1423  1429  1444  1453  1473  1542  1551  1560  1612 
                               1615  1664 
 In                             194   198   201   204   205   206   208   209   210   212   214   218   222   226   229   231   233 
                                236   238   240   244   248   251   254   255   257   258   260   262   266   270   272   275   277 
                                279   282   284   286 
 INC                            156   162   164   183   204   208   254   257   755   758   761   998  1041  1058  1064  1069  1107 
                               1116  1135  1533  1540  1548  1573  1589  1625  1647 
 INCL                           387   490   495   497   498   509   510   526   528   529   540   541   594   670   726  1032  1047 
                               1048  1049  1077  1084  1321  1335  1336  1604  1605  1606  1607  1608  1609  1610  1611  1613  1616 
                               1621 
 Include                         48   354   371   378   380   386   494   525   660  1054  1062  1149  1154  1173  1179  1197  1478 
                               1603 
 include                         78 
 Index                          146   149   152   153   156   157   158   160   162   163   166   172   175   178   179   180   183 
                                184   185   187   189 
 Inherited                       58   497   530  1341  1379  1397  1423  1429  1447 
 InheritedAttributesAllowedOn\ 1424  1430 
   lyInBaseClasses
 InheritedUseOfSynthesizedAtt\  500 
   ribute
 InitIdentifyClass               73   637 
 InitIdentifyClass2              73   890   898   915   920   928  1093  1103 
 InitInstance                   290   294   295   306   313   315   318  1307 
 InitInstance0                  708  1302 
 InitInstance1                  304   320   324   325   334   342   344   347 
 Input                           58   254   257   377  1120  1365  1375  1386  1393  1443  1473 
 Instance                       387   406   425   445   480   498   502   529   533  1306  1307  1321  1332  1336  1442  1472  1524 
                               1537  1547  1552  1560  1561  1570  1605  1608  1611  1615  1616 
 InstancePtr                    290   294   295   298   304   306   308   313   315   320   324   325   328   334   336   342   344 
 InstanceSize                   100  1305  1306 
 InstCount                      223   224  1305  1314  1314  1316  1317  1331  1441  1474  1495 
 InstOffset                     229   304   380   385   489  1533  1551 
 INTEGER                         82    85   350   359 
 Integer                        728   731   734  1052 
 IntToString                     40   631   999 
 iNull                           86   384   631   971   971  1319 
 IO                              37 
 iPosition                       71  1063  1120 
 IsAbstract                     101  1359  1364  1385 
 IsCode                         440   560   566   567   570 
 IsCopy                         396  1669  1688  1691 
 IsCyclic                        51  1488 
 IsElement                       48   652   673   674   675   703   710   718  1051  1087  1116  1146  1151  1156  1166  1167  1168 
                               1169  1176  1194  1294  1295  1296  1338  1364  1369  1370  1371  1385  1406  1440  1470  1501  1504 
                               1594 
 IsEmpty                         48   401   404   420   423   440   443   458 
 IsRelated                       51  1475  1477 
 IsWhiteSpace                  1680  1684  1694  1698  1701 
 IsWhiteSpace2                 1687  1697  1706 
 Item                           755   758   761  1015  1017  1017  1022  1024  1024  1029  1031  1031 
 ItemCount                       83   625   755   755   758   758   761   761 
 itPosition                      71  1120 

-J-
 j                               99  1449  1474  1475  1477  1525  1532  1533  1537  1542  1544  1547  1554  1556  1558  1560  1561 
                               1570  1576  1579  1582  1593  1601  1603  1620  1653  1656 

-K-
 k                               99  1476  1477  1478 
 Kind                           116   126   129   130   131   139   150   176   196   220   246   268   292   322   363   396   409 
                                487   562   574   595   597   615   785   887   893   901   905   917   923   931   935   941   945 
                                951   955   970  1090  1098  1119  1128  1159  1249  1334  1357  1418  1439  1445  1473  1622  1631 
                               1638  1676 

-L-
 LayoutAny                     1282 
 Left                            61   300   310  1321  1340  1446 
 LeftAssoc                     1181 
 Length                          41  1712 
 Link                            56  1560  1664 
 LLastParsIndex                1519  1629  1633  1635  1646 
 LNewNode                      1520  1644  1645  1646  1648 
 LOCAL                         1519  1706 
 Local                          857 
 LONGINT                        100 
 LookUp                         114   121   779   786 
 LOOP                          1555  1630 

-M-
 mActionPart                     64   582  1030  1623  1644 
 MakeArray                       38  1306 
 MakeIdent                       42   631   657  1000 
 MakeRelation                    51  1314 
 MakeSet                         47   659   667   688   689   690   691   706  1316  1317  1495 
 MakeText                        43   854   855   856   857   858   859 
 Mark                            72   593   594   608 
 mAttribute                      65   576   971  1001  1005  1023  1120 
 Max                             36   224 
 MaxIdent                        42   658   667   688   689   690   691 
 MaxInstCount                    96   224   224   627   706 
 MaxSet                          66   706   707  1492  1505 
 mChild                          65   579  1016 
 mClass                          65   888   896   918   926  1091  1101 
 mCopy                           66  1534  1545  1563  1583 
 mDesignator                     66  1536  1564  1569  1584 
 mIdent                          65  1003  1535  1546  1547  1588 
 Module                         103   745   767   784   785   785   786   786   787   787   787   787   788   788   789   789   791 
                                791   791   801   802   805   805   805   805   806   806   807   807   843   873 
 ModuleNotDeclared              803   835 
 Modules                        639   641   649   651   784   801   834 
 MultInhComp                     60   391   407   426   446   504   507   508   510   535   538   539   541  1032 
 MultipleInheritedActions       357   366   391   407   426   446   503   507   510   534   538   541 

-N-
 Name                           116   117   117   118   165   576   579   597   598   599   779   786   795   796   796   801   803 
                                833   834   834   834   835   884   885   888   889   896   897   914   918   926   955   956   958 
                               1016  1023  1063  1146  1147  1149  1166  1170  1173  1176  1177  1179  1193  1194  1195  1197  1204 
                               1205  1207  1342  1366  1372  1377  1380  1387  1390  1395  1398  1409  1411  1424  1430  1450  1454 
                               1457  1460  1489  1527  1537  1547  1552  1561  1565  1566  1570  1580  1585  1595  1626  1648  1653 
                               1656 
 Names                          596   773   777   779   786   831   867   881   919   927   951   952   952   954   958  1163  1182 
                               1186  1190 
 Next                           118   127   127   132   141   154   158   160   166   181   185   187   189   201   206   210   212 
                                226   231   233   236   238   251   255   258   260   272   277   279   282   284   306   313   315 
                                334   342   344   373   389   393   414   433   452   462   482   521   548   551   553   555   566 
                                567   576   579   582   605   616   619   747   769   774   791   793   810   814   837   851   863 
                                876   882   893   894   896   897   898   905   906   908   911   923   924   926   927   928   935 
                                936   938   945   946   948   955   956   958   961   975   978   982   985   988   991   994  1008 
                               1098  1099  1101  1102  1103  1104  1105  1183  1187  1191  1198  1213  1229  1234  1238  1244  1262 
                               1276  1282  1426  1432  1638  1641  1645  1680  1684  1688  1691  1698  1701 
 nNoAction                       71  1534  1545  1563  1583 
 nNoAttribute                    70   585  1092  1102  1644 
 nNoClass                        70   664   889   897  1092  1094  1102  1104 
 nNoDesignator                   70  1003  1535  1538  1546  1547  1567  1571  1586  1588 
 nNoName                         71   867   889   897  1092  1102 
 NoAction                       484 
 NoAttribute                     60   126   213   239   261   285   316   345   394   584   615   901   905   931   935  1622  1638 
 NoClass                        202   227   252   273   296   326   368   887   893   917   923   941   945   970  1090  1098  1119 
                               1128  1159  1357  1439 
 NoCodeAttr                      61  1061 
 Node                           104   590   596   597   598   605   892   893   894   894   896   897   898   904   905   906   906 
                                908   922   923   924   924   926   927   928   934   935   936   936   938   944   945   946   946 
                                948   954   955   956   956   958  1016  1017  1018  1023  1024  1025  1030  1031  1032  1033  1097 
                               1098  1099  1099  1101  1102  1103  1104  1105  1247  1248  1249  1252  1253  1253  1254  1265  1266 
                               1269  1269  1270  1628  1631  1633  1635  1638  1641  1641  1645 
 NoDesignator                   556   568  1703 
 NodeTypeMultipleDeclared      1147 
 NodeTypeNotDeclared           1088  1207  1267  1297 
 NodeTypeNotUsed               1411 
 NoIdent                         42   889   897  1092  1102  1156 
 NoName                         951   955 
 NonAssoc                      1189 
 NonBase                        359   367   373   389   392   393   399   400   414   418   419   433   437   438   452   456   457 
                                462   467   470   473   477   482   503   509   521   534   540   548   550   551   553   555 
 NonBaseComp                     62   503   509   534   540  1339 
 Nonterminal                     63  1063 
 NoPosition                      52   971  1002  1003  1006  1120  1534  1535  1538  1538  1545  1546  1547  1563  1567  1567  1571 
                               1571  1583  1586  1586  1588 
 NoSuchAttribute                546 
 NoSuchChild                    519 
 NOT                            377   404   407   423   426   443   446   458   503   504   507   534   535   538   593   779   786 
                                834  1015  1022  1029  1041  1076  1087  1116  1156  1167  1209  1294  1295  1296  1339  1364  1364 
                               1365  1365  1368  1368  1369  1370  1371  1376  1385  1385  1386  1386  1389  1389  1394  1406  1407 
                               1440  1473  1560  1664 
 NoTree                          55   230   276   303   376   464   469   472   478   487   491   493   524   600   802   834   886 
                                916   997  1016  1023  1030  1083  1206  1248  1252  1254  1266  1270  1294  1375  1376  1393  1394 
                               1663  1675  1678  1679  1683 

-O-
 OF                             150   176   196   220   246   268   292   322   363   562   574  1632 
 Offset                         290   294   295   304   306   313   315   320   324   325   328   334   336   342   344   361   385 
                                386   387   489   494   498   502 
 OldIndex                       147   149   154   173   175   181 
 OnlyOneReverseAllowedInNodeT\ 1137 
   ype
 Options                         67   652   673   674   675   703   710   718  1087  1167  1168  1169  1294  1295  1296  1338  1364 
                               1369  1370  1371  1385  1406  1440  1470  1501  1504  1594 
 OR                             129   130   407   407   426   426   446   446   507   538   673   674   834  1063  1167  1168  1340 
                               1375  1393  1439  1445  1446 
 ORD                            652   673   674   675   703   710   718  1087  1167  1168  1169  1294  1295  1296  1338  1364  1369 
                               1370  1371  1385  1406  1440  1470  1501  1504  1594 
 Order                          453   456   457   462   993  1278 
 Out                            194   198   199   200   200   201   206   210   212   214   218   222   223   225   225   226   231 
                                233   236   238   240   244   248   249   250   250   251   255   258   260   262   266   270   271 
                                271   272   277   279   282   284   286 
 Output                          58  1368  1389 

-P-
 ParserCodes                    643   845 
 ParsIndex                      157   163  1624  1633  1635  1646 
 Pos                            576   579   889   897   919   927  1016  1023  1092  1102 
 Positions                       52 
 Prec                           919   927  1156  1156  1157 
 PrecedenceMultipleDeclared    1195 
 PrecedenceNotDeclared         1157 
 PrecNames                       91   691   697  1156  1194  1197 
 Precs                          692 
 PREDICATE                     1669  1694  1706 
 PROCEDURE                      114   123   137   146   172   194   218   244   266   290   320   352   359   560   572   589   613 
                                634   743   765   831   841   871   965  1012  1038  1073  1112  1125  1143  1202  1217  1287  1302 
                               1311  1328  1354  1403  1415  1436  1510  1660 
 ProcessIgnore                  643   644   645   647   648   649   841   845   846   847   849   850   851   863 
 ProcessIgnore2                 123   127   135   862   866 
 Prop                           771 
 Properties                     129   130   131   254   257   300   300   310   310   331   331   339   339   377   387   391   407 
                                426   446   490   495   497   498   499   503   504   507   508   509   510   526   528   529   530 
                                534   535   538   539   540   541   576   579   593   594   608   642   670   750   772   780   780 
                                787   787   797   797   805   805   817   817   821   821   824   824   827   827   844   867   880 
                                918   926  1016  1023  1032  1041  1047  1048  1049  1050  1061  1063  1076  1077  1084  1115  1119 
                               1134  1150  1209  1321  1333  1333  1333  1335  1336  1339  1340  1341  1359  1365  1365  1368  1368 
                               1375  1376  1379  1384  1386  1386  1389  1389  1393  1394  1397  1407  1423  1429  1443  1444  1446 
                               1447  1453  1473  1542  1551  1560  1604  1605  1606  1607  1608  1609  1610  1611  1612  1613  1615 
                               1616  1621  1664 
 Props                          640   768 
 PUBLIC                          29 

-R-
 r                              124 
 Reachable                       64  1076  1077  1091  1101  1407 
 Read                            57   400   419   438   456   457   470   473   477   490  1120  1368  1389  1608  1611  1613  1616 
 Referenced                      64   670  1084  1091  1101  1115 
 relation                       349   354   371   378   380   386  1315 
 Relations                       51    75   354   371   378   380   386  1478  1603 
 ReleaseSet                      47   694   695   696   697   698  1323  1324  1498 
 Remote                         549   550   551   565  1264 
 REPEAT                        1116 
 result                         350   354   405   406   424   425   444   445   459   479   480 
 Results                         93   397   399   399   401   404   405   416   418   418   420   423   424   435   437   437   439 
                                440   443   444   454   456   456   458   459   464   465   467   467   478   479   997  1003  1006 
                               1006  1227  1232  1316  1322  1323 
 RETURN                         117   120   132   134   565   566   567   568   576   579   582   585  1714 
 Reverse                         56  1134 
 ReverseCount                    85  1129  1135  1136 
 Right                           61   331   339   387  1341  1447  1453  1612  1615 
 RightAssoc                    1185 

-S-
 Select                          49   409   428   776 
 Selector                       329   337   486   519   919   927  1151  1152  1154  1247  1260  1454  1537  1551  1560  1565  1570 
                               1585  1613  1616  1674 
 selector                       320   324   325   329   334   337   342   344 
 SelectorMultipleDeclared      1170  1177 
 SelectorNames                   89   689   695  1160  1166  1173  1176  1179 
 SelectorNotDeclared           1260 
 Semantics                       27    29   634   661 
 Set                            359   365   367   373   389   392   393   414   433   452   462   482   494   521   525   548   550 
                                551   553   555 
 Sets                            45    46   352 
 SHORTCARD                       31    99   146   147   172   173   194   194   218   218   244   244   266   266   290   320   361 
                               1519 
 Stack                           59 
 StampItems                     638   639   743   746   747   751 
 Statement                      472   473  1241 
 StdOutput                       37   711   712   712   713   713   714   719   720   720   721   721   722  1342  1343  1345  1346 
                               1490  1491  1491  1493  1494  1494  1497  1502  1595  1596  1598  1599 
 String                         110   631   631   653   655   657   999  1000  1408  1409  1410  1410  1450  1452  1455  1456  1458 
                               1461  1463  1463  1709  1711  1712  1713 
 String2                        111  1451  1452  1454  1455  1457  1458  1460  1461 
 StringMem                       39    75  1711 
 Strings                         40 
 Success                        102   724   726  1499 
 Synthesized                     58   499   528   971  1120  1340  1379  1397  1446 
 SynthesizedUseOfInheritedAtt\  531 
   ribute
 SYSTEM                          35 

-T-
 t                              114   116   117   118   118   123   126   127   127   129   129   130   130   131   131   132   134 
                                137   139   140   141   142   142   146   150   152   153   154   157   158   160   163   165   166 
                                172   176   178   179   180   181   184   185   187   189   194   196   198   199   200   201   205 
                                206   209   210   212   218   220   222   223   223   224   225   226   229   230   231   231   233 
                                236   238   244   246   248   249   250   251   254   255   257   258   260   266   268   270   271 
                                272   275   276   277   277   279   282   284   290   292   294   295   298   299   300   303   304 
                                304   304   306   308   309   310   313   315   320   322   324   325   328   330   331   334   336 
                                338   339   342   344   359   363   365   367   370   371   373   375   377   378   380   380   385 
                                389   391   392   393   396   396   399   400   408   409   414   418   419   427   433   437   438 
                                440   447   452   456   457   462   464   467   469   470   472   473   477   478   480   482   486 
                                492   500   505   515   519   521   523   531   536   546   548   550   551   553   555   560   562 
                                566   567   572   574   575   578   581   634   664   665   668   669   670   671   677   680   682 
                                683   686   687   693   699   700   701   704   705   708   709   716   717   725   736   743   765 
                                831   841   871   965   968  1012  1038  1045  1046  1047  1048  1049  1073  1112  1125  1130  1143 
                               1161  1202  1217  1220  1287  1290  1302  1307  1311  1318  1319  1322  1328  1354  1358  1360  1403 
                               1415  1436  1444  1448  1492  1497  1502  1505  1510  1528  1581  1660  1665 
 TargetCode                     434   437   438   440   452   990  1236 
 tElement                       352 
 Terminal                        62  1050  1091  1101  1115  1119  1150  1376  1394  1444 
 TerminalCodeMultipleUsed      1052 
 Test                            61   254   257  1002  1006  1384 
 Texts                           43 
 TheAction                      107  1602  1623  1644 
 TheClass                       108   602  1015  1018  1022  1025  1029  1033 
 THEN                           117   126   131   139   230   254   257   276   303   370   376   377   391   396   401   407   409 
                                420   426   440   446   464   469   472   478   487   491   493   496   499   504   507   509   510 
                                514   518   524   527   530   535   538   540   541   545   593   595   600   615   642   652   675 
                                703   710   718   726   727   730   733   750   779   786   796   802   834   844   867   886   887 
                                901   916   917   931   941   951   970   997  1015  1022  1029  1041  1047  1048  1049  1050  1051 
                               1061  1063  1083  1087  1090  1115  1119  1128  1134  1136  1146  1150  1151  1156  1159  1166  1169 
                               1176  1194  1206  1209  1248  1249  1252  1254  1266  1270  1296  1334  1338  1341  1357  1364  1365 
                               1371  1376  1379  1385  1386  1389  1394  1397  1418  1423  1429  1440  1447  1449  1453  1470  1473 
                               1475  1477  1488  1501  1504  1526  1532  1542  1551  1557  1562  1579  1582  1593  1594  1612  1615 
                               1620  1622  1639  1653  1656  1714 
 Thread                          60  1542  1551 
 tIdent                          42    87   114 
 tInstance                       55  1306 
 tInstancePtr                    55   290   320 
 TO                             379  1331  1441  1471  1474  1476  1712 
 TokenCode                       97   676  1116  1116  1117 
 TRAFO                           27 
 TREE                            28 
 Tree                            28    54   116   126   129   130   131   139   151   155   159   161   177   182   186   188   197 
                                202   203   207   211   213   221   227   228   235   237   239   247   252   253   256   259   261 
                                269   273   274   281   283   285   293   296   297   307   314   316   323   326   327   335   343 
                                345   364   368   369   374   390   394   395   396   409   415   434   453   463   484   485   487 
                                522   549   552   554   556   563   564   565   566   567   568   575   578   581   584   595   597 
                                634   743   765   785   841   871   887   893   901   905   917   923   931   935   941   945   951 
                                955   965   970  1012  1038  1073  1090  1098  1112  1119  1125  1128  1143  1159  1202  1217  1249 
                               1287  1302  1311  1328  1334  1354  1357  1403  1415  1418  1436  1439  1445  1473  1510  1622  1632 
                               1634  1638  1660  1676 
 TreeCodes                      644   846 
 TreeRoot                        67   599   692   779   780   780   781   782   784   796   797   797   798   799   801   834   834 
                                885   887   888   889   890   892   914   917   918   919   920   922  1082  1090  1091  1092  1093 
                               1094  1095  1097  1205  1265  1293 
 tRelation                       51   349 
 TRUE                           117   391   399   418   419   437   456   457   565   724  1322  1322 
 tSet                            47    95   359 
 TSIZE                           35  1306 
 tString                         40   111  1408  1709 
 tStringRef                      39  1706 
 tTree                           55   109   114   123   123   124   137   146   172   194   218   244   266   290   320   359   360 
                                560   572   572   589   590   613   613  1520  1672  1673 
 Type                           576   579  1016  1023  1062  1082  1088  1091  1092  1101  1102  1265  1267  1293  1297 
 TypeCount                       31   658   659 
 TypeNames                       69   659   660  1062 

-U-
 UNTIL                         1116 
 Usage                          359   365   367   373   389   392   393   414   433   452   462   482   495   496   521   526   527 
                                548   550   551   553   555 

-V-
 VAR                             31    80   124   146   147   172   173   194   218   244   266   349   350   357   359   360   361 
                                590   613  1408  1519  1520  1672  1673  1706  1709  1710 
 Variable                        59 
 VariantNames                    90   690   696  1151  1154 
 VariantSelectorMultipleDecla\ 1152 
   red

-W-
 W                              475   803   835  1088  1366  1372  1387  1390  1411 
 WHILE                          116   404   423   443   458   597   785   893   905   923   935   945   955  1098 
 WITH                           298   308   328   336   406   425   445   502   533   575   578   581   592   598  1332  1442  1472 
                               1524 
 Write                           57   399   418   437   467   496   527  1322  1365  1375  1386  1393  1606  1609 
 WriteClass                      68  1344  1502  1597 
 WriteCyclics                    72  1497 
 WriteDependencies               68  1492  1505 
 WriteI                          37 
 WriteIdent                      42  1342  1595 
 WriteN                          37 
 WriteName                       66 
 WriteNl                         37   711   712   713   714   719   720   721   722  1346  1491  1491  1494  1494  1497  1502  1599 
 WriteS                          37   712   713   720   721  1343  1345  1490  1493  1596  1598 

-_-
 _                             1708 

end cross reference, 5055 occurrences of 390 identifiers.
