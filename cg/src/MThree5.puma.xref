     1 
     2 (* file MThree5.puma 
c    3    Modula-3 generation of lazy attribute evaluator. 
c    4    Rodney M. Bates Oct 97 
c    5    Extensively modified from file mod5.puma, which had these header comments:  
c    6    /* Ich, Doktor Josef Grosch, Informatiker, 4.3.1992 */
c    7 *) 
     8 
     9 (* Modified, Rodney M. Bates: 
c   10 
c   11    10-1998: Added colons to labels. 
c   12    July 99 Add VAR to rule local decls. 
c   13 
c   14 *)
    15 
    16 TRAFO EvalMThree3                                                             *     *
    17 TREE Tree                                                                     *     *
    18 PUBLIC EvalModule ToBit0                                                      *     *     *
    19 
    20 GLOBAL {                                                                      *
    21 
    22 FROM SYSTEM     IMPORT ADR, TSIZE;                                            *     *     *     *     *
    23 FROM General    IMPORT Max;                                                  22     *    22     *
    24 FROM DynArray   IMPORT MakeArray;                                            23     *    23     *
    25 FROM IO         IMPORT WriteS, WriteNl, WriteI, WriteB, StdOutput;           24     *    24     *     *     *     *     *
    26 FROM Texts      IMPORT WriteText;                                            25     *    25     *
    27 FROM Sets       IMPORT tSet, MakeSet, ReleaseSet, Include, Exclude, Minimum,       26     *    26     *     *     *     *
                                                                                     *     *
    28                         Maximum, IsElement, WriteSet, IsEmpty, Extract;       *     *     *     *     *
    29 FROM Relations  IMPORT IsRelated;                                            27     *    27     *
    30 FROM TreeMThree2        IMPORT GetIterator, Iterator, WriteLine;             29     *    29     *     *     *
    31 FROM EvalMThree IMPORT Class;                                                30     *    30     *
    32 FROM Errors     IMPORT Error, Short, MessageI;                               31     *    31     *     *     *
    33 FROM Positions  IMPORT NoPosition;                                           32     *    32     *
    34 IMPORT EvalMThree;                                                           33    31
    35 
    36 FROM Tree       IMPORT                                                       33    17    34
    37    NoTree       , tTree         , Referenced    , NoCodeClass   ,             *     *     *     *
    38    Computed     , Reverse       , Write         , Read          ,             *     *     *     *
    39    Inherited    , Synthesized   , Input         , Output        ,             *     *     *     *
    40    Virtual      , Test          , Left          , Right         ,             *     *     *     *
    41    HasOutput    , NonBaseComp   , Dummy         , Trace         ,             *     *     *     *
    42    Demand       , Funct         , NoClass       , Options       ,             *     *     *     *
    43    TreeRoot     , iModule       , iMain         , itTree        ,             *     *     *     *
    44    ForallClasses, ForallClassesExtensionsFirst  , ForallAttributes,           *     *     *
    45    f            , WI            , WN            ,                             *     *     *
    46    ClassCount   , IdentifyClass , IdentifyAttribute,                          *     *     *
    47    tBitIndex    , tBitInfo      , iNoTree       , QueryTree     ;             *     *     *     *
    48 
    49 VAR                                                                           *
    50    i, i2, j, k, n, MaxBit, MaxInstCount, Check: SHORTCARD;                    *     *     *     *     *     *     *     *
                                                                                     *
    51    Node, Attr, ChildsClass      : tTree;                                      *     *     *    37
    52    Success, IsStable            : BOOLEAN;                                    *     *     *
    53    BitIndexSize                 : LONGINT;                                    *     *
    54    gBitIndex                    : tBitIndex;                                  *    47
    55    InhIndices                   : tSet;                                       *    27
    56    InhIndexSize                 : LONGINT;                                    *    53
    57    InhIndexCount                : POINTER TO ARRAY [1..1000000] OF SHORTCARD;       *     *     *     *     *    50
    58 
    59 PROCEDURE GenCall (t: tTree; j: SHORTCARD);                                   *     *     *    51    50    57
    60    BEGIN                                                                      *
    61       WITH t^.Class.Instance^ [j] DO                                          *    59    31     *    59     *
    62          IF ({Synthesized, Left} <= Properties) THEN                          *    39    40     *     *
    63             k := ToBit0 (t, j);                                              50    18    61    61
    64             !      IFNOTIN (! WN ( k ); !, TNode . yyHead . yyIsComp ) !      *    45    63     *     *     *
    65             !yyS! WN (k); ! ( TNode ) ; (* ! WI (Attribute^.Child.Name); ! *) END;!       *    64    64    64     *
    66          ELSIF ({Inherited, Left} <= Properties) THEN                         *    39    62    62    62
    67             k := ToBit0 (t, j);                                              65    63    63    63
    68             !      IFNOTIN (! WN ( k ); ! , TNode . yyHead . yyIsComp ) !          64    65    67    65    64    64
    69    IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN       62    28     *    42     *    41     *
                                                                                    67    61    66    66
    70             !      yyVisitParent ( TNode ) ; !                                *    68
    71             !      yyI [ TNode . yyHead . yyOffset + ! WN (k); ! ] ( TNode . yyHead \     *    70    68     *    68    68
                                                                                     *     *
      \. yyParent ) ; (* !                                                           *
c   72             WI (Attribute^.Child.Name); ! *) ! 
    73             @      yyWriteVisit ( TNode . yyHead . yyParent , "?") ; END ;@         *    71    71    71    65
    74    ELSE                                                                       *
    75             !      yyI [ TNode . yyHead . yyOffset + ! WN (k); ! ] ( TNode . yyHead \    71    73    73    71    71    71
                                                                                     *     *
      \. yyParent ) ; (* !                                                          73
c   76             WI (Attribute^.Child.Name); ! *) END ;!                          73
    77    END;                                                                      76
    78          ELSIF ({Inherited, Right} <= Properties) THEN                       66    66    40    69    69
    79             k := ToBit1 (Selector, j - t^.Class.AttrCount - Selector^.Child.InstOffs\    75     *     *    67    69    69
                                                                                     *     *     *
      \et);                                                                          *
    80             !      IFNOTIN (! WN (k); ! , TNode . ! WI (Selector^.Child.Name); ! . y\    68    75    79    75    45    79
                                                                                    79     *
      \yHead.yyIsComp ) !                                                           75    68
    81             k := ToBit2 (t, Selector, j);                                    80     *    79    80    79
    82             !      yyI! WN (k); ! ( TNode ) ; (* ! WI (Selector^.Child.Name);      75    80    81    80
c   83             !:! WI (Attribute^.Child.Name); ! *) END ;!                      77
    84          ELSIF ({Synthesized, Right} <= Properties) THEN                     78    62    78    78    78
    85             k := ToBit1 (Selector, j - t^.Class.AttrCount - Selector^.Child.InstOffs\    82    79    81    81    81    79
                                                                                    79     *    80
      \et);                                                                         79
    86             !      IFNOTIN (! WN (k); ! , TNode . ! WI (Selector^.Child.Name); ! . y\    80    82    85    82    80    85
                                                                                    85    80
      \yHead . yyIsComp ) !                                                         80    80
    87    IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN       69    69    69    69    69    69    69
                                                                                    85    85    84    84
    88             @      yyWriteVisit ( TNode , "@ WI (Selector^.Child.Name); @" ) ;@    73    86
    89             !      yyS! WN (k);                                              65    86    86
    90             ! ( TNode . ! WI (Selector^.Child.Name);                         88    86    86    86    86
    91             ! ) ; (* ! WI (Selector^.Child.Name); !:! WI (Attribute^.Child.Name); ! \
c     \*) ! 
    92             !      yyVisitParent ( TNode . ! WI (Selector^.Child.Name); ! ) ; END ;!     70    90    90    90    90    90
                                                                                    83
    93    ELSE                                                                      74
    94             !      yyS! WN (k);                                              89    89    89
    95             ! ( TNode . ! WI (Selector^.Child.Name);                         92    92    92    92    92
    96             ! ) ; (* ! WI (Selector^.Child.Name); !:! WI (Attribute^.Child.Name); ! \
c     \*) END ;!                                                                    92
    97    END;                                                                      96
    98          END;                                                                97
    99       END;                                                                   98
   100    END GenCall;                                                              99    59
   101 
   102 PROCEDURE GenEvalAttr (t: tTree; i: INTEGER);                                59     *    87    59    50     *
   103    BEGIN                                                                     60
   104       Class := t;                                                            87   102
   105       WITH t^.Class.Instance^ [i] DO                                         61   104   104    61   102    61
   106    IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN       87    87    87    87    87    87    87
                                                                                   105   105    87    87
   107          @      yyWriteEval ( TNode , "@ WI (Attribute^.Child.Name); @" ) ;@        *    95
   108          IF (Action # ADR (Action)) AND NOT (Virtual IN Properties) THEN    106     *    22     *   106     *    40   106
                                                                                   106   106
   109             GenEvaluator (Action);                                            *   108
   110             EvalMThree.GenEvaluator (Action); !!                             34   109   109
   111             IF Test IN Properties THEN                                      108    40   108   108   108
   112                !      writeBOOLEAN ( yyb ) yyWriteNl ( ) ;!                   *     *     *
   113             ELSIF (Attribute^.Kind = Tree.Child) OR (Attribute^.Attribute.Type = itT\    84     *     *    36    95     *
                                                                                     *     *     *
      \ree) THEN                                                                    43   111
   114                !      write! WI (itTree);                                     *    95   113
   115                ! ( TNode . ! WI (Attribute^.Child.Name); ! )!               107   114   113   113    95
   116             ELSE                                                             93
   117                !      write! WI (Attribute^.Child.Type);                    114   115   115   115   113
   118                ! ( TNode . ! WI (Attribute^.Child.Name); ! ) yyWriteNl ( ) ;!     115   117   117   117   115   112
   119             END;                                                            100
   120          ELSE                                                               116
   121             !      yyWriteNl ( ) ;!                                         118
   122          END;                                                               119
   123    ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN   113   106   106   106   108   106   111
                                                                                   106   106   111   113
   124          @      yyWriteEval ( TNode , "@ WI (Attribute^.Child.Name); @") ;@       107   118
   125          IF (Action # ADR (Action)) AND NOT (Virtual IN Properties) THEN    111   110   108     *   123   108   108   123
                                                                                   123   123
   126             GenEvaluator (Action);                                          110   125
   127             EvalMThree.GenEvaluator (Action);                               110   126   126
   128          END;                                                               122
   129    ELSE                                                                     120
   130          IF (Action # ADR (Action)) AND NOT (Virtual IN Properties) THEN    125   127   125     *   125   125   125   125
                                                                                   125   125
   131             GenEvaluator (Action);                                          127   130
   132             EvalMThree.GenEvaluator (Action);                               127   131   131
   133          END;                                                               128
   134    END;                                                                     133
   135       END;                                                                  134
   136    END GenEvalAttr;                                                         135   102
   137 }
   138 
   139 PROCEDURE EvalModule (t: Tree)                                              102    18   123   113
   140         
   141 Ag (..) :- {                                                                  *
   142         MaxBit := 0;                                                         50
   143         MaxInstCount := 0;                                                   50
   144         ForallClasses (Classes, CompBitInfo);                                44     *     *
   145         MakeSet (InhIndices, MaxInstCount);                                  27    55   143
   146         InhIndexSize := MaxInstCount;                                        56   145
   147         MakeArray (InhIndexCount, InhIndexSize, TSIZE (SHORTCARD));          24    57   146    22    59
   148         FOR i := 1 TO MaxInstCount DO InhIndexCount^ [i] := 0; END;           *   105    57   146   105   147     *   136
   149         ForallClasses (Classes, CompInhIndices);                            144   144     *
   150         !# define IFNOTIN(b, s) IF NOT ((b) IN (s)) THEN!                     *    86     *     *   130   130     *   130
                                                                                     *   130
   151         !# define REMOTE_SYN(i, b, c, n, t, a) n.t.a!                       150     *   148   150     *    50   139     *
                                                                                     *     *     *
   152         !# define REMOTE_INH(i, b, k, n, t, a) n.t.a!                       151     *   151   151    94   151   151   151
                                                                                     *     *     *
   153         !# define INCLUDE(s, b) WITH yyTemp = ( s ) DO yyTemp := yyTemp + ! WI (iMai\   152     *   150   152   105     *
                                                                                     *   148     *     *   118
      \n); ! . BitSet { b } END ;!                                                  43     *     *   148
   154         EvalMThree.EvalModuleHead (t);                                      132     *   152
   155         !!
   156         !VAR yyI: ARRAY [0 .. ! WN (Maximum (InhIndices)); !] OF ! WI (iMain); !.tPr\    49    82    57    94    28   145
                                                                                    57   153   153
      \ocTree;!                                                                      *
   157         !!
   158         !PROCEDURE yyAbort (yyt: ! WI (iMain); ! . ! WI (itTree); ! )!      139     *     *   156   156     *   114
   159         !=BEGIN!                                                            103
   160         @  Wr . PutText ( Stdio . Stderr, "Error: module @ WI (EvalName); @, cyclic \     *     *     *     *
      \dependencies" ) ;@
   161         !  Wr . PutText ( Stdio . Stderr , Wr . EOL ) ;!                    160   160   160   160     *     *
   162         !  ! WI (iMain); ! . yyExit ( ) ;!                                  158   158     *
   163         ! END yyAbort;!                                                     153   158
   164         !!
   165       IF NOT IsElement (ORD ('9'), Options) THEN                            150   150   123   123   123   150
   166         !!
   167         !PROCEDURE Eval ( yyt : ! WI (iMain); ! . ! WI (itTree); ! )!       158     *   158   162   162     *   158
   168         !=BEGIN ! WI (iMain); ! . Init! WI (iModule); ! ( yyt ) ; yyE ( yyt ) ; END \   159   167   167     *     *    43
                                                                                   167     *     *   163
      \Eval ;!                                                                     167
   169       ELSE                                                                  129
   170         !!
   171         !VAR xxStack : INTEGER ;!                                           156     *   102
   172         !!
   173         !PROCEDURE Eval ( yyt : ! WI (iMain); ! . ! WI (itTree); ! )!       167   168   168   168   168     *   167
   174         != VAR xxHigh : BOOLEAN ;!                                          171     *    52
   175         !  BEGIN!                                                           168
   176         !    xxStack := LAST ( INTEGER ) ;!                                 171     *   171
   177         !    ! WI (iMain); ! . Init! WI (iModule); ! ( yyt ) ; yyE ( yyt ) ;!     173   173   168     *   168   173   168
                                                                                     *
   178         @    Wr . PutText ( Stdio . Stdout , "Stacksize " ) ;@              161   161   161     *
   179         !    Wr . PutText ( Stdio . Stdout!                                 178   178   178   178
   180         !               , Fmt . Int ( LOOPHOLE ( ADR ( xxHigh ) , INTEGER ) - xxStac\     *     *     *   130   174   176
      \k ) ) ;!                                                                    176
   181         !    Wr . PutText ( Stdio . Stdout , Wr . EOL );!                   179   179   179   179     *   161
   182         !  END Eval ;!                                                      168   173
   183       END;                                                                  182
   184         !!
   185         REPEAT IsStable := TRUE; ForallClasses (Classes, CompOutput); UNTIL IsStable\     *    52     *   149   149     *
                                                                                     *     *
      \;
   186         !PROCEDURE yyE ( yyt : ! WI (iMain); ! . ! WI (itTree); ! ) =!      173   177   177   177   177     *   173
   187         WriteLine (TreeRoot^.Ag.EvalCodes^.Codes.LocalLine);                 30    43   141     *     *     *
   188         WriteText (f, TreeRoot^.Ag.EvalCodes^.Codes.Local);                  26    45   187   187   187   187     *
   189         Node := TreeRoot^.Ag.Modules;                                        51   188   188     *
   190         WHILE Node^.Kind = Tree.Module DO                                     *   189   113   139     *   153
   191            WriteLine (Node^.Module.EvalCodes^.Codes.LocalLine);             187   190   190   188   188   187
   192            WriteText (f, Node^.Module.EvalCodes^.Codes.Local);              188   188   191   191   191   191   188
   193            Node := Node^.Module.Next;                                       192     *   192     *
   194         END;                                                                183
   195       IF IsElement (ORD ('9'), Options) THEN                                165   165   165   165   165
   196         !  VAR xxLow : BOOLEAN ;!                                           174     *   174
   197         !  BEGIN!                                                           175
   198         !    xxStack := MIN ( xxStack , LOOPHOLE ( ADR ( xxLow ) , INTEGER ) ) ;!       180     *     *   180   180   196
                                                                                   180
   199 (* FIX THIS^ This only works for stacks which grow toward zero. *)
   200       ELSE                                                                  169
   201         !  BEGIN!                                                           197
   202       END;                                                                  194
   203         !   LOOP!                                                             *
   204         !    IF ( yyt = ! WI (iMain); ! . ! WI (iNoTree); ! ) OR ( 0 IN yyt . yyHead\   195   186   186   186     *    47
                                                                                   113   150     *    86
      \ . yyIsComp ) THEN RETURN ; END ;!                                           86   195     *   202
   205         !    INCLUDE ( yyt . yyHead . yyIsComp , 0 )!                       153   204   204   204
   206         !    TYPECASE yyt OF!                                                 *   205   156
   207         ForallClassesExtensionsFirst (Classes, GenE);                        44   185     *
   208         !    ELSE RETURN ;!                                                 200   204
   209         !    END ;!                                                         204
   210         !   END ;!                                                          209
   211         !  END yyE ;!                                                       210   186
   212         !!
   213         FOR i := 2 TO MaxBit DO                                             148   152   148   142   190
   214            n := 0;                      (* are there any SYN attributes ? *)      152
   215            ForallClasses (Classes, CountSynAttr);                           185   207     *
   216            IF n > 0 THEN                                                    204   214   204
   217               !PROCEDURE yyS! WN (i - 1); ! ( yyt : ! WI (iMain); ! . ! WI (itTree);\   186    94   156   213   206   204
                                                                                   204     *   186
      \ ! )=!
   218               WriteLine (TreeRoot^.Ag.EvalCodes^.Codes.LocalLine);          191   189   189   192   192   191
   219               WriteText (f, TreeRoot^.Ag.EvalCodes^.Codes.Local);           192   192   218   218   218   218   192
   220               Node := TreeRoot^.Ag.Modules;                                 193   219   219   189
   221               WHILE Node^.Kind = Tree.Module DO                             190   220   190   190   193   213
   222                  WriteLine (Node^.Module.EvalCodes^.Codes.LocalLine);       218   221   221   219   219   218
   223                  WriteText (f, Node^.Module.EvalCodes^.Codes.Local);        219   219   222   222   222   222   219
   224                  Node := Node^.Module.Next;                                 223     *   223   193
   225               END;                                                          211
   226       IF IsElement (ORD ('9'), Options) THEN                                216   195   195   195   216
   227               !  VAR xxLow : BOOLEAN ;!                                     196   198   196
   228               !  BEGIN!                                                     201
   229               !    xxStack := MIN ( xxStack , LOOPHOLE ( ADR ( xxLow ) , INTEGER ) )\   198   198     *   198   198   227
                                                                                   198
      \ ;!
   230 (* FIX THIS^ This only works for stacks which grow toward zero. *)
   231       ELSE                                                                  208
   232               !  BEGIN!                                                     228
   233       END;                                                                  225
   234       IF IsElement (ORD ('5'), Options) THEN                                226   226   226   226   226
   235               !    IFNOTIN (! WN (i - 1); !, yyt . yyHead . yyIsDone )!     150   217   217   217   205     *
   236               !    INCLUDE  (yyt . yyHead . yyIsDone, ! WN (i - 1); ! )!    205   235   235   235   235   235
   237               !    ELSE yyAbort ( yyt ) ; END ;!                            231   163   236   233
   238       END;                                                                  237
   239               IF n > 1 THEN                                                 234   216   234
   240                  !    TYPECASE yyt OF!                                      206   237   206
   241                  ForallClassesExtensionsFirst (Classes, GenS);              207   215     *
   242                  !    END ;!                                                238
   243               ELSE                                                          237
   244                  ForallClassesExtensionsFirst (Classes, GenS);              241   241   241
   245               END;                                                          242
   246               !    INCLUDE ( yyt . yyHead . yyIsComp , ! WN (i - 1); ! )!   236   240   236   205   236   236
   247               !  END yyS! WN (i - 1); ! ;!                                  245   217   246   246
   248               !!
   249            END;                                                             247
   250         END;                                                                249
   251         FOR i := Minimum (InhIndices) TO Maximum (InhIndices) DO            213   247    27   156   213   156     *   221
   252            IF IsElement (i, InhIndices) THEN                                239   234   251   251   239
   253               !PROCEDURE yyI! WN (i); !  (yyt : ! WI (iMain); ! . ! WI (itTree); ! )\   217   156   247   252   246   217
                                                                                   217     *   217
      \=!
   254               WriteLine (TreeRoot^.Ag.EvalCodes^.Codes.LocalLine);          222   220   220   223   223   222
   255               WriteText (f, TreeRoot^.Ag.EvalCodes^.Codes.Local);           223   223   254   254   254   254   223
   256               Node := TreeRoot^.Ag.Modules;                                 224   255   255   220
   257               WHILE Node^.Kind = Tree.Module DO                             221   256   221   221   224   251
   258                  WriteLine (Node^.Module.EvalCodes^.Codes.LocalLine);       254   257   257   255   255   254
   259                  WriteText (f, Node^.Module.EvalCodes^.Codes.Local);        255   255   258   258   258   258   255
   260                  Node := Node^.Module.Next;                                 259     *   259   224
   261               END;                                                          250
   262       IF IsElement (ORD ('9'), Options) THEN                                252   252   234   234   252
   263               !  VAR xxLow : BOOLEAN ;!                                     227   229   227
   264               !  BEGIN!                                                     232
   265               !    xxStack := MIN ( xxStack , LOOPHOLE ( ADR ( xxLow ) , INTEGER ) )\   229   229     *   229   229   263
                                                                                   229
      \ ;!
   266 (* FIX THIS^ This only works for stacks which grow toward zero. *)
   267       ELSE                                                                  243
   268               !  BEGIN!                                                     264
   269       END;                                                                  261
   270               Check := 0;                                                    50
   271               IF InhIndexCount^ [i] > 1 THEN                                262   148   253   262
   272                  !    TYPECASE yyt  OF!                                     240   253   240
   273                  ForallClassesExtensionsFirst (Classes, EvalModule);        244   244   139
   274                  !    END ;!                                                269
   275               ELSE                                                          267
   276                  ForallClassesExtensionsFirst (Classes, EvalModule);        273   273   273
   277               END;                                                          274
   278               IF Check # InhIndexCount^ [i] THEN                            271   270   271   271   271
   279                  MessageI ("internal error in yyI", Error, NoPosition, Short, ADR (i\    32    32    33    32   265   278
      \));
   280               END;                                                          277
   281               !  END yyI! WN (i); ! ;!                                      280   253   253   279
   282               !!
   283            END;                                                             281
   284         END;                                                                283
   285         !PROCEDURE Begin! WI (EvalName); ! ( )!                             253     *   253     *
   286         != BEGIN!                                                           268
   287         WriteLine (EvalCodes^.Codes.BeginLine);                             258   259   259     *
   288         WriteText (f, EvalCodes^.Codes.Begin);                              259   259   287   287   285
   289         Node := Modules;                                                    260   256
   290         WHILE Node^.Kind = Tree.Module DO                                   257   289   257   257   260   257
   291            WriteLine (Node^.Module.EvalCodes^.Codes.BeginLine);             287   290   290   288   288   287
   292            WriteText (f, Node^.Module.EvalCodes^.Codes.Begin);              288   288   291   291   291   291   288
   293            Node := Node^.Module.Next;                                       292     *   292   260
   294         END;                                                                284
   295         !  END Begin! WI (EvalName); ! ;!                                   294   292   285   285
   296         !!
   297         !PROCEDURE Close! WI (EvalName); ! ( )!                             285     *   295   295
   298         != BEGIN!                                                           286
   299         WriteLine (EvalCodes^.Codes.CloseLine);                             291   292   292     *
   300         WriteText (f, EvalCodes^.Codes.Close);                              292   292   299   299   297
   301         Node := Modules;                                                    293   289
   302         WHILE Node^.Kind = Tree.Module DO                                   290   301   290   290   293   290
   303            WriteLine (Node^.Module.EvalCodes^.Codes.CloseLine);             299   302   302   300   300   299
   304            WriteText (f, Node^.Module.EvalCodes^.Codes.Close);              300   300   303   303   303   303   300
   305            Node := Node^.Module.Next;                                       304     *   304   293
   306         END;                                                                295
   307         !  END Close! WI (EvalName); ! ;!                                   306   304   297   297
   308         !!
   309         !BEGIN!                                                             298
   310       IF IsElement (ORD ('X'), Options) THEN                                278   262   262   262   278
   311         !  yyf := Stdio . Stdout ;!                                           *   181   181
   312       END;                                                                  307
   313         FOR i := Minimum (InhIndices) TO Maximum (InhIndices) DO            251   281   251   252   251   251     *   302
   314            IF IsElement (i, InhIndices) THEN                                310   310   313   313   310
   315               !  yyI [ ! WN (i); ! ] := yyI! WN (i); ! ;!                   281   281   314     *     *     *
   316            END;                                                             312
   317         END;                                                                316
   318         !END ! WI (EvalName); ! .!                                          317   307   307
   319 }; .
   320 Class (..) :-                                                               123
   321         NoCodeClass * Properties = {{}};                                     37   130
   322         i <= InstCount;                                                     315     *
   323         VAR a : SHORTCARD ;                                                 263   152   147
   324 {       a := ToAttr (t, i);                                                 323     *   154   322
   325         IF a = 0 THEN RETURN; END;                                          314   324   314   208   318
   326         WITH Instance^ [a] DO                                               153   105   325   313
   327            IF {Inherited, Right} <= Properties THEN                         325    78    84   321   325
   328               Class := t;                                                   320   324
   329               IF InhIndexCount^ [i] > 1 THEN                                327   278   324   327
   330                  !     | ! WI (iMain); ! . ! WI (Name); ! ( TNode ) =>!     318   253     *   118   124
   331               END;                                                          325
   332               INC (Check);                                                    *   278
   333               k := ToBit1 (Selector, a - AttrCount - Selector^.Child.InstOffset);       152    85    95   326    85     *
                                                                                   118    85
   334       IF IsElement (ORD ('5'), Options) THEN                                329   314   310   310   329
   335               !      IFNOTIN (! WN (k); !, TNode . ! WI (Selector^.Child.Name); ! . \   235   315   333   330   330   333
                                                                                   333   330
      \yyHead . yyIsDone )!                                                        246   236
   336               !      INCLUDE ( TNode . ! WI (Selector^.Child.Name);         246   335   335   335   335   335
   337               ! . yyHead . yyIsDone , ! WN (k); ! )!                        335   335   335   335
   338               !      ELSE yyAbort ( TNode ) ;!                              275   237   336
   339               !      END ;!                                                 331
   340       END;                                                                  339
   341               FOR j := 1 TO InstCount DO                                    313    85   313   322   326
   342                  IF IsRelated (a, j, DP) THEN                               334    29   333   341     *   334
   343                     GenCall (t, j);                                         100   328   342
   344                  END;                                                       340
   345               END;                                                          344
   346       IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN   342   334   334   334   130   123   204
                                                                                   343   328   327   342
   347               @      yyWriteEval ( TNode , "@ WI (Selector^.Child.Name); !:! WI (Att\   124   338
      \ribute^.Child.Name); @" ) ;@
   348               IF (Action # ADR (Action)) AND NOT (Virtual IN Properties) THEN     346   132   279     *   346   165   130
                                                                                   346   346   346
   349                  GenEvaluator (Action);                                     132   348
   350                  EvalMThree.GenEvaluator (Action); !!                       154   349   349
   351                  IF (Attribute^.Kind = Tree.Child) OR (Attribute^.Attribute.Type = i\   348   118   302   302   336   204
                                                                                     *     *   117
      \tTree) THEN                                                                 253   348
   352                     !      write! WI (itTree);                              117   336   351
   353                     ! ( TNode . ! WI (Selector^.Child.Name);                347   352   336   351   336
   354                     ! . ! WI (Attribute^.Child.Name); ! )!                  353   351   353   353
   355                  ELSE                                                       338
   356                     !     write! WI (Attribute^.Child.Type);                352   354   354   354   351
   357                     ! ( TNode . ! WI (Selector^.Child.Name);                353   356   353   356   354
   358                     ! . ! WI (Attribute^.Child.Name); ! )!                  357   356   357   357
   359                     !     yyWriteNl ( ) ;!                                  121
   360                  END;                                                       345
   361               ELSE                                                          355
   362                  !     yyWriteNl ( ) ;!                                     359
   363               END;                                                          360
   364       ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN      123   346   346   346   348   346
                                                                                   348   346   346   348   351
   365               @     yyWriteEval ( TNode , "@ WI (Selector^.Child.Name); !:! WI (Attr\   347   357
      \ibute^.Child.Name); @" ) ;@
   366               IF (Action # ADR (Action)) AND NOT (Virtual IN Properties) THEN     351   350   348     *   364   348   348
                                                                                   364   364   364
   367                  GenEvaluator (Action);                                     350   366
   368                  EvalMThree.GenEvaluator (Action);                          350   367   367
   369               END;                                                          363
   370       ELSE                                                                  361
   371               IF (Action # ADR (Action)) AND NOT (Virtual IN Properties) THEN     366   368   366     *   366   366   366
                                                                                   366   366   366
   372                  GenEvaluator (Action);                                     368   371
   373                  EvalMThree.GenEvaluator (Action);                          368   372   372
   374               END;                                                          369
   375       END;                                                                  374
   376               IF NOT (Input IN Properties) AND (Attribute^.Kind = Tree.Child) THEN      371   371    39   371   371   371
                                                                                   358   351   351   358   371
   377                  !      WITH yyTemp = TNode . ! WI (Selector^.Child.Name);        326   153   365   358   357   376   358
   378                  ! . ! WI (Attribute^.Child.Name);                          377   376   377   377
   379                  ! . yyHead DO!                                             337   341
   380                  !         IF yyTemp . yyParent = ! WI (iMain); ! . ! WI (iNoTree); \   376   377    75   378   330     *
                                                                                   204
      \! THEN!                                                                     376
   381                  !            yyOffset := !                                  75
   382                  WN (Selector^.Child.Class^.Class.BitCount + Attribute^.Child.BitOff\   337   377   378   364     *     *
                                                                                   378     *
      \set); ! ;!                                                                    *
   383                  !            yyTemp . yyParent := TNode . ! WI (Selector^.Child.Nam\   380   380   377   380   382   382
      \e); ! ;!                                                                    378
   384                  WI (iMain); ! . Init! WI (iModule); ! ( TNode . ! WI (Selector^.Chi\   383   380   177     *   177   383
                                                                                     *   383
      \ld.Name);                                                                   383   383
   385                  ! . ! WI (Attribute^.Child.Name); ! ) ;!                   384   382   384   384
   386                  !         END ;!                                           375
   387                  !      END ;!                                              386
   388               END;                                                          387
   389               FOR i2 := 1 TO InstCount DO       (* add group members *)     341    50   341   341   379
   390                  IF Instance^[i2].Action = Action THEN                      380   326   389   373     *   380
   391                     WITH Instance^[i2] DO                                   377   390   390   389
   392                        IF Synthesized IN Properties THEN                    390    84   376   376   390
   393                           k := ToBit0 (Class, i2);                          337    67   382   391
   394                           !     INCLUDE ( TNode . yyHead . yyIsComp , ! WN (k); ! )!    336   384   379   246   382   393
   395                        ELSIF Inherited IN Properties THEN                   364   327   392   392   392
   396                           k := ToBit1 (Selector, i2 - AttrCount - Selector^.Child.In\   394   333   384   393   333     *
                                                                                   385
      \stOffset);                                                                  333
   397                           !     INCLUDE ( TNode . ! WI (Selector^.Child.Name);    394   394   385   396   396   385
   398                           ! . yyHead . yyIsComp , ! WN (k); ! )!            394   394   394   396
   399                        END;                                                 388
   400                     END;                                                    399
   401                  END;                                                       400
   402               END;                                                          401
   403            END;                                                             402
   404         END;                                                                403
   405 }; .
   406 
   407 PROCEDURE CompBitInfo (t: Tree)                                             297   144   364   376
   408 
   409 Class (..) :-                                                               393
   410         BitIndexSize := AttrCount;                                           53   396
   411         MakeArray (BitIndex, BitIndexSize, TSIZE (tBitInfo));               147     *   410   147    47
   412         i := 1;                                                             329
   413         gBitIndex := BitIndex;                                               54   411
   414         ForallAttributes (t, CompBitInfo);                                   44   407   407
   415         MaxBit := Max (i, MaxBit);                                          213    23   412     *
   416         MaxInstCount := Max (InstCount, MaxInstCount);                      148   415   389     *
   417         .
   418 Child (..) ;                                                                397
   419 Attribute (..) :-                                                           385
   420         ({{Input, Test, Dummy}} * Properties = {{}});                       376   111    41   395
   421         INC (i);                                                            332   415
   422         gBitIndex^ [AttrIndex].ToBit := i;                                  413     *     *   421
   423         gBitIndex^ [i].ToAttr := AttrIndex;                                 422   422   324   422
   424         .
   425 
   426 PROCEDURE CompInhIndices (t: Tree)                                          407   149   414   407
   427 
   428 Class (..) :-                                                               409
   429         VAR b : INTEGER ;                                                   323   153   265
   430 {       FOR j := AttrCount + 1 TO InstCount DO                              389   343   410   389   416   391
   431            WITH Instance^ [j] DO                                            391   391   430   430
   432               IF Inherited IN Properties THEN                               392   395   395   420   395
   433                  b := ToBit2 (t, Selector, j);                              429    81   426   397   431
   434                  Include (InhIndices, b);                                    27   314   433
   435                  INC (InhIndexCount^ [b]);                                  421   329   434
   436               END;                                                          404
   437            END;                                                             436
   438         END;                                                                437
   439 };      .
   440 
   441 PROCEDURE CountSynAttr (t: Tree)                                            426   215   433   426
   442 
   443 Class (..) :-                                                               428
   444         NoCodeClass * Properties = {{}};                                    321   432
   445         i <= BitCount;                                                      423   382
   446 {       WITH Instance^ [BitIndex^ [i].ToAttr] DO                            431   431   413   445   423   431
   447            IF ({Synthesized, Left} <= Properties) AND NOT (Test IN Properties) THEN     432   392    66   444   376   376
                                                                                   420   432     *   432
   448               INC (n);                                                      435   239
   449            END;                                                             438
   450         END;                                                                449
   451 };      .
   452 
   453 (* Not used.  Not converted to M3: 
c  454 PROCEDURE WriteType (t: Tree)
c  455 
c  456 Class (..) :-
c  457         NoCodeClass * Properties = {{}};
c  458         Trace IN Properties;
c  459         !| ! WI (TreeRoot^.Ag.TreeName); ! . ! WI (Name); !: yyWriteS ('! WI (Name);\
c     \ !');!
c  460         .
c  461 *) 
   462 
   463 PROCEDURE GenS (t: Tree)                                                    441   244   441   441
   464 
   465 Class (..) :-                                                               443
   466         NoCodeClass * Properties = {{}};                                    444   447
   467         i <= BitCount;                                                      446   445
   468 {       WITH Instance^ [BitIndex^ [i].ToAttr] DO                            446   446   446   467   446   446
   469            IF ({Synthesized, Left} <= Properties) AND NOT (Test IN Properties) THEN     447   447   447   466   447   447
                                                                                   447   447     *   447
   470               Class := t;                                                   465   463
   471               IF n > 1 THEN                                                 469   448   469
   472                  !     | ! WI (iMain); ! . ! WI (Name); ! ( TNode ) =>!     397   384     *   397   397
   473               ELSE                                                          370
   474                  !     WITH TNode = NARROW ( yyt , ! WI (iMain); ! . ! WI (Name); ! \   468   472     *   272   472   472
                                                                                     *   472
      \) DO!                                                                       468
   475               END;                                                          450
   476               FOR j := 1 TO InstCount DO                                    430   433   430   430   474
   477                  IF IsRelated (BitIndex^ [i].ToAttr, j, DP) THEN            471   342   468   468   468   476   342   471
   478                     GenCall (t, j);                                         343   470   477
   479                  END;                                                       475
   480               END;                                                          479
   481               GenEvalAttr (t, BitIndex^ [i].ToAttr);                        136   478   477   477   477
   482               IF NOT (Input IN Properties) AND (Attribute^.Kind = Tree.Child) THEN      477   469   420   469   469   469
                                                                                   419   376   463   418   477
   483                  !      WITH yyTemp = TNode . ! WI (Attribute^.Child.Name);       474   383   474   474   482   482   474
   484                  ! . yyHead DO!                                             398   476
   485                  !        IF yyTemp . yyParent = ! WI (iMain); ! . ! WI (iNoTree); !\   482   483   383   483   474     *
                                                                                   380
      \ THEN!                                                                      482
   486                  !          yyOffset := !                                   381
   487                  WN (BitCount + Attribute^.Child.BitOffset); !;!            398   467   483   483   382
   488                  !          yyParent := TNode ;!                            485   483
   489                  !          ! WI (iMain); ! . Init! WI (iModule); ! ( TNode . ! WI (\   485   485   384     *   384   488
                                                                                     *
      \Attribute^.Child.Name); ! ) ;!                                              487   487   483
   490                  !        END ;!                                            480
   491                  !      END ;!                                              490
   492               END;                                                          491
   493               FOR i2 := 1 TO InstCount DO       (* add group members *)     476   396   476   476   484
   494                  IF Instance^[i2].Action = Action THEN                      485   468   493   390     *   485
   495                     WITH Instance^[i2] DO                                   483   494   494   493
   496                        IF Synthesized IN Properties THEN                    494   469   482   482   494
   497                           k := ToBit0 (Class, i2);                          398   393   470   495
   498                           IF k # i - 1 THEN                                 496   497   481   496
   499                              !      INCLUDE ( TNode . yyHead . yyIsComp , ! WN (k); \   397   489   484   398   487   498
      \! )!
   500                           END;                                              492
   501                        ELSIF Inherited IN Properties THEN                   395   432   496   496   498
   502                           k := ToBit1 (Selector, i2 - AttrCount - Selector^.Child.In\   499   396   433   497   430     *
                                                                                   489
      \stOffset);                                                                  396
   503                           !         INCLUDE ( TNode . ! WI (Selector^.Child.Name);      499   499   489   502   502   489
   504                           ! . yyHead . yyIsComp , ! WN (k); ! )!            499   499   499   502
   505                        END;                                                 500
   506                     END;                                                    505
   507                  END;                                                       506
   508               END;                                                          507
   509               IF n > 1 THEN                                                 498   471   501
   510               ELSE                                                          473
   511                  !     END (* WITH TNode *)!                                508
   512               END;                                                          511
   513               
   514            END;                                                             512
   515         END;                                                                514
   516 }; .
   517 
   518 PROCEDURE GenE (t: Tree)                                                    463   207   481   482
   519 
   520 Class (..) :-                                                               497
   521         VAR ToCompute : tSet ;                                              429     *    55
   522 {       GetIterator (t);                                                     30   518
   523         n := 0;                                                             509
   524         j := 2;                                                             478
   525         LOOP                                                                203
   526            IF j > InstCount THEN EXIT; END;                                 509   524   493   509     *   515
   527            WITH Instance^ [j] DO                                            495   495   526   495
   528               IF {Dummy, Output, Test} * Properties # {} THEN               526   420    39   469   501   526
   529                  IF (Test IN Properties) OR                                 528   528   501   528   351
   530                     ({Synthesized, Left} <= Properties) OR                  496   469   529   529
   531                     ({Inherited,  Right} <= Properties) OR                  501   327   530   530
   532                     ({Inherited,   Left} <= Properties) AND                 531   530   531   482
   533                     NOT (Input IN Properties) AND (Attribute^.Kind = Tree.Child) OR     482   482   529   532   532   489
                                                                                   482   518   503   531
   534                     ({Synthesized, Right, Dummy} <= Properties) AND (Selector # Iter\   530   531   528   533   533   503
      \ator) AND                                                                    30     *
   535                     (HasOutput IN Selector^.Child.Class^.Class.Properties) THEN    41   533   534   533   520     *   534
                                                                                   528
   536                     INC (n); EXIT;                                          448   523   526
   537                  END;                                                       526
   538               END;                                                          537
   539            END;                                                             538
   540            INC (j);                                                         536   527
   541         END;                                                                539
   542         IF (n = 0) AND ((Iterator = NoTree) OR NOT (HasOutput IN Iterator^.Child.Cla\   529   536   534   534    37   533
                                                                                   533   535   535     *   535
      \ss^.Class.Properties)) THEN RETURN; END;                                    535     *   535   535   325   541
   543 
   544         Class := t;                                                         542   522
   545         !      | ! WI (iMain); ! . ! WI (Name); ! ( TNode ) =>!             503   489     *   503   503
   546         FOR j := 2 TO InstCount DO                                          493   540   493   526   527
   547            WITH Instance^ [j] DO                                            527   527   546   546
   548               IF {Dummy, Output} * Properties # {} THEN                     542   534   528   542   542
   549                  IF ({Synthesized, Left} <= Properties) OR                  548   534   532   548   542
   550                     ({Inherited,  Right} <= Properties) OR                  532   534   549   549
   551                     ({Inherited,   Left} <= Properties) AND                 550   549   550   542
   552                     NOT (Input IN Properties) AND (Attribute^.Kind = Tree.Child) THE\   542   533   542   551   551   533
                                                                                   533   533   542
      \N                                                                           548
   553                     GenCall (t, j);                                         478   544   547
   554                  ELSIF ({Synthesized, Right, Dummy} <= Properties) AND (Selector # I\   501   549   550   548   552   552
                                                                                   535
      \terator) AND                                                                542     *
   555                     (HasOutput IN Selector^.Child.Class^.Class.Properties) THEN   542   552   554   552   544     *   554
                                                                                   552
   556       IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN   549   364   364   364   554   364   555
                                                                                   553   555   555   555
   557                     @      yyWriteVisit ( TNode , "@ WI (Selector^.Child.Name); @" )\    88   545
      \ ;@
   558       END;                                                                  542
   559                     !      yyE ( TNode . ! WI (Selector^.Child.Name); ! ) ;!      211   557   545   555   555   545
   560       IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN   556   556   556   556   556   556   556
                                                                                   556   556   556   556
   561                     !      yyVisitParent ( TNode . ! WI (Selector^.Child.Name); ! ) \    92   559   559   559   559   559
      \;!
   562       END;                                                                  558
   563                  END;                                                       562
   564               END;                                                          563
   565            END;                                                             564
   566         END;                                                                565
   567 
   568         MakeSet (ToCompute, InstCount);                                     145   521   546
   569         FOR i := 2 TO AttrCount DO                                          546   498   546   502   547
   570            WITH Instance^ [i] DO                                            547   547   569   569
   571               IF Test IN Properties THEN                                    560   529   560   560   560
   572                  FOR j := 2 TO InstCount DO                                 569   553   569   568   570
   573                     IF IsRelated (i, j, DP) THEN                            571   477   570   572   477   571
   574                        IF {Synthesized, Inherited} * Instance^ [j].Properties # {} T\   573   554   551   570   573   571
      \HEN                                                                         573
   575                           Include (ToCompute, j);                           434   568   574
   576                        END;                                                 566
   577                     END;                                                    576
   578                  END;                                                       577
   579               END;                                                          578
   580            END;                                                             579
   581         END;                                                                580
   582         FOR i := 2 TO InstCount DO                                          572   573   572   572   572
   583            WITH Instance^ [i] DO                                            570   574   582   582
   584               IF ({Synthesized, Left, Output} <= Properties) OR             574   574   551   548   574   550
   585                  ({Inherited,  Right, Output} <= Properties) THEN           574   554   584   584   574
   586                  Exclude (ToCompute, i);                                     27   575   583
   587               END;                                                          581
   588            END;                                                             587
   589         END;                                                                588
   590         WHILE NOT IsEmpty (ToCompute) DO                                    302   552    28   586   583
   591            GenCall (t, Extract (ToCompute));                                553   560    28   590
   592         END;                                                                589
   593         ReleaseSet (ToCompute);                                              27   591
   594         FOR i := 2 TO AttrCount DO                                          582   586   582   569   590
   595            IF Test IN Instance^ [i].Properties THEN                         584   571   571   583   594   585   585
   596               GenEvalAttr (t, i);                                           481   591   595
   597            END;                                                             592
   598         END;                                                                597
   599 
   600         IF (Iterator = NoTree) OR NOT (HasOutput IN Iterator^.Child.Class^.Class.Pro\   595   554   542   584   590   555
                                                                                   595     *   561   560     *
      \perties) THEN                                                               595   595
   601            !RETURN ;!                                                       542
   602         ELSE                                                                510
   603    IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN      600   560   560   560   560   560   600
                                                                                   596   600   600   600
   604            @      yyWriteVisit ( TNode , "@ WI (Iterator^.Child.Name); @" ) ;@    557   561
   605    END;                                                                     598
   606            !      yyt := TNode . ! WI (Iterator^.Child.Name); ! ;!          474   604   561   600   600   561
   607         END;                                                                605
   608 }; .
   609 
   610 PROCEDURE CompOutput (t: Tree)                                              518   185   603   552
   611 
   612 Class (..) :-                                                               603
   613    NOT (HasOutput IN Properties);                                           600   600   603   603
   614    Success := FALSE;                                                         52     *
   615    ForallAttributes (t, CompOutput);                                        414   610   610
   616    ForallClasses (Extensions, CompOutput2);                                 215     *     *
   617    Success;                                                                 614
   618    INCL (Properties, HasOutput);                                              *   613   613
   619    IsStable := FALSE;                                                       185   614
   620    .
   621 Child (..) :-                                                               606
   622    (Output IN Properties) OR (HasOutput IN Class^.Class.Properties);        585   613   618   600   618     *   612     *
                                                                                     *
   623    Success := TRUE;                                                         617   185
   624    .
   625 Attribute (..) :-                                                           552
   626    ({{Test, Output}} * Properties # {{}});                                  595   622   622
   627    Success := TRUE;                                                         623   623
   628    .
   629 
   630 PROCEDURE CompOutput2 (t: Tree)                                             610   616   615   610
   631 
   632 Class (..) :-                                                               622
   633    HasOutput IN Properties;                                                 622   622   626
   634    Success := TRUE;                                                         627   627
   635    .
   636 
   637 FUNCTION ToBit0 (Class, INTEGER) INTEGER                                      *   497   632   429     *
   638    class:_, i:_ ? RETURN class^.Class.BitIndex^ [i].ToBit - 1; .              *     *   596     *   601     *   637   481
                                                                                     *   422
   639 
   640 FUNCTION ToBit1 (Child, INTEGER) INTEGER                                    637   502   621   637     *
   641    Selector:_, i:_ ? RETURN Selector^.Child.Class^.Class.BitIndex^ [i].ToBit - 1; .     561   638   638     *   638     *
                                                                                   640   638     *   638     *   638
   642 
   643 FUNCTION ToBit2 (Class, Child, SHORTCARD) INTEGER                           640   433   641   641   323   640
   644    class:_, Selector:_, i:_ RETURN _ ?                                      638   641   641     *   641     *   641     *
   645 {  WITH Selector^.Child DO                                                  583   644   643   594
   646       RETURN class^.Class.BitCount + BitOffset +                            644   644   643   487   487
   647          Class^.Class.BitIndex^ [i - class^.Class.AttrCount - InstOffset].ToBit - 1;    646     *   641   644   646     *
                                                                                   594   502   641
   648    END;                                                                     607
   649 }; .
   650 
   651 FUNCTION ToAttr (Class, INTEGER) INTEGER                                    643   481   647   643     *
   652    LOCAL { VAR a: SHORTCARD; }                                                *   521   342   643
   653    class:_, i:_ RETURN _ ?                                                  647   644   647     *   646     *
   654 {  WITH class^.Class DO                                                     645   653   651   645
   655       FOR a := AttrCount + 1 TO InstCount DO                                594   652   647   594   582   654
   656          WITH Instance^ [a] DO                                              654   595   655   655
   657             IF ({Input, Test, Dummy} * Properties = {}) AND                 603   552   626   554   633   603
   658                (ToBit2 (class, Selector, a) = i) THEN RETURN a; END;        643   654   645   656   653   603   653     *
                                                                                   648
   659          END;                                                               658
   660       END;                                                                  659
   661    END;                                                                     660
   662    RETURN 0;                                                                658
   663 }; .
   664 
   665 PROCEDURE GenEvaluator (t: Tree)                                            630   373   630   630
   666 
   667 Assign (..) ;                                                                 *
   668 Copy (..) :-                                                                  *
   669    GenEvaluator (Arguments);                                                665     *
   670    .
   671 TargetCode (..) :-                                                            *
   672    GenEvaluator (Code);                                                     669     *
   673    .
   674 Check (..) :-                                                               332
   675    GenEvaluator (Condition);                                                672     *
   676    GenEvaluator (Statement);                                                675     *
   677    GenEvaluator (Actions);                                                  676     *
   678    .
   679 Designator (..) ;                                                             *
   680 Ident (..) ;                                                                  *
   681 Any (..) ;                                                                    *
   682 Anys (..) :-                                                                  *
   683    GenEvaluator (Next);                                                     677   305
   684    .
   685 Remote (..) :-                                                                *
   686    VAR TheClass : Class ;                                                   652     *   654
   687    VAR k : INTEGER ;                                                        686   504   651
   688    TheClass := IdentifyClass (TreeRoot^.Ag.Classes, Type);                  686    46   256   256   276   356
   689 {  IF TheClass # NoTree THEN                                                657   688   600   658
   690       Attr := IdentifyAttribute (TheClass, Attribute);                       51    46   689   625
   691       IF Attr # NoTree THEN                                                 689   690   689   689
   692          WITH Attr^.Attribute DO                                            656   691   690   656
   693             k := ToBit0 (TheClass, AttrIndex);                              687   637   690   423
   694             IF Synthesized IN Properties THEN                               691   584   633   657   691
   695                !      IFNOTIN ( ! WN (k); ! , ! EvalMThree.GenEvaluator (Designators\   335   504   693   373   683     *
      \);
   696                ! . yyHead . yyIsComp )!                                     504   504
   697                !      yyS! WN (k); ! ( !                                    247   695   695
   698                EvalMThree.GenEvaluator (Designators); ! ) ;!                695   695   695
   699                !    END ;!                                                  661
   700             ELSIF Inherited IN Properties THEN                              554   585   694   694   694
   701                !      IFNOTIN ( ! WN (k); ! , ! EvalMThree.GenEvaluator (Designators\   695   697   697   698   698   698
      \);
   702                ! . yyHead . yyIsComp ) yyI [!                               696   696   315
   703                EvalMThree.GenEvaluator (Designators); ! . yyHead . yyOffset + ! WN (\   701   701   701   702   486   701
      \k);                                                                         701
   704                ! ] ( ! EvalMThree.GenEvaluator (Designators); ! . yyHead . yyParent \   703   703   703   703   488
      \) ;!
   705                !    END ;!                                                  699
   706             END;                                                            705
   707          END;                                                               706
   708       END;                                                                  707
   709    END;                                                                     708
   710    GenEvaluator (Next);                                                     704   683
   711 }; .
Cross reference: 

-A-
 a                              151   151   152   152   323   324   325   326   333   342   652   655   656   658   658 
 Action                         108   108   109   110   125   125   126   127   130   130   131   132   348   348   349   350   366 
                                366   367   368   371   371   372   373   390   390   494   494 
 Actions                        677 
 ADR                             22   108   125   130   180   198   229   265   279   348   366   371 
 Ag                             141   187   188   189   218   219   220   254   255   256   688 
 AND                             69    87   106   108   123   125   130   346   348   364   366   371   376   447   469   482   532 
                                533   534   534   542   551   552   554   554   556   560   603   657 
 Any                            681 
 Anys                           682 
 Arguments                      669 
 ARRAY                           57   156 
 Assign                         667 
 Attr                            51   690   691   692 
 AttrCount                       79    85   333   396   410   430   502   569   594   647   655 
 Attribute                      113   113   113   115   117   118   351   351   351   354   356   358   376   378   382   385   419 
                                482   483   487   489   533   552   625   690   692 
 AttrIndex                      422   423   693 

-B-
 b                              150   150   151   152   153   153   429   433   434   435 
 BEGIN                           60   103   159   168   175   197   201   228   232   264   268   286   298   309 
 Begin                          285   288   292   295 
 BeginLine                      287   291 
 BitCount                       382   445   467   487   646 
 BitIndex                       411   413   446   468   477   481   638   641   647 
 BitIndexSize                    53   410   411 
 BitOffset                      382   487   646 
 BitSet                         153 
 BOOLEAN                         52   174   196   227   263 

-C-
 c                              151 
 Check                           50   270   278   332   674 
 Child                           79    80    85    86    90    92    95   113   115   117   118   333   335   336   351   353   354 
                                356   357   358   376   377   378   382   382   383   384   385   396   397   418   482   483   487 
                                489   502   503   533   535   542   552   555   559   561   600   606   621   640   641   643   645 
 ChildsClass                     51 
 Class                           31    61    69    79    85    87   104   105   106   123   320   328   346   364   382   382   393 
                                409   428   443   465   470   497   520   535   535   542   542   544   555   555   556   560   600 
                                600   603   612   622   622   632   637   638   641   641   643   646   647   647   647   651   654 
                                686 
 class                          638   638   644   646   647   653   654   658 
 ClassCount                      46 
 Classes                        144   149   185   207   215   241   244   273   276   688 
 Close                          297   300   304   307 
 CloseLine                      299   303 
 Code                           672 
 Codes                          187   188   191   192   218   219   222   223   254   255   258   259   287   288   291   292   299 
                                300   303   304 
 CompBitInfo                    144   407   414 
 CompInhIndices                 149   426 
 CompOutput                     185   610   615 
 CompOutput2                    616   630 
 Computed                        38 
 Condition                      675 
 Copy                           668 
 CountSynAttr                   215   441 

-D-
 define                         150   151   152   153 
 Demand                          42 
 Designator                     679 
 Designators                    695   698   701   703   704 
 DO                              61   105   148   153   190   213   221   251   257   290   302   313   326   341   379   389   391 
                                430   431   446   468   474   476   484   493   495   527   546   547   569   570   572   582   583 
                                590   594   645   654   655   656   692 
 DP                             342   477   573 
 Dummy                           41   420   528   534   548   554   657 
 DynArray                        24 

-E-
 ELSE                            74    93   116   120   129   169   200   208   231   237   243   267   275   338   355   361   370 
                                473   510   602 
 ELSIF                           66    78    84   113   123   364   395   501   554   700 
 END                             65    73    76    77    83    92    96    97    98    99   100   119   122   128   133   134   135 
                                136   148   153   163   168   182   183   194   202   204   209   210   211   225   233   237   238 
                                242   245   247   249   250   261   269   274   277   280   281   283   284   294   295   306   307 
                                312   316   317   318   325   331   339   340   344   345   360   363   369   374   375   386   387 
                                388   399   400   401   402   403   404   436   437   438   449   450   475   479   480   490   491 
                                492   500   505   506   507   508   511   512   514   515   526   537   538   539   541   542   558 
                                562   563   564   565   566   576   577   578   579   580   581   587   588   589   592   597   598 
                                605   607   648   658   659   660   661   699   705   706   707   708   709 
 EOL                            161   181 
 Error                           32   279 
 Errors                          32 
 Eval                           167   168   173   182 
 EvalCodes                      187   188   191   192   218   219   222   223   254   255   258   259   287   288   291   292   299 
                                300   303   304 
 EvalModule                      18   139   273   276 
 EvalModuleHead                 154 
 EvalMThree                      31    34   110   127   132   154   350   368   373   695   698   701   703   704 
 EvalMThree3                     16 
 EvalName                       285   295   297   307   318 
 Exclude                         27   586 
 EXIT                           526   536 
 Extensions                     616 
 Extract                         28   591 

-F-
 f                               45   188   192   219   223   255   259   288   292   300   304 
 FALSE                          614   619 
 Fmt                            180 
 FOR                            148   213   251   313   341   389   430   476   493   546   569   572   582   594   655 
 ForallAttributes                44   414   615 
 ForallClasses                   44   144   149   185   215   616 
 ForallClassesExtensionsFirst    44   207   241   244   273   276 
 FROM                            22    23    24    25    26    27    29    30    31    32    33    36 
 Funct                           42 
 FUNCTION                       637   640   643   651 

-G-
 gBitIndex                       54   413   422   423 
 GenCall                         59   100   343   478   553   591 
 GenE                           207   518 
 General                         23 
 GenEvalAttr                    102   136   481   596 
 GenEvaluator                   109   110   126   127   131   132   349   350   367   368   372   373   665   669   672   675   676 
                                677   683   695   698   701   703   704   710 
 GenS                           241   244   463 
 GetIterator                     30   522 
 GLOBAL                          20 

-H-
 HasOutput                       41   535   542   555   600   613   618   622   633 

-I-
 i                               50   102   105   148   148   151   152   213   217   235   236   246   247   251   252   253   271 
                                278   279   281   313   314   315   315   322   324   329   412   415   421   422   423   445   446 
                                467   468   477   481   498   569   570   573   582   583   586   594   595   596   638   638   641 
                                641   644   647   653   658 
 i2                              50   389   390   391   393   396   493   494   495   497   502 
 Ident                          680 
 IdentifyAttribute               46   690 
 IdentifyClass                   46   688 
 IF                              62    69    87   106   108   111   125   130   150   165   195   204   216   226   234   239   252 
                                262   271   278   310   314   325   327   329   334   342   346   348   351   366   371   376   380 
                                390   392   432   447   469   471   477   482   485   494   496   498   509   526   528   529   542 
                                548   549   556   560   571   573   574   584   595   600   603   657   689   691   694 
 IFNOTIN                         64    68    80    86   150   235   335   695   701 
 iMain                           43   153   156   158   162   167   168   173   177   186   204   217   253   330   380   384   472 
                                474   485   489   545 
 iModule                         43   168   177   384   489 
 IMPORT                          22    23    24    25    26    27    29    30    31    32    33    34    36 
 IN                              69    87   106   108   111   123   125   130   150   204   346   348   364   366   371   376   392 
                                395   432   447   469   482   496   501   529   533   535   542   552   555   556   560   571   595 
                                600   603   613   622   622   633   694   700 
 INC                            332   421   435   448   536   540 
 INCL                           618 
 INCLUDE                        153   205   236   246   336   394   397   499   503 
 Include                         27   434   575 
 Inherited                       39    66    78   327   395   432   501   531   532   550   551   574   585   700 
 InhIndexCount                   57   147   148   271   278   329   435 
 InhIndexSize                    56   146   147 
 InhIndices                      55   145   156   251   251   252   313   313   314   434 
 Init                           168   177   384   489 
 iNoTree                         47   204   380   485 
 Input                           39   376   420   482   533   552   657 
 Instance                        61   105   326   390   391   431   446   468   494   495   527   547   570   574   583   595   656 
 InstCount                      322   341   389   416   430   476   493   526   546   568   572   582   655 
 InstOffset                      79    85   333   396   502   647 
 Int                            180 
 INTEGER                        102   171   176   180   198   229   265   429   637   637   640   640   643   651   651   687 
 IO                              25 
 IsElement                       28    69    87   106   123   165   195   226   234   252   262   310   314   334   346   364   556 
                                560   603 
 IsEmpty                         28   590 
 IsRelated                       29   342   477   573 
 IsStable                        52   185   185   619 
 Iterator                        30   534   542   542   554   600   600   606 
 itTree                          43   113   114   158   167   173   186   217   253   351   352 

-J-
 j                               50    59    61    63    67    79    81    85   341   342   343   430   431   433   476   477   478 
                                524   526   527   540   546   547   553   572   573   574   575 

-K-
 k                               50    63    64    65    67    68    71    75    79    80    81    82    85    86    89    94   152 
                                333   335   337   393   394   396   398   497   498   499   502   504   687   693   695   697   701 
                                703 
 Kind                           113   190   221   257   290   302   351   376   482   533   552 

-L-
 LAST                           176 
 Left                            40    62    66   447   469   530   532   549   551   584 
 LOCAL                          652 
 Local                          188   192   219   223   255   259 
 LocalLine                      187   191   218   222   254   258 
 LONGINT                         53    56 
 LOOP                           203   525 
 LOOPHOLE                       180   198   229   265 

-M-
 MakeArray                       24   147   411 
 MakeSet                         27   145   568 
 Max                             23   415   416 
 MaxBit                          50   142   213   415   415 
 Maximum                         28   156   251   313 
 MaxInstCount                    50   143   145   146   148   416   416 
 MessageI                        32   279 
 MIN                            198   229   265 
 Minimum                         27   251   313 
 Module                         190   191   192   193   221   222   223   224   257   258   259   260   290   291   292   293   302 
                                303   304   305 
 Modules                        189   220   256   289   301 

-N-
 n                               50   151   151   152   152   214   216   239   448   471   509   523   536   542 
 Name                            80    86    90    92    95   115   118   330   335   336   353   354   357   358   377   378   383 
                                384   385   397   472   474   483   489   503   545   559   561   606 
 NARROW                         474 
 Next                           193   224   260   293   305   683   710 
 NoClass                         42 
 NoCodeClass                     37   321   444   466 
 Node                            51   189   190   191   192   193   193   220   221   222   223   224   224   256   257   258   259 
                                260   260   289   290   291   292   293   293   301   302   303   304   305   305 
 NonBaseComp                     41 
 NoPosition                      33   279 
 NOT                            108   125   130   150   165   348   366   371   376   447   469   482   533   542   552   590   600 
                                613 
 NoTree                          37   542   600   689   691 

-O-
 OF                              57   156   206   240   272 
 Options                         42    69    87   106   123   165   195   226   234   262   310   334   346   364   556   560   603 
 OR                             113   204   351   529   530   531   533   542   549   550   584   600   622 
 ORD                             69    87   106   123   165   195   226   234   262   310   334   346   364   556   560   603 
 Output                          39   528   548   584   585   622   626 

-P-
 POINTER                         57 
 Positions                       33 
 PROCEDURE                       59   102   139   158   167   173   186   217   253   285   297   407   426   441   463   518   610 
                                630   665 
 Properties                      62    66    69    78    84    87   106   108   111   123   125   130   321   327   346   348   364 
                                366   371   376   392   395   420   432   444   447   447   466   469   469   482   496   501   528 
                                529   530   531   532   533   534   535   542   548   549   550   551   552   554   555   556   560 
                                571   574   584   585   595   600   603   613   618   622   622   626   633   657   694   700 
 PUBLIC                          18 
 PutText                        160   161   178   179   181 

-Q-
 QueryTree                       47 

-R-
 Read                            38 
 Referenced                      37 
 Relations                       29 
 ReleaseSet                      27   593 
 Remote                         685 
 REMOTE_INH                     152 
 REMOTE_SYN                     151 
 REPEAT                         185 
 RETURN                         204   208   325   542   601   638   641   644   646   653   658   662 
 Reverse                         38 
 Right                           40    78    84   327   531   534   550   554   585 

-S-
 s                              150   150   153   153 
 Selector                        79    79    80    81    85    85    86    90    92    95   333   333   335   336   353   357   377 
                                382   383   384   396   396   397   433   502   502   503   534   535   554   555   559   561   641 
                                641   644   645   658 
 Sets                            27 
 Short                           32   279 
 SHORTCARD                       50    57    59   147   323   643   652 
 Statement                      676 
 Stderr                         160   161 
 Stdio                          160   161   178   179   181   311 
 Stdout                         178   179   181   311 
 StdOutput                       25 
 Success                         52   614   617   623   627   634 
 Synthesized                     39    62    84   392   447   469   496   530   534   549   554   574   584   694 
 SYSTEM                          22 

-T-
 t                               59    61    63    67    69    79    81    85    87   102   104   105   106   123   139   151   151 
                                152   152   154   324   328   343   346   364   407   414   426   433   441   463   470   478   481 
                                518   522   544   553   556   560   591   596   603   610   615   630   665 
 TargetCode                     671 
 tBitIndex                       47    54 
 tBitInfo                        47   411 
 Test                            40   111   420   447   469   528   529   571   595   626   657 
 Texts                           26 
 TheClass                       686   688   689   690   693 
 THEN                            62    66    69    78    84    87   106   108   111   113   123   125   130   150   165   195   204 
                                216   226   234   239   252   262   271   278   310   314   325   327   329   334   342   346   348 
                                351   364   366   371   376   380   390   392   395   432   447   469   471   477   482   485   494 
                                496   498   501   509   526   528   535   542   548   552   555   556   560   571   573   574   585 
                                595   600   603   658   689   691   694   700 
 TNode                           64    65    68    70    71    71    73    75    75    80    82    86    88    90    92    95   107 
                                115   118   124   330   335   336   338   347   353   357   365   377   383   384   394   397   472 
                                474   483   488   489   499   503   545   557   559   561   604   606 
 TO                              57   148   213   251   313   341   389   430   476   493   546   569   572   582   594   655 
 ToAttr                         324   423   446   468   477   481   651 
 ToBit                          422   638   641   647 
 ToBit0                          18    63    67   393   497   637   693 
 ToBit1                          79    85   333   396   502   640 
 ToBit2                          81   433   643   658 
 ToCompute                      521   568   575   586   590   591   593 
 tProcTree                      156 
 Trace                           41    69    87   106   123   346   364   556   560   603 
 TRAFO                           16 
 TREE                            17 
 Tree                            17    36   113   139   190   221   257   290   302   351   376   407   426   441   463   482   518 
                                533   552   610   630   665 
 TreeMThree2                     30 
 TreeRoot                        43   187   188   189   218   219   220   254   255   256   688 
 TRUE                           185   623   627   634 
 tSet                            27    55   521 
 TSIZE                           22   147   411 
 tTree                           37    51    59   102 
 Type                           113   117   351   356   688 
 TYPECASE                       206   240   272 

-U-
 UNTIL                          185 

-V-
 VAR                             49   156   171   174   196   227   263   323   429   521   652   686   687 
 Virtual                         40   108   125   130   348   366   371 

-W-
 WHILE                          190   221   257   290   302   590 
 WI                              45    80    86    90    92    95   114   115   117   118   153   156   158   158   162   167   167 
                                168   168   173   173   177   177   186   186   204   204   217   217   253   253   285   295   297 
                                307   318   330   330   335   336   352   353   354   356   357   358   377   378   380   380   383 
                                384   384   384   385   397   472   472   474   474   483   485   485   489   489   489   503   545 
                                545   559   561   606 
 WITH                            61   105   153   326   377   391   431   446   468   474   483   495   527   547   570   583   645 
                                654   656   692 
 WN                              45    64    65    68    71    75    80    82    86    89    94   156   217   235   236   246   247 
                                253   281   315   315   335   337   382   394   398   487   499   504   695   697   701   703 
 Wr                             160   161   161   178   179   181   181 
 Write                           38 
 write                          114   117   352   356 
 WriteB                          25 
 writeBOOLEAN                   112 
 WriteI                          25 
 WriteLine                       30   187   191   218   222   254   258   287   291   299   303 
 WriteNl                         25 
 WriteS                          25 
 WriteSet                        28 
 WriteText                       26   188   192   219   223   255   259   288   292   300   304 

-X-
 xxHigh                         174   180 
 xxLow                          196   198   227   229   263   265 
 xxStack                        171   176   180   198   198   229   229   265   265 

-Y-
 yyAbort                        158   163   237   338 
 yyb                            112 
 yyE                            168   177   186   211   559 
 yyExit                         162 
 yyf                            311 
 yyHead                          64    68    71    71    73    75    75    80    86   204   205   235   236   246   335   337   379 
                                394   398   484   499   504   696   702   703   704 
 yyI                             71    75    82   156   253   281   315   315   702 
 yyIsComp                        64    68    80    86   204   205   246   394   398   499   504   696   702 
 yyIsDone                       235   236   335   337 
 yyOffset                        71    75   381   486   703 
 yyParent                        71    73    75   380   383   485   488   704 
 yyS                             65    89    94   217   247   697 
 yyt                            158   167   168   168   173   177   177   186   204   204   205   206   217   235   236   237   240 
                                246   253   272   474   606 
 yyTemp                         153   153   153   377   380   383   483   485 
 yyVisitParent                   70    92   561 
 yyWriteEval                    107   124   347   365 
 yyWriteNl                      112   118   121   359   362 
 yyWriteVisit                    73    88   557   604 

-_-
 _                              638   638   641   641   644   644   644   644   653   653   653 

end cross reference, 2383 occurrences of 262 identifiers.
