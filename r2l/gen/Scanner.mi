
(* $Id: Scanner.mi,v 2.11 1992/09/24 13:14:00 grosch rel $ *)

(* Modified Rodney M. Bates 
   Mar 94 to compile under WRL 
   Mar 96 to fix a bug in PROCEDURE input 
   Mar 96 to add functions UpperCase and LowerCase, to exploit
          the arrays yyToUpper and yyToLower, already there.
   Apr 96 to add yyTotalLineCount and TotalLineCount. 
*) 

IMPLEMENTATION MODULE Scanner;
 
IMPORT SYSTEM, Checks, System, General, Positions, IO, DynArray, Strings, Source;
(* line 65 "../src/r2l.rex" *)


FROM SYSTEM	IMPORT ADDRESS;
FROM Strings	IMPORT tString, Concatenate, Char, SubString,
			StringToInt, AssignEmpty, Length;
FROM Texts	IMPORT MakeText, Append;
FROM StringMem	IMPORT tStringRef, PutString;
FROM Idents	IMPORT tIdent, MakeIdent, NoIdent;
FROM Errors	IMPORT ErrorMessage;
FROM Positions	IMPORT tPosition;

CONST
   SymIdent		= 1	;
   SymNumber		= 2	;
   SymString		= 3	;
   SymChar		= 4	;
   SymTargetcode	= 5	;
   SymExport		= 32	;
   SymGlobal		= 6	;
   SymLocal		= 31	;
   SymBegin		= 7	;
   SymClose		= 8	;
   SymEof		= 34	;
   SymDefault		= 36	;
   SymDefine		= 9	;
   SymStart		= 10	;
   SymRules		= 11	;
   SymNot		= 30	;
   SymDot		= 12	;
   SymComma		= 13	;
   SymEqual		= 14	;
   SymColon		= 15	;
   SymColonMinus	= 35	;
   SymNrSign		= 33	;
   SymSlash		= 16	;
   SymBar		= 17	;
   SymPlus		= 18	;
   SymMinus		= 19	;
   SymAsterisk		= 20	;
   SymQuestion		= 21	;
   SymLParen		= 22	;
   SymRParen		= 23	;
   SymLBracket		= 24	;
   SymRBracket		= 25	;
   SymLBrace		= 26	;
   SymRBrace		= 27	;
   SymLess		= 28	;
   SymGreater		= 29	;

   BraceMissing		= 13	;
   UnclosedComment	= 14	;
   UnclosedString	= 16	;
   Error		= 3	;

VAR
   level	: INTEGER	;
   string	: tString	;
   NoString	: tStringRef	;
   Position	: tPosition	;

PROCEDURE ErrorAttribute (Token: CARDINAL; VAR Attribute: tScanAttribute);
   BEGIN
      CASE Token OF
      |  SymIdent	: Attribute.Ident  := NoIdent;
      |  SymNumber	: Attribute.Number := 0;
      |  SymString	: Attribute.String := NoString;
      |  SymChar	: Attribute.Ch	   := '?';
      |  SymTargetcode	: MakeText (Attribute.Text);
      ELSE
      END;
   END ErrorAttribute;

 
CONST
   yyTabSpace		= 8;
   yyDNoState		= 0;
   yyFileStackSize	= 16;
   yyInitBufferSize	= 1024 * 8 + 256;
yyFirstCh	= 0C;
yyLastCh	= 177C;
yyEolCh	= 12C;
yyEobCh	= 177C;
yyDStateCount	= 159;
yyTableSize	= 2029;
yyEobState	= 47;
yyDefaultState	= 48;
STD	= 1;
targetcode	= 3;
set	= 5;
rules	= 7;
comment	= 9;
Str1	= 11;
Str2	= 13;
CStr1	= 15;
CStr2	= 17;
 
TYPE
   yyTableElmt		= SHORTCARD;
   yyStateRange		= yyTableElmt [0 .. yyDStateCount];
   yyTableRange		= yyTableElmt [0 .. yyTableSize];
   yyCombType		= RECORD Check, Next: yyStateRange; END;
   yyCombTypePtr	= POINTER TO yyCombType;
   yytChBufferPtr	= POINTER TO ARRAY [0 .. 1000000] OF CHAR;
   yyChRange		= [yyFirstCh .. yyLastCh];
   yyFileStackPtrTyp    = SHORTCARD;
   yyFileStackSubscript = yyFileStackPtrTyp [1 .. yyFileStackSize];

VAR
   yyBasePtr		: ARRAY yyStateRange	OF LONGCARD	;
   yyDefault		: ARRAY yyStateRange	OF yyStateRange	;
   yyComb		: ARRAY yyTableRange	OF yyCombType	;
   yyEobTrans		: ARRAY yyStateRange	OF yyStateRange	;
   yyToLower, yyToUpper	: ARRAY yyChRange	OF CHAR		;

   yyStateStack		: POINTER TO ARRAY [0 .. 1000000] OF yyStateRange;
   yyStateStackSize	: LONGINT;
   yyStartState		: yyStateRange;
   yyPreviousStart	: yyStateRange;
   yyCh			: CHAR;
 
   yySourceFile		: System.tFile;
   yyEof		: BOOLEAN;
   yyChBufferPtr	: yytChBufferPtr;
   yyChBufferStart	: INTEGER;
   yyChBufferSize	: LONGINT;
   yyChBufferIndex	: INTEGER;
   yyBytesRead		: INTEGER;
   yyLineCount		: SHORTCARD; (* Number of the current line,
                                        of the current file. *) 
   yyTotalLineCount	: CARDINAL;  (* Number of lines already read,
                                        of all files. *) 
   yyLineStart		: INTEGER;

   yyFileStackPtr	: yyFileStackPtrTyp;
   yyFileStack		: ARRAY yyFileStackSubscript OF RECORD
   			     SourceFile		: System.tFile;
			     Eof		: BOOLEAN;
   			     ChBufferPtr	: yytChBufferPtr;
			     ChBufferStart	: INTEGER;
			     ChBufferSize	: LONGINT;
   			     ChBufferIndex	: INTEGER;
   			     BytesRead		: INTEGER;
   			     LineCount		: SHORTCARD;
   			     LineStart		: INTEGER;
			  END;

PROCEDURE GetToken (): INTEGER;
   VAR
      yyState		: yyStateRange;
      yyTablePtr	: yyCombTypePtr;
      yyRestartFlag	: BOOLEAN;
      yyi, yySource, yyTarget : INTEGER;
      yyChBufferFree	: LONGINT;

(* line 138 "../src/r2l.rex" *)
 VAR TargetCode, String, Word: tString; PrevState: SHORTCARD; 
BEGIN
   LOOP
      yyState		:= yyStartState;
      TokenLength 	:= 0;
 
      (* ASSERT yyChBuffer [yyChBufferIndex] = first character *)
 
      LOOP		(* eventually restart after sentinel *)
	 LOOP		(* execute as many state transitions as possible *)
	    					(* determine next state *)
	    yyTablePtr := yyCombTypePtr (yyBasePtr [yyState] +
	       VAL(LONGCARD,ORD (yyChBufferPtr^ [yyChBufferIndex]) )
               * VAL(LONGCARD, SYSTEM.TSIZE (yyCombType)) );
	    IF yyTablePtr^.Check # yyState THEN
	       yyState := yyDefault [yyState];
	       IF yyState = yyDNoState THEN EXIT; END;
	    ELSE
	       yyState := yyTablePtr^.Next;
	       INC (TokenLength);
	       yyStateStack^ [TokenLength] := yyState;	(* push state *)
	       INC (yyChBufferIndex);		(* get next character *)
	    END;
	 END;
 
	 LOOP					(* search for last final state *)
CASE yyStateStack^ [TokenLength] OF
|159
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 173 "../src/r2l.rex" *)

			   IF level = 0 THEN
			      MakeText (Attribute.Text);
			      AssignEmpty (TargetCode);
			      Position := Attribute.Position;
			   ELSE
			      GetWord (Word);
			      Concatenate (TargetCode, Word);
			   END;
			   INC (level);
			
yyRestartFlag := FALSE; EXIT;
|158
:
(* line 185 "../src/r2l.rex" *)

			   DEC (level);
			   IF level = 0 THEN
			      yyStart (PrevState);
			      Append (Attribute.Text, TargetCode);
			      Attribute.Position := Position;
			      RETURN SymTargetcode;
			   ELSE
			      GetWord (Word);
			      Concatenate (TargetCode, Word);
			   END;
			
yyRestartFlag := FALSE; EXIT;
|31
,52
,59
,66
:
(* line 198 "../src/r2l.rex" *)

			   IF level > 0 THEN
			      GetWord (Word);
			      Concatenate (TargetCode, Word);
			   END;
			
yyRestartFlag := FALSE; EXIT;
|157
:
(* line 205 "../src/r2l.rex" *)

			   IF level > 0 THEN
			      Strings.Append (TargetCode, 11C);
			   END;
			   yyTab;
			
yyRestartFlag := FALSE; EXIT;
|156
:
(* line 212 "../src/r2l.rex" *)

			   IF level > 0 THEN
			      Append (Attribute.Text, TargetCode);
			      AssignEmpty (TargetCode);
			   END;
			   yyEol (0);
			
yyRestartFlag := FALSE; EXIT;
|32
:
(* line 220 "../src/r2l.rex" *)

			   IF level > 0 THEN
			      GetWord (Word);
			      Strings.Append (TargetCode, Char (Word, 2));
			   END;
			
yyRestartFlag := FALSE; EXIT;
|29
:
(* line 227 "../src/r2l.rex" *)

			   IF level > 0 THEN
			      Strings.Append (TargetCode, '\');
			   END;
			
yyRestartFlag := FALSE; EXIT;
|155
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 233 "../src/r2l.rex" *)
 GetWord (String); yyStart (CStr1); 
yyRestartFlag := FALSE; EXIT;
|154
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 235 "../src/r2l.rex" *)
 GetWord (String); yyStart (CStr2); 
yyRestartFlag := FALSE; EXIT;
|22
,54
,61
,68
:
(* line 240 "../src/r2l.rex" *)
GetWord (Word); Concatenate (String, Word);
yyRestartFlag := FALSE; EXIT;
|21
,55
,62
,69
:
(* line 240 "../src/r2l.rex" *)
GetWord (Word); Concatenate (String, Word);
yyRestartFlag := FALSE; EXIT;
|20
,35
,43
,56
,63
,70
:
(* line 240 "../src/r2l.rex" *)
GetWord (Word); Concatenate (String, Word);
yyRestartFlag := FALSE; EXIT;
|19
,34
,42
,57
,64
,71
:
(* line 240 "../src/r2l.rex" *)
GetWord (Word); Concatenate (String, Word);
yyRestartFlag := FALSE; EXIT;
|153
:
(* line 243 "../src/r2l.rex" *)
GetWord (Word); Concatenate (String, Word); yyEol (0);
yyRestartFlag := FALSE; EXIT;
|152
:
(* line 243 "../src/r2l.rex" *)
GetWord (Word); Concatenate (String, Word); yyEol (0);
yyRestartFlag := FALSE; EXIT;
|151
:
(* line 246 "../src/r2l.rex" *)
Strings.Append (String, Char (String, 1));
			    yyPrevious; Concatenate (TargetCode, String);
			
yyRestartFlag := FALSE; EXIT;
|150
:
(* line 246 "../src/r2l.rex" *)
Strings.Append (String, Char (String, 1));
			    yyPrevious; Concatenate (TargetCode, String);
			
yyRestartFlag := FALSE; EXIT;
|149
:
(* line 250 "../src/r2l.rex" *)
Strings.Append (String, 11C); yyTab;
yyRestartFlag := FALSE; EXIT;
|148
:
(* line 252 "../src/r2l.rex" *)
ErrorMessage (UnclosedString, Error, Attribute.Position);
			    Strings.Append (String, Char (String, 1));
			    yyEol (0); yyPrevious; Concatenate (TargetCode, String);
			
yyRestartFlag := FALSE; EXIT;
|147
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 257 "../src/r2l.rex" *)
yyStart (comment)	;
yyRestartFlag := FALSE; EXIT;
|23
,36
,53
,60
,67
:
(* line 258 "../src/r2l.rex" *)

yyRestartFlag := FALSE; EXIT;
|145
:
(* line 259 "../src/r2l.rex" *)
yyPrevious		;
yyRestartFlag := FALSE; EXIT;
|144
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 261 "../src/r2l.rex" *)
PrevState := STD; yyStart (targetcode); RETURN SymExport	;
yyRestartFlag := FALSE; EXIT;
|139
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 262 "../src/r2l.rex" *)
PrevState := STD; yyStart (targetcode); RETURN SymGlobal	;
yyRestartFlag := FALSE; EXIT;
|133
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 263 "../src/r2l.rex" *)
PrevState := STD; yyStart (targetcode); RETURN SymLocal	;
yyRestartFlag := FALSE; EXIT;
|128
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 264 "../src/r2l.rex" *)
PrevState := STD; yyStart (targetcode); RETURN SymBegin	;
yyRestartFlag := FALSE; EXIT;
|123
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 265 "../src/r2l.rex" *)
PrevState := STD; yyStart (targetcode); RETURN SymClose	;
yyRestartFlag := FALSE; EXIT;
|118
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 266 "../src/r2l.rex" *)
PrevState := STD; yyStart (targetcode); RETURN SymDefault	;
yyRestartFlag := FALSE; EXIT;
|114
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 267 "../src/r2l.rex" *)
PrevState := STD; yyStart (targetcode); RETURN SymEof		;
yyRestartFlag := FALSE; EXIT;
|111
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 268 "../src/r2l.rex" *)
RETURN SymDefine	;
yyRestartFlag := FALSE; EXIT;
|105
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 269 "../src/r2l.rex" *)
RETURN SymStart	;
yyRestartFlag := FALSE; EXIT;
|33
,41
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 270 "../src/r2l.rex" *)
yyStart (rules);	RETURN SymRules		;
yyRestartFlag := FALSE; EXIT;
|100
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 271 "../src/r2l.rex" *)
RETURN SymNot	;
yyRestartFlag := FALSE; EXIT;
|25
,39
,44
,45
,98
,99
,101
,102
,103
,104
,106
,107
,108
,109
,110
,112
,113
,115
,116
,117
,119
,120
,121
,122
,124
,125
,126
,127
,129
,130
,131
,132
,134
,135
,136
,137
,138
,140
,141
,142
,143
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 273 "../src/r2l.rex" *)

			   GetWord (Word);
			   Attribute.Ident  := MakeIdent (Word);
			   RETURN SymIdent;
			
yyRestartFlag := FALSE; EXIT;
|26
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 279 "../src/r2l.rex" *)

			   GetWord (Word);
			   Attribute.Number := StringToInt (Word);
			   RETURN SymNumber;
			
yyRestartFlag := FALSE; EXIT;
|30
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 285 "../src/r2l.rex" *)

			   GetWord (Word);
			   SubString (Word, 2, Length (Word) - 1, TargetCode);
			   Attribute.String := PutString (TargetCode);
			   RETURN SymString;
			
yyRestartFlag := FALSE; EXIT;
|97
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 292 "../src/r2l.rex" *)
RETURN SymDot	;
yyRestartFlag := FALSE; EXIT;
|96
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 293 "../src/r2l.rex" *)
RETURN SymEqual	;
yyRestartFlag := FALSE; EXIT;
|95
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 294 "../src/r2l.rex" *)
yyPrevious;		RETURN SymRBrace	;
yyRestartFlag := FALSE; EXIT;
|94
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 295 "../src/r2l.rex" *)
RETURN SymMinus	;
yyRestartFlag := FALSE; EXIT;
|93
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 296 "../src/r2l.rex" *)
RETURN SymComma	;
yyRestartFlag := FALSE; EXIT;
|92
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 297 "../src/r2l.rex" *)
RETURN SymBar	;
yyRestartFlag := FALSE; EXIT;
|91
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 298 "../src/r2l.rex" *)
RETURN SymPlus	;
yyRestartFlag := FALSE; EXIT;
|90
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 299 "../src/r2l.rex" *)
RETURN SymAsterisk	;
yyRestartFlag := FALSE; EXIT;
|89
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 300 "../src/r2l.rex" *)
RETURN SymQuestion	;
yyRestartFlag := FALSE; EXIT;
|88
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 301 "../src/r2l.rex" *)
RETURN SymLParen	;
yyRestartFlag := FALSE; EXIT;
|87
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 302 "../src/r2l.rex" *)
RETURN SymRParen	;
yyRestartFlag := FALSE; EXIT;
|86
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 303 "../src/r2l.rex" *)
RETURN SymLBracket	;
yyRestartFlag := FALSE; EXIT;
|85
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 304 "../src/r2l.rex" *)
RETURN SymRBracket	;
yyRestartFlag := FALSE; EXIT;
|84
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 305 "../src/r2l.rex" *)
yyStart (set);	RETURN SymLBrace	;
yyRestartFlag := FALSE; EXIT;
|83
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 306 "../src/r2l.rex" *)
RETURN SymNrSign	;
yyRestartFlag := FALSE; EXIT;
|82
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 307 "../src/r2l.rex" *)
RETURN SymSlash	;
yyRestartFlag := FALSE; EXIT;
|81
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 308 "../src/r2l.rex" *)
RETURN SymLess	;
yyRestartFlag := FALSE; EXIT;
|80
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 309 "../src/r2l.rex" *)
RETURN SymGreater	;
yyRestartFlag := FALSE; EXIT;
|78
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 310 "../src/r2l.rex" *)
PrevState := rules; yyStart (targetcode); RETURN SymColon;
yyRestartFlag := FALSE; EXIT;
|79
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 311 "../src/r2l.rex" *)
PrevState := rules; yyStart (targetcode); RETURN SymColonMinus;
yyRestartFlag := FALSE; EXIT;
|77
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 313 "../src/r2l.rex" *)
Attribute.Ch := 012C; RETURN SymChar;
yyRestartFlag := FALSE; EXIT;
|76
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 314 "../src/r2l.rex" *)
Attribute.Ch := 011C; RETURN SymChar;
yyRestartFlag := FALSE; EXIT;
|75
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 315 "../src/r2l.rex" *)
Attribute.Ch := 013C; RETURN SymChar;
yyRestartFlag := FALSE; EXIT;
|74
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 316 "../src/r2l.rex" *)
Attribute.Ch := 010C; RETURN SymChar;
yyRestartFlag := FALSE; EXIT;
|73
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 317 "../src/r2l.rex" *)
Attribute.Ch := 015C; RETURN SymChar;
yyRestartFlag := FALSE; EXIT;
|72
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 318 "../src/r2l.rex" *)
Attribute.Ch := 014C; RETURN SymChar;
yyRestartFlag := FALSE; EXIT;
|28
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 320 "../src/r2l.rex" *)

			   GetWord (Word);
			   SubString (Word, 2, Length (Word), TargetCode);
			   Attribute.Ch := CHR (CARDINAL (StringToInt (TargetCode)));
	  		   RETURN SymChar;
			
yyRestartFlag := FALSE; EXIT;
|27
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 327 "../src/r2l.rex" *)

			   GetWord (Word);
			   Attribute.Ch := Char (Word, 2);
	  		   RETURN SymChar;
			
yyRestartFlag := FALSE; EXIT;
|24
,37
,38
,146
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 333 "../src/r2l.rex" *)

			   GetWord (Word);
			   Attribute.Ch := Char (Word, 1);
	  		   RETURN SymChar;
			
yyRestartFlag := FALSE; EXIT;
|65
:
(* line 339 "../src/r2l.rex" *)

yyRestartFlag := FALSE; EXIT;
|58
:
(* line 340 "../src/r2l.rex" *)

yyRestartFlag := FALSE; EXIT;
|51
:
(* BlankAction *)
WHILE yyChBufferPtr^ [yyChBufferIndex] = ' ' DO INC (yyChBufferIndex); END;
yyRestartFlag := FALSE; EXIT;
|50
:
(* TabAction *)
DEC (yyLineStart, 7 - (yyChBufferIndex - yyLineStart - 2) MOD 8);
yyRestartFlag := FALSE; EXIT;
|49
:
(* EolAction *)
INC (yyLineCount);
yyLineStart := yyChBufferIndex - 1;
yyRestartFlag := FALSE; EXIT;
|1
,2
,3
,4
,5
,6
,7
,8
,9
,10
,11
,12
,13
,14
,15
,16
,17
,18
,40
,46
:
	    (* non final states *)
		  DEC (yyChBufferIndex);	(* return character *)
		  DEC (TokenLength)		(* pop state *)
 
| 48:
		  Attribute.Position.Line   := yyLineCount;
		  Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart);
		  INC (yyChBufferIndex);
		  TokenLength := 1;
IO.WriteC (IO.StdOutput, yyChBufferPtr^ [yyChBufferIndex-1]);
	          yyRestartFlag := FALSE; EXIT;

	    |  yyDNoState	:		(* automatic initialization *)
		  yyGetTables;
		  yyStateStack^ [0] := yyDefaultState; (* stack underflow sentinel *)
		  IF yyFileStackPtr = 0 THEN
		     yyInitialize;
		     yySourceFile := System.StdInput;
		  END;
	          yyRestartFlag := FALSE; EXIT;

| 47:
		  DEC (yyChBufferIndex);	(* undo last state transition *)
		  DEC (TokenLength);		(* get previous state *)
		  IF TokenLength = 0 THEN
		     yyState := yyStartState;
		  ELSE
		     yyState := yyStateStack^ [TokenLength];
		  END;

		  IF yyChBufferIndex # yyChBufferStart + yyBytesRead THEN
		     yyState := yyEobTrans [yyState];	(* end of buffer sentinel in buffer *)
		     IF yyState # yyDNoState THEN
			INC (yyChBufferIndex);
			INC (TokenLength);
			yyStateStack^ [TokenLength] := yyState;
			yyRestartFlag := TRUE; EXIT;
		     END;
		  ELSE				(* end of buffer reached *)

		     (* copy initial part of token in front of input buffer *)

		     yySource := yyChBufferIndex - TokenLength - 1;
		     yyTarget := General.MaxAlign - TokenLength MOD General.MaxAlign - 1;
		     IF yySource # yyTarget THEN
			FOR yyi := 1 TO TokenLength DO
			   yyChBufferPtr^ [yyTarget + yyi] := yyChBufferPtr^ [yySource + yyi];
			END;
			DEC (yyLineStart, yySource - yyTarget);
			yyChBufferStart := yyTarget + TokenLength + 1;
		     ELSE
			yyChBufferStart := yyChBufferIndex;
		     END;

		     IF NOT yyEof THEN		(* read buffer and restart *)
			yyChBufferFree 
                          := VAL( LONGINT 
                                , General.Exp2 
                                  (General.Log2 
                                     (yyChBufferSize - 4 - VAL(LONGINT,General.MaxAlign) -VAL(LONGINT, TokenLength))
                                  )
                                );
			IF yyChBufferFree < yyChBufferSize DIV 8 THEN
			   DynArray.ExtendArray (yyChBufferPtr, yyChBufferSize, SYSTEM.TSIZE (CHAR));
			   IF yyChBufferPtr = NIL THEN yyErrorMessage (1); END;
			   yyChBufferFree 
                             := VAL ( LONGINT
                                    , General.Exp2 
                                        (General.Log2 
                                           (yyChBufferSize - 4 - VAL(LONGINT,General.MaxAlign) - VAL(LONGINT,TokenLength))
                                        )
                                    );
			   IF yyStateStackSize < yyChBufferSize THEN
			      DynArray.ExtendArray (yyStateStack, yyStateStackSize, SYSTEM.TSIZE (yyStateRange));
			      IF yyStateStack = NIL THEN yyErrorMessage (1); END;
			   END;
			END;
			yyChBufferIndex := yyChBufferStart;
			yyBytesRead := Source.GetLine 
                                 (yySourceFile
                                  , SYSTEM.ADR (yyChBufferPtr^ [yyChBufferIndex])
                                  , VAL ( CARDINAL , yyChBufferFree )
                                  );
			IF yyBytesRead <= 0 THEN yyBytesRead := 0; yyEof := TRUE; END;
			yyChBufferPtr^ [yyChBufferStart + yyBytesRead    ] := yyEobCh;
			yyChBufferPtr^ [yyChBufferStart + yyBytesRead + 1] := 0C;
			yyRestartFlag := TRUE; EXIT;
		     END;

		     IF TokenLength = 0 THEN	(* end of file reached *)
			Attribute.Position.Line   := yyLineCount;
			Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart);
			CloseFile;
			IF yyFileStackPtr = 0 THEN
(* line 146 "../src/r2l.rex" *)

   CASE yyStartState OF
   | targetcode	,
     set	: ErrorMessage (BraceMissing	, Error, Attribute.Position);
   | comment	: ErrorMessage (UnclosedComment	, Error, Attribute.Position);
   | CStr1, CStr2,
     Str1, Str2	: ErrorMessage (UnclosedString	, Error, Attribute.Position);
   ELSE
   END;
   yyStart (STD);

			END;
			IF yyFileStackPtr = 0 THEN RETURN EofToken; END;
			yyRestartFlag := FALSE; EXIT;
		     END;
		  END;
	    ELSE
	       yyErrorMessage (0);
	    END;
	 END;
	 IF yyRestartFlag THEN ELSE EXIT; END;
      END;
   END;
   END GetToken;
 
PROCEDURE BeginFile (FileName: ARRAY OF CHAR);
   BEGIN
      IF yyStateStack^ [0] = yyDNoState THEN	(* have tables been read in ? *)
	 yyGetTables;
	 yyStateStack^ [0] := yyDefaultState;	(* stack underflow sentinel *)
      END;
      yyInitialize;
      yySourceFile := Source.BeginSource (FileName);
      IF yySourceFile < 0 THEN yyErrorMessage (5); END;
   END BeginFile;

PROCEDURE yyInitialize;
   BEGIN
      IF yyFileStackPtr >= yyFileStackSize THEN yyErrorMessage (3); END;
      INC (yyFileStackPtr);			(* push file *)
      WITH yyFileStack [yyFileStackPtr] DO
	 SourceFile	:= yySourceFile		;
	 Eof		:= yyEof		;
	 ChBufferPtr	:= yyChBufferPtr	;
	 ChBufferStart	:= yyChBufferStart	;
	 ChBufferSize	:= yyChBufferSize	;
	 ChBufferIndex	:= yyChBufferIndex	;
	 BytesRead	:= yyBytesRead		;
	 LineCount	:= yyLineCount		;
	 LineStart	:= yyLineStart		;
      END;
						(* initialize file state *)
      yyChBufferSize	:= yyInitBufferSize;
      DynArray.MakeArray (yyChBufferPtr, yyChBufferSize, SYSTEM.TSIZE (CHAR));
      IF yyChBufferPtr = NIL THEN yyErrorMessage (1); END;
      yyChBufferStart	:= General.MaxAlign;
      yyChBufferPtr^ [yyChBufferStart - 1] := yyEolCh; (* begin of line indicator *)
      yyChBufferPtr^ [yyChBufferStart    ] := yyEobCh; (* end of buffer sentinel *)
      yyChBufferPtr^ [yyChBufferStart + 1] := 0C;
      yyChBufferIndex	:= yyChBufferStart;
      yyEof		:= FALSE;
      yyBytesRead	:= 0;
      yyLineCount	:= 1;
      yyTotalLineCount	:= 0;
      yyLineStart	:= yyChBufferStart - 1;
   END yyInitialize;

PROCEDURE CloseFile;
   BEGIN
      IF yyFileStackPtr = 0 THEN yyErrorMessage (4); END;
      Source.CloseSource (yySourceFile);
      DynArray.ReleaseArray (yyChBufferPtr, yyChBufferSize, SYSTEM.TSIZE (CHAR));
      WITH yyFileStack [yyFileStackPtr] DO	(* pop file *)
	 yySourceFile	:= SourceFile		;
	 yyEof		:= Eof			;
	 yyChBufferPtr	:= ChBufferPtr		;
	 yyChBufferStart:= ChBufferStart	;
	 yyChBufferSize	:= ChBufferSize		;
	 yyChBufferIndex:= ChBufferIndex	;
	 yyBytesRead	:= BytesRead		;
	 yyLineCount	:= LineCount		;
	 yyLineStart	:= LineStart		;
      END;
      DEC (yyFileStackPtr);		
   END CloseFile;

PROCEDURE GetWord (VAR Word: Strings.tString);
   VAR i, WordStart	: INTEGER;
   BEGIN
      WordStart := yyChBufferIndex - TokenLength - 1;
      FOR i := 1 TO TokenLength DO
	 Word.Chars [VAL(Strings.tStringIndex,i)] 
           := yyChBufferPtr^ [WordStart + i];
      END;
      Word.Length := VAL(SHORTCARD,TokenLength);
   END GetWord;
 
PROCEDURE GetLower (VAR Word: Strings.tString);
   VAR i, WordStart	: INTEGER;
   BEGIN
      WordStart := yyChBufferIndex - TokenLength - 1;
      FOR i := 1 TO TokenLength DO
	 Word.Chars [VAL(Strings.tStringIndex,i)] 
           := yyToLower [yyChBufferPtr^ [WordStart + i]];
      END;
      Word.Length := VAL(SHORTCARD,TokenLength);
   END GetLower;
 
PROCEDURE GetUpper (VAR Word: Strings.tString);
   VAR i, WordStart	: INTEGER;
   BEGIN
      WordStart := yyChBufferIndex - TokenLength - 1;
      FOR i := 1 TO TokenLength DO
	 Word.Chars [VAL(Strings.tStringIndex,i)] 
           := yyToUpper [yyChBufferPtr^ [WordStart + i]];
      END;
      Word.Length := VAL(SHORTCARD,TokenLength);
   END GetUpper;
 
PROCEDURE yyStart (State: yyStateRange);
   BEGIN
      yyPreviousStart	:= yyStartState;
      yyStartState	:= State;
   END yyStart;
 
PROCEDURE yyPrevious;
   VAR s	: yyStateRange;
   BEGIN
      s		      := yyStartState;
      yyStartState    := yyPreviousStart;
      yyPreviousStart := s;
   END yyPrevious;
 
PROCEDURE yyEcho;
   VAR i	: INTEGER;
   BEGIN
      FOR i := yyChBufferIndex - TokenLength TO yyChBufferIndex - 1 DO
	 IO.WriteC (IO.StdOutput, yyChBufferPtr^ [i]);
      END;
   END yyEcho;
 
PROCEDURE yyLess (n: INTEGER);
   BEGIN
      DEC (yyChBufferIndex, TokenLength - n);
      TokenLength := n;
   END yyLess;
 
PROCEDURE yyTab;
   BEGIN
      DEC (yyLineStart, yyTabSpace - 1 - (yyChBufferIndex - yyLineStart - 2) MOD yyTabSpace);
   END yyTab;

PROCEDURE yyTab1 (a: INTEGER);
   BEGIN
      DEC (yyLineStart, yyTabSpace - 1 - (yyChBufferIndex - yyLineStart - TokenLength + a - 1) MOD yyTabSpace);
   END yyTab1;

PROCEDURE yyTab2 (a, b: INTEGER);
   BEGIN
      DEC (yyLineStart, yyTabSpace - 1 - (yyChBufferIndex - yyLineStart - TokenLength + a - 1) MOD yyTabSpace);
   END yyTab2;

PROCEDURE yyEol (Column: INTEGER);
   BEGIN
      INC (yyLineCount);
      INC (yyTotalLineCount);
      yyLineStart := yyChBufferIndex - 1 - Column;
   END yyEol;

PROCEDURE output (c: CHAR);
   BEGIN
      IO.WriteC (IO.StdOutput, c);
   END output;

PROCEDURE unput (c: CHAR);
   BEGIN
      DEC (yyChBufferIndex);
      yyChBufferPtr^ [yyChBufferIndex] := c;
   END unput;

PROCEDURE input (): CHAR;
   BEGIN
      IF yyChBufferIndex = yyChBufferStart + yyBytesRead THEN
	 IF NOT yyEof THEN
	    DEC (yyLineStart, yyBytesRead);
	    DEC (yyLineStart, yyChBufferStart); (* RMB *)
	    yyChBufferIndex := 0;
	    yyChBufferStart := 0;
	    yyBytesRead := Source.GetLine 
                    (yySourceFile, yyChBufferPtr
                    , VAL(CARDINAL,General.Exp2 (General.Log2 (yyChBufferSize)))
                    );
	    IF yyBytesRead <= 0 THEN yyBytesRead := 0; yyEof := TRUE; END;
	    yyChBufferPtr^ [yyBytesRead    ] := yyEobCh;
	    yyChBufferPtr^ [yyBytesRead + 1] := 0C;
	 END;
      END;
      IF yyChBufferIndex = yyChBufferStart + yyBytesRead THEN
	 RETURN 0C;
      ELSE
	 INC (yyChBufferIndex);
	 RETURN yyChBufferPtr^ [yyChBufferIndex - 1];
      END
   END input;

(* VISIBLE: *) 
PROCEDURE UpperCase ( Ch : CHAR ) : CHAR ; 
   BEGIN
     RETURN yyToUpper [ Ch ]; 
   END UpperCase;

(* VISIBLE: *) 
PROCEDURE LowerCase ( Ch : CHAR ) : CHAR ; 
   BEGIN
     RETURN yyToLower [ Ch ]; 
   END LowerCase;

(* VISIBLE *) 
PROCEDURE TotalLineCount ( ) : CARDINAL ;  
   BEGIN
     RETURN yyTotalLineCount 
   END TotalLineCount;  

PROCEDURE BeginScanner;
   BEGIN
(* line 140 "../src/r2l.rex" *)

   level := 0;
   AssignEmpty (string);
   NoString := PutString (string);

   END BeginScanner;
 
PROCEDURE CloseScanner;
   BEGIN
   END CloseScanner;
 
PROCEDURE yyGetTables;
   VAR
      BlockSize, j, n	: CARDINAL;
      TableFile	: System.tFile;
      i		: yyStateRange;
      Base	: ARRAY yyStateRange OF yyTableRange;
   BEGIN
      BlockSize	:= 64000 DIV SYSTEM.TSIZE (yyCombType);
      TableFile := System.OpenInput (ScanTabName);
      Checks.ErrorCheck ("yyGetTables.OpenInput", TableFile);
      IF (yyGetTable (TableFile, SYSTEM.ADR (Base      )) DIV SYSTEM.TSIZE (yyTableElmt) - 1 
         # yyDStateCount) OR
         (yyGetTable (TableFile, SYSTEM.ADR (yyDefault )) DIV SYSTEM.TSIZE (yyTableElmt) - 1 
         # yyDStateCount) OR
         (yyGetTable (TableFile, SYSTEM.ADR (yyEobTrans)) DIV SYSTEM.TSIZE (yyTableElmt) - 1 
         # yyDStateCount)
	 THEN
	 yyErrorMessage (2);
      END;
      n := 0;
      j := 0;
      WHILE j <= yyTableSize DO
         INC (n, yyGetTable (TableFile, SYSTEM.ADR (yyComb [VAL(SHORTCARD,j)])) DIV SYSTEM.TSIZE (yyCombType));
         INC (j, BlockSize);
      END;
      IF n # yyTableSize + 1 THEN yyErrorMessage (2); END;
      System.Close (TableFile);

      FOR i := 0 TO yyDStateCount DO
	 yyBasePtr [i] := LONGCARD (SYSTEM.ADR (yyComb [Base [i]]));
      END;
   END yyGetTables;
 
PROCEDURE yyGetTable (TableFile: System.tFile; Address: SYSTEM.ADDRESS): CARDINAL;
   VAR
      N		: INTEGER;
      Length	: yyTableElmt;
   BEGIN
      N := System.Read (TableFile, SYSTEM.ADR (Length), SYSTEM.TSIZE (yyTableElmt));
      Checks.ErrorCheck ("yyGetTable.Read1", N);
      N := System.Read (TableFile, Address, VAL(INTEGER,Length));
      Checks.ErrorCheck ("yyGetTable.Read2", N);
      RETURN VAL(CARDINAL,Length);
   END yyGetTable;
 
PROCEDURE yyErrorMessage (ErrorCode: SHORTCARD);
   BEGIN
      Positions.WritePosition (IO.StdError, Attribute.Position);
      CASE ErrorCode OF
   | 0: IO.WriteS (IO.StdError, ": Scanner: internal error");
   | 1: IO.WriteS (IO.StdError, ": Scanner: out of memory");
   | 2: IO.WriteS (IO.StdError, ": Scanner: table mismatch");
   | 3: IO.WriteS (IO.StdError, ": Scanner: too many nested include files");
   | 4: IO.WriteS (IO.StdError, ": Scanner: file stack underflow (too many calls of CloseFile)");
   | 5: IO.WriteS (IO.StdError, ": Scanner: cannot open input file");
      END;
      IO.WriteNl (IO.StdError); Exit;
   END yyErrorMessage;
 
PROCEDURE yyExit;
   BEGIN
      IO.CloseIO; System.Exit (1);
   END yyExit;

BEGIN
   ScanTabName		:= "Scanner.Tab";
   Exit			:= yyExit;
   yyFileStackPtr	:= 0;
   yyStartState		:= 1;			(* set up for auto init *)
   yyPreviousStart	:= 1;
   yyBasePtr [yyStartState] := LONGCARD (SYSTEM.ADR (yyComb [0]));
   yyDefault [yyStartState] := yyDNoState;
   yyComb [0].Check	:= yyDNoState;
   yyChBufferPtr	:= SYSTEM.ADR (yyComb [0]);	(* dirty trick *)
   yyChBufferIndex	:= 1;				(* dirty trick *)
   yyStateStackSize	:= yyInitBufferSize;
   DynArray.MakeArray (yyStateStack, yyStateStackSize, SYSTEM.TSIZE (yyStateRange));
   yyStateStack^ [0]	:= yyDNoState;
   
   FOR yyCh := yyFirstCh TO yyLastCh DO yyToLower [yyCh] := yyCh; END;
   yyToUpper := yyToLower;
   FOR yyCh := 'A' TO 'Z' DO
      yyToLower [yyCh] := CHR (ORD (yyCh) - ORD ('A') + ORD ('a'));
   END;
   FOR yyCh := 'a' TO 'z' DO
      yyToUpper [yyCh] := CHR (ORD (yyCh) - ORD ('a') + ORD ('A'));
   END;
END Scanner.
