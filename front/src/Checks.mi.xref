     1 (* check i/o errors *)
     2 
     3 (* $Id: Checks.mi,v 1.3 1992/02/05 08:00:00 grosch rel $ *)
     4 
     5 (* Rodney M. Bates, modifications: 
c    6 
c    7     1-98 Change DevNull so it has a trailing null when passed
c    8 
c    9 *) 
    10 
    11 (* $Log: Checks.mi,v $
c   12  * Revision 1.3  1992/02/05  08:00:00  grosch
c   13  * renamed NULL to DevNull 
c   14  *
c   15  * Revision 1.2  1991/11/21  14:47:50  grosch
c   16  * new version of RCS on SPARC
c   17  *
c   18  * Revision 1.1  90/06/11  18:44:43  grosch
c   19  * layout improvements
c   20  * 
c   21  * Revision 1.0  88/10/04  14:26:40  vielsack
c   22  * Initial revision
c   23  * 
c   24  *)
    25 
    26 IMPLEMENTATION MODULE Checks;                                                 *     *
    27 
    28 FROM    IO              IMPORT  tFile, ReadOpen, WriteOpen;                   *     *     *     *
    29 FROM    Strings         IMPORT  tString, ArrayToString;                       *     *     *
    30 FROM    SysError        IMPORT  StatIsBad, SysErrorMessageI;                  *     *     *
    31 FROM    SYSTEM          IMPORT  ADR;                                          *     *
    32 FROM    Errors          IMPORT  eInteger, eString, eFatal, eError, ErrorMessageI;         *     *     *     *     *     *
    33 
    34 VAR DevNull : ARRAY [ 0 .. 15 ] OF CHAR;                                      *     *
    35 
    36 PROCEDURE ErrorCheck (a: ARRAY OF CHAR; n: INTEGER);                          *     *     *     *     *
    37   VAR s : tString;                                                            *    29
    38   BEGIN
    39     IF StatIsBad (n) THEN                                                    30    36
    40       ArrayToString (a, s);                                                  29    36    37
    41       SysErrorMessageI (n, eFatal, eString, ADR (s));                        30    36    32    32    31    37
    42     END;
    43   END ErrorCheck;                                                            36
    44 
    45 PROCEDURE CheckReadOpen (VAR file: tFile; a: ARRAY OF CHAR);                  *     *    28    36     *
    46   VAR s: tString;                                                            37    29
    47   BEGIN
    48     IF StatIsBad (file) THEN                                                 30    45
    49       ArrayToString (a, s);                                                  29    45    46
    50       SysErrorMessageI (file, eError, eString, ADR(s));                      30    45    32    32    31    46
    51       file := ReadOpen (DevNull);                                            45    28    34
    52       IF StatIsBad (file) THEN                                               30    45
    53         ArrayToString (DevNull, s);                                          29    34    46
    54         SysErrorMessageI (file, eFatal, eString, ADR(s));                    30    45    32    32    31    46
    55       END;
    56     END;
    57   END CheckReadOpen;                                                         45
    58 
    59 PROCEDURE CheckWriteOpen (VAR file: tFile; a: ARRAY OF CHAR);                 *    45    28    45     *
    60   VAR s: tString;                                                            46    29
    61   BEGIN
    62     IF StatIsBad (file) THEN                                                 30    59
    63       ArrayToString (a, s);                                                  29    59    60
    64       SysErrorMessageI (file, eError, eString, ADR(s));                      30    59    32    32    31    60
    65       file := WriteOpen (DevNull);                                           59    28    34
    66       IF StatIsBad (file) THEN                                               30    59
    67         ArrayToString (DevNull, s);                                          29    34    60
    68         SysErrorMessageI (file, eFatal, eString, ADR(s));                    30    59    32    32    31    60
    69       END;
    70     END;
    71   END CheckWriteOpen;                                                        59
    72 
    73 BEGIN
    74   DevNull := '/dev/null';                                                    34
    75 END Checks.                                                                  26
Cross reference: * is declaration, = is assignment

-A-
 a                               36*   40    45*   49    59*   63 
 ADR                             31*   41    50    54    64    68 
 ArrayToString                   29*   40    49    53    63    67 

-C-
 CHAR                            34    36    45    59 
 CheckReadOpen                   45*   57 
 Checks                          26*   75 
 CheckWriteOpen                  59*   71 

-D-
 DevNull                         34*   51    53    65    67    74=

-E-
 eError                          32*   50    64 
 eFatal                          32*   41    54    68 
 eInteger                        32*
 ErrorCheck                      36*   43 
 ErrorMessageI                   32*
 Errors                          32*
 eString                         32*   41    50    54    64    68 

-F-
 file                            45*   48    50    51=   52    54    59*   62    64    65=   66    68 

-I-
 IMPLEMENTATION                  26*
 INTEGER                         36 
 IO                              28*

-N-
 n                               36*   39    41 

-R-
 ReadOpen                        28*   51 

-S-
 s                               37*   40    41    46*   49    50    53    54    60*   63    64    67    68 
 StatIsBad                       30*   39    48    52    62    66 
 Strings                         29*
 SysError                        30*
 SysErrorMessageI                30*   41    50    54    64    68 
 SYSTEM                          31*

-T-
 tFile                           28*   45    59 
 tString                         29*   37    46    60 

-W-
 WriteOpen                       28*   65 

end cross reference, 109 occurrences of 30 identifiers.
