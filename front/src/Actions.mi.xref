     1 (* hanlde global actions and comments *)
     2 
     3 (* $Id: Actions.mi,v 1.5 1992/08/07 15:13:51 grosch rel $ *)
     4 
     5 (* $Log: Actions.mi,v $
c    6  * Revision 1.5  1992/08/07  15:13:51  grosch
c    7  * allow several scanner and parsers; extend module Errors
c    8  *
c    9  * Revision 1.4  1991/12/04  16:21:41  grosch
c   10  * unified escape conventions for all tools
c   11  *
c   12  * Revision 1.3  1991/11/21  14:47:50  grosch
c   13  * new version of RCS on SPARC
c   14  *
c   15  * Revision 1.2  90/06/11  18:44:36  grosch
c   16  * layout improvements
c   17  * 
c   18  * Revision 1.1  89/01/12  18:07:10  vielsack
c   19  * line number is printed before an action is output
c   20  * 
c   21  * Revision 1.0  88/10/04  14:26:33  vielsack
c   22  * Initial revision
c   23  * 
c   24  *)
    25 
    26 IMPLEMENTATION MODULE Actions;                                                *     *
    27 
    28 FROM IO         IMPORT WriteC, WriteS, WriteI, WriteNl, tFile;                *     *     *     *     *     *
    29 FROM Lists      IMPORT MakeList, IsEmpty, Head, Tail, tList;                  *     *     *     *     *     *
    30 FROM Memory     IMPORT Alloc;                                                 *     *
    31 FROM Strings    IMPORT Char, Length, tStringIndex, tString;                   *     *     *     *     *
    32 FROM StringMem  IMPORT GetString, tStringRef, WriteString;                    *     *     *     *
    33 FROM SYSTEM     IMPORT TSIZE;                                                 *     *
    34 FROM TokenTab   IMPORT PosType;                                               *     *
    35 FROM WriteTok   IMPORT tLanguage, Language, SourceFileName;                   *     *     *     *
    36 
    37   TYPE
    38     ElmtType =                                                                *
    39       RECORD
    40         Act     : tList;                                                      *    29
    41         ActPos  : PosType;                                                    *    34
    42         Comm    : tList;                                                      *    29
    43         CommPos : PosType;                                                    *    34
    44       END;
    45 
    46   VAR
    47     ActionMode    : tActionMode;                                              *     *
    48     KeyPos        : ARRAY tActionMode OF PosType;                             *     *    34
    49     Action        : ARRAY tActionMode OF ElmtType;                            *     *    38
    50     ActionComm    : ARRAY tActionMode OF tList;                               *     *    29
    51     ActionCommPos : ARRAY tActionMode OF PosType;                             *     *    34
    52     dummyPos      : PosType;                                                  *    34
    53   
    54   PROCEDURE PutComment (kind: tActionMode; kp: PosType; c: tList; cp: PosType);     *     *     *     *    34     *    29
                                                                                     *    34
    55     BEGIN
    56       KeyPos [kind] := kp;                                                   48    54    54
    57       ActionComm [kind] := c;                                                50    54    54
    58       ActionCommPos [kind] := cp;                                            51    54    54
    59     END PutComment;                                                          54
    60 
    61   PROCEDURE GetComment (kind: tActionMode; VAR kp: PosType; VAR c: tList; VAR cp: Po\     *    54     *    54    34    54
                                                                                    29    54
      \sType);                                                                      34
    62     BEGIN
    63       kp := KeyPos [kind];                                                   61    48    61
    64       c  := ActionComm [kind];                                               61    50    61
    65       cp := ActionCommPos [kind];                                            61    51    61
    66     END GetComment;                                                          61
    67 
    68   PROCEDURE PutAction (kind: tActionMode; a: tList; ap: PosType; c: tList; cp: PosTy\     *    61     *     *    29     *
                                                                                    34    61    29    61
      \pe);                                                                         34
    69     BEGIN
    70       WITH Action [kind] DO                                                  49    68
    71         Act := a;                                                            40    68
    72         ActPos := ap;                                                        41    68
    73         Comm := c;                                                           42    68
    74         CommPos := cp;                                                       43    68
    75       END;
    76     END PutAction;                                                           68
    77 
    78   PROCEDURE GetAction (kind: tActionMode; VAR a: tList; VAR ap: PosType; VAR c: tLis\     *    68     *    68    29    68
                                                                                    34    68
      \t; VAR cp: PosType);                                                         29    68    34
    79     BEGIN
    80       WITH Action [kind] DO                                                  49    78
    81         a  := Act;                                                           78    40
    82         ap := ActPos;                                                        78    41
    83         c  := Comm;                                                          78    42
    84         cp := CommPos;                                                       78    43
    85       END;
    86     END GetAction;                                                           78
    87 
    88   PROCEDURE WriteActions (kind: tActionMode; f: tFile; Line: BOOLEAN);        *    78     *     *    28     *     *
    89     BEGIN
    90       IF Action [kind].ActPos.Line # 0 THEN                                  49    88    41    88
    91         IF Language = Modula2 THEN                                           35     *
    92           WriteS (f, '(* line ');                                            28    88
    93           WriteI (f, Action [kind].ActPos.Line, 0);                          28    88    49    88    41    88
    94           WriteS (f, ' "');                                                  28    88
    95           WriteS (f, SourceFileName);                                        28    88    35
    96           WriteS (f, '" *)');                                                28    88
    97           WriteNl (f);                                                       28    88
    98         ELSE (* Language = C *)
    99           IF Line THEN                                                       88
   100              WriteS (f, '# line ');                                          28    88
   101              WriteI (f, Action [kind].ActPos.Line, 1);                       28    88    49    88    41    88
   102              WriteS (f, ' "');                                               28    88
   103              WriteS (f, SourceFileName);                                     28    88    35
   104              WriteC (f, '"');                                                28    88
   105              WriteNl (f);                                                    28    88
   106           ELSE
   107              WriteS (f, '/* line ');                                         28    88
   108              WriteI (f, Action [kind].ActPos.Line, 1);                       28    88    49    88    41    88
   109              WriteS (f, ' "');                                               28    88
   110              WriteS (f, SourceFileName);                                     28    88    35
   111              WriteS (f, '" */');                                             28    88
   112              WriteNl (f);                                                    28    88
   113           END;
   114         END;
   115       END;
   116       WriteSemanticAction (f, Action [kind].Act, 0);                          *    88    49    88    40
   117     END WriteActions;                                                        88
   118 
   119   PROCEDURE WriteSemanticAction (f: tFile; a: tList; t: CARDINAL);            *    88    28    78    29     *     *
   120   VAR
   121     c : CHAR;                                                                78     *
   122     s : tString;                                                              *    31
   123     i : tStringIndex;                                                         *    31
   124     i1, i2 : tStringIndex;                                                    *     *    31
   125     Delimiter : CHAR;                                                         *     *
   126     
   127     PROCEDURE Tab;                                                            *
   128       BEGIN
   129         FOR i := 1 TO t DO                                                  123   119
   130           WriteC (f, ' ');                                                   28   119
   131           WriteC (f, ' ');                                                   28   119
   132         END;
   133       END Tab;                                                              127
   134 
   135     BEGIN
   136       i1 := 2;  (* Erstes Zeichen des ersten Strings ist Randbegrenzung *)        124
   137       WHILE NOT IsEmpty (a) DO                                               29   119
   138         GetString (tStringRef (Head (a)), s);                                32    32    29   119   122
   139         Tail (a);                                                            29   119
   140         i2 := Length (s);                                                   124    31   122
   141         IF IsEmpty (a) THEN                                                  29   119
   142           DEC (i2);  (* letztes Zeichen des letzten Strings ist Randbegrenzung *)         *   124
   143         END;
   144         Tab;                                                                127
   145         i := i1;                                                            123   124
   146         WHILE i <= i2 DO                                                    123   124
   147           c := Char (s, i); INC (i);                                        121    31   122   123     *   123
   148           IF c = '\' THEN                                                   121
   149             WriteC (f, Char (s, i)); INC (i);                                28   119    31   122   123     *   123
   150           ELSIF (c = '"') OR (c = "'") THEN                                 121   121
   151             Delimiter := c;                                                 125   121
   152             WriteC (f, c);                                                   28   119   121
   153             REPEAT
   154               c := Char (s, i); INC (i);                                    121    31   122   123     *   123
   155               WriteC (f, c);                                                 28   119   121
   156               IF (Language = C) AND (c = '\') THEN                           35     *   121
   157                 WriteC (f, Char (s, i)); INC (i);                            28   119    31   122   123     *   123
   158               END;
   159             UNTIL c = Delimiter;                                            121   125
   160           ELSE
   161             WriteC (f, c);                                                   28   119   121
   162           END;
   163         END;
   164         i1 := 1;                                                            124
   165       END;
   166       WriteNl (f);                                                           28   119
   167     END WriteSemanticAction;                                                119
   168 
   169     PROCEDURE WriteStringList (file: tFile; slist: tList);                    *     *    28     *    29
   170       BEGIN
   171         WHILE NOT IsEmpty (slist) DO                                         29   169
   172           WriteString (file, tStringRef (Head (slist)));                     32   169    32    29   169
   173           Tail (slist);                                                      29   169
   174         END;
   175       END WriteStringList;                                                  169
   176 
   177 BEGIN
   178   dummyPos.Line := 0;                                                        52    88
   179   dummyPos.Column := 0;                                                      52     *
   180   FOR ActionMode := MIN (tActionMode) TO MAX (tActionMode) DO                47     *     *     *     *
   181     KeyPos [ActionMode]         := dummyPos;                                 48    47    52
   182     MakeList (ActionComm [ActionMode]);                                      29    50    47
   183     ActionCommPos [ActionMode]  := dummyPos;                                 51    47    52
   184     MakeList (Action [ActionMode].Act);                                      29    49    47    40
   185     Action [ActionMode].ActPos  := dummyPos;                                 49    47    41    52
   186     MakeList (Action [ActionMode].Comm);                                     29    49    47    42
   187     Action [ActionMode].CommPos := dummyPos;                                 49    47    43    52
   188   END;
   189 END Actions.                                                                 26
Cross reference: * is declaration, = is assignment

-A-
 a                               68*   71    78*   81=  119*  137   138   139   141 
 Act                             40*   71=   81   116   184 
 Action                          49*   70    80    90    93   101   108   116   184   185=  186   187=
 ActionComm                      50*   57=   64   182 
 ActionCommPos                   51*   58=   65   183=
 ActionMode                      47*  180=  181   182   183   184   185   186   187 
 Actions                         26*  189 
 ActPos                          41*   72=   82    90    93   101   108   185=
 Alloc                           30*
 ap                              68*   72    78*   82=

-B-
 BOOLEAN                         88 

-C-
 C                              156 
 c                               54*   57    61*   64=   68*   73    78*   83=  121*  147=  148   150   150   151   152   154=  155 
                                156   159   161 
 CARDINAL                       119 
 CHAR                           121   125 
 Char                            31*  147   149   154   157 
 Column                         179=
 Comm                            42*   73=   83   186 
 CommPos                         43*   74=   84   187=
 cp                              54*   58    61*   65=   68*   74    78*   84=

-D-
 DEC                            142 
 Delimiter                      125*  151=  159 
 dummyPos                        52*  178=  179=  181   183   185   187 

-E-
 ElmtType                        38*   49 

-F-
 f                               88*   92    93    94    95    96    97   100   101   102   103   104   105   107   108   109   110 
                                111   112   116   119*  130   131   149   152   155   157   161   166 
 file                           169*  172 

-G-
 GetAction                       78*   86 
 GetComment                      61*   66 
 GetString                       32*  138 

-H-
 Head                            29*  138   172 

-I-
 i                              123*  129=  145=  146   147   147   149   149   154   154   157   157 
 i1                             124*  136=  145   164=
 i2                             124*  140=  142   146 
 IMPLEMENTATION                  26*
 INC                            147   149   154   157 
 IO                              28*
 IsEmpty                         29*  137   141   171 

-K-
 KeyPos                          48*   56=   63   181=
 kind                            54*   56    57    58    61*   63    64    65    68*   70    78*   80    88*   90    93   101   108 
                                116 
 kp                              54*   56    61*   63=

-L-
 Language                        35*   91   156 
 Length                          31*  140 
 Line                            88*   90    93    99   101   108   178=
 Lists                           29*

-M-
 MakeList                        29*  182   184   186 
 MAX                            180 
 Memory                          30*
 MIN                            180 
 Modula2                         91 

-P-
 PosType                         34*   41    43    48    51    52    54    54    61    61    68    68    78    78 
 PutAction                       68*   76 
 PutComment                      54*   59 

-S-
 s                              122*  138   140   147   149   154   157 
 slist                          169*  171   172   173 
 SourceFileName                  35*   95   103   110 
 StringMem                       32*
 Strings                         31*
 SYSTEM                          33*

-T-
 t                              119*  129 
 Tab                            127*  133   144 
 tActionMode                     47    48    49    50    51    54    61    68    78    88   180   180 
 Tail                            29*  139   173 
 tFile                           28*   88   119   169 
 tLanguage                       35*
 tList                           29*   40    42    50    54    61    68    68    78    78   119   169 
 TokenTab                        34*
 TSIZE                           33*
 tString                         31*  122 
 tStringIndex                    31*  123   124 
 tStringRef                      32*  138   172 

-W-
 WriteActions                    88*  117 
 WriteC                          28*  104   130   131   149   152   155   157   161 
 WriteI                          28*   93   101   108 
 WriteNl                         28*   97   105   112   166 
 WriteS                          28*   92    94    95    96   100   102   103   107   109   110   111 
 WriteSemanticAction            116   119*  167 
 WriteString                     32*  172 
 WriteStringList                169*  175 
 WriteTok                        35*

end cross reference, 358 occurrences of 79 identifiers.
