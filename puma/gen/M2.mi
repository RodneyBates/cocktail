
(* This file was mechanically generated by puma. *)

IMPLEMENTATION MODULE M2;








IMPORT SYSTEM, System, IO, Tree;
(* line 39 "" *)


FROM Positions  IMPORT tPosition;
FROM IO         IMPORT StdOutput, WriteS, WriteNl;
FROM StringMem  IMPORT WriteString;
FROM Idents     IMPORT tIdent, NoIdent;
FROM Texts      IMPORT WriteText;
FROM Sets       IMPORT IsElement, IsNotEqual, Minimum, Maximum, IsEmpty;
FROM Semantics  IMPORT IdentifyVar, LookupClass;
FROM Optimize   IMPORT NeedsTempo, NeedsMatch, NeedsNoFinale, GetRule;
FROM Tree       IMPORT IsType, NoTree, tTree, Options, f, SourceFile, WI, WN;
FROM IOUtils    IMPORT WriteBackslash;
FROM Assertions IMPORT Assert, AssertPos, CantHappen, CantHappenPos; 

VAR
   RoutineKind  : (kProcedure, kFunction, kPredicate);
   i, j         : CARDINAL;
   ListCount    : INTEGER;
   rule         ,
   TheClass     ,
   InFormals    ,
   OutFormals   ,
   ReturnFormals,
   Decls        : tTree;
   TheName      : tIdent;
   TemposDone   : BOOLEAN;

PROCEDURE WriteLine (Line: tPosition);
   BEGIN
      IF Line.Line # 0 THEN
         WriteS (f, "(* line "); WN (Line.Line); WriteS (f, ' "'); WriteS (f, SourceFile); WriteS (f, '" *)'); WriteNl (f);
      END;
   END WriteLine;

PROCEDURE Match (t, Formals: tTree);
   VAR TreeName : tIdent;
   VAR Pattern  : tTree;
   BEGIN
      IF (t^.Kind = Tree.NoPattern) 
         OR NOT IsType ( Formals , Tree . Formal ) 
      THEN RETURN; 
      END;
      Pattern := t^.OnePattern.Pattern;
      CASE Pattern^.Kind OF
      | Tree.Decompose: WITH Pattern^.Decompose DO
            TreeName := Object^.Class.TypeDesc^.NodeTypes.TreeName^.TreeName.Name;
            IF (Formals^.Formal.TypeDesc^.Kind = Tree.UserType) OR
               IsNotEqual (Object^.Class.TypeDesc^.NodeTypes.Types, Formals^.Formal.TypeDesc^.NodeTypes.Types) THEN
               IF Object^.Class.Extensions^.Kind = Tree.NoClass THEN    (* Low ? *)
                  WriteS (f, "      IF ("); WritePath ( Path ); WriteS (f, "^.Kind # "); 
               ELSE
                  WriteS (f, "      IF NOT "); WI (TreeName); WriteS (f, ".IsType ("); WritePath ( Path ); WriteS (f, ", "); 
               END;
               WI (TreeName); WriteS (f, "."); WI (Object^.Class.Name); WriteS (f, ") THEN EXIT; END;"); WriteNl (f);
            END;
            Match (Patterns, Object^.Class.Formals);
         END;

      | Tree.VarDef: WITH Pattern^.VarDef DO
            IF Object # NoTree THEN
               WITH Object^.Formal DO
                  WriteS (f, "      IF NOT (equal"); ImplMod ( TypeDesc); WriteS (f, " ("); WritePath (Path );
                  WriteS (f, ", "); WritePath ( Pattern^.VarDef.Path ); WriteS (f, ")) THEN EXIT; END;"); WriteNl (f);
               END;
            END;
         END;

      | Tree.NilTest:
         WriteS (f, "      IF "); WritePath ( Pattern^.NilTest.Path ); WriteS (f, " # NIL THEN EXIT; END;"); WriteNl (f);

      | Tree.DontCare1Explicit , Tree.DontCare1Internal :
      | Tree.DontCareExplicit , Tree.DontCareInternal : RETURN;

      | Tree.Value: WITH Pattern^.Value DO
            AssignTempo (Expr);
            WriteS (f, "      IF NOT (equal"); ImplMod (Formals^.Formal.TypeDesc);
            WriteS (f, " ("); WritePath ( Path ); WriteS (f, ", "); Expression (Expr); WriteS (f, ")) THEN EXIT; END;"); WriteNl (f);
            MatchExpr (Expr);
         END;
      END;
      Match (t^.OnePattern.Next, Formals^.Formal.Next);
   END Match;

PROCEDURE MatchExprs (t: tTree);
   BEGIN
      IF t^.Kind = Tree.NoExpr THEN RETURN; END;
      IF Tree . IsType ( t^.OneExpr.Expr , Tree.DontCare ) THEN RETURN; END;
      MatchExpr (t^.OneExpr.Expr);
      MatchExprs (t^.OneExpr.Next);
   END MatchExprs;

PROCEDURE MatchExpr (t: tTree);
   BEGIN
      CASE t^.Kind OF
      | Tree.Compose:
         MatchExprs (t^.Compose.Exprs);

      | Tree.VarUse     :
      | Tree.Nil        :
      | Tree.DontCare1Explicit  :
      | Tree.DontCare1Internal  :
      | Tree.TargetExpr :
      | Tree.StringExpr :
      | Tree.AttrDesc   :

      | Tree.Call       : WITH t^.Call DO
            MatchExpr (Expr);
            MatchExprs (Exprs);
            IF Object # NoTree THEN
               Match (Patterns, Object^.Routine.OutForm);
            END;
         END;

      | Tree.Binary     : WITH t^.Binary DO
            MatchExpr (Lop);
            MatchExpr (Rop);
         END;

      | Tree.PreOperator :
         MatchExpr (t^.PreOperator.Expr);

      | Tree.PostOperator :
         MatchExpr (t^.PostOperator.Expr);

      | Tree.Index      :
         MatchExpr (t^.Index.Expr);
         MatchExprs (t^.Index.Exprs);

      | Tree.Parents    :
         MatchExpr (t^.Parents.Expr);
      END;
   END MatchExpr;

PROCEDURE AssignTempos (t: tTree);
   BEGIN
      IF t^.Kind = Tree.NoExpr THEN RETURN; END;
      IF Tree . IsType ( t^.OneExpr.Expr , Tree.DontCare ) THEN RETURN; END;
      AssignTempo (t^.OneExpr.Expr);
      AssignTempos (t^.OneExpr.Next);
   END AssignTempos;

PROCEDURE AssignTempo (t: tTree);
   VAR TreeName : tIdent;
   BEGIN
      CASE t^.Kind OF
      | Tree.Compose: WITH t^.Compose DO
            TreeName := Object^.Class.TypeDesc^.NodeTypes.TreeName^.TreeName.Name;
            WriteS (f, "      yyALLOC ("); WI (TreeName); WriteS (f, ",Make"); WI (TreeName); WriteS (f, ","); WI (Tempo); WriteS (f, ","); WI (Object^.Class.Name); WriteS (f, ")"); WriteNl (f);
            IF (Exprs^.Kind = Tree.OneExpr) AND NOT Tree . IsType ( Exprs^.OneExpr.Expr , Tree.DontCare ) THEN
               WriteS (f, "      WITH "); WI (Tempo); WriteS (f, "^."); WI (Object^.Class.Name); WriteS (f, " DO"); WriteNl (f);
               AssignFormals (Exprs, Object^.Class.Formals);
               WriteS (f, "      END;"); WriteNl (f);
            END;
         END;

      | Tree.VarUse     :
      | Tree.Nil        :
      | Tree.DontCare1Explicit  :
      | Tree.DontCare1Internal  :
      | Tree.TargetExpr :
      | Tree.StringExpr :
      | Tree.AttrDesc   :

      | Tree.Call       : WITH t^.Call DO
            AssignTempo (Expr);
            AssignTempos (Exprs);
         END;

      | Tree.Binary     : WITH t^.Binary DO
            AssignTempo (Lop);
            AssignTempo (Rop);
         END;

      | Tree.PreOperator :
         AssignTempo (t^.PreOperator.Expr);

      | Tree.PostOperator       :
         AssignTempo (t^.PostOperator.Expr);

      | Tree.Index      :
         AssignTempo (t^.Index.Expr);
         AssignTempos (t^.Index.Exprs);

      | Tree.Parents    :
         AssignTempo (t^.Parents.Expr);
      END;
   END AssignTempo;

PROCEDURE AssignFormals (t, Formals: tTree);
   BEGIN
      IF (t^.Kind = Tree.NoExpr) 
         OR NOT IsType ( Formals , Tree . Formal ) 
      THEN RETURN; 
      END;
      IF Tree . IsType ( t^.OneExpr.Expr , Tree.DontCare ) THEN
         BeginFormals (Formals);
         RETURN;
      END;
      AssignFormal (t^.OneExpr.Expr, Formals);
      AssignFormals (t^.OneExpr.Next, Formals^.Formal.Next);
   END AssignFormals;

PROCEDURE AssignFormal (t, Formals: tTree);
   VAR TreeName : tIdent;
   BEGIN
      IF t^.Kind = Tree.Compose THEN
         WITH t^.Compose DO
            TreeName := Object^.Class.TypeDesc^.NodeTypes.TreeName^.TreeName.Name;
            WriteS (f, "      yyALLOC ("); WI (TreeName); WriteS (f, ",Make"); WI (TreeName); WriteS (f, ","); WI (Formals^.Formal.Name); WriteS (f, ","); WI (Object^.Class.Name); WriteS (f, ")"); WriteNl (f);
            IF (Exprs^.Kind = Tree.OneExpr) AND NOT Tree . IsType ( Exprs^.OneExpr.Expr , Tree.DontCare ) THEN
               WriteS (f, "      WITH "); WI (Formals^.Formal.Name); WriteS (f, "^."); WI (Object^.Class.Name); WriteS (f, " DO"); WriteNl (f);
               AssignFormals (Exprs, Object^.Class.Formals);
               WriteS (f, "      END;"); WriteNl (f);
            END;
         END;
      ELSE
         AssignTempo (t);
      END;

      CASE t^.Kind OF
      | Tree.VarUse, Tree.Nil, Tree.Call, Tree.Binary, Tree.PreOperator,
        Tree.PostOperator, Tree.Index, Tree.Parents, Tree.TargetExpr, 
        Tree.StringExpr, Tree.AttrDesc:
         WriteS (f, "      "); WI (Formals^.Formal.Name); WriteS (f, " := "); Expression (t); WriteS (f, ";"); WriteNl (f);
      | Tree.DontCare1Explicit , Tree.DontCare1Internal :
         WriteS (f, "      begin"); ImplMod (Formals^.Formal.TypeDesc); WriteS (f, " ("); WI (Formals^.Formal.Name); WriteS (f, ")"); WriteNl (f);
      ELSE
      END;
   END AssignFormal;

PROCEDURE BeginFormals (Formals: tTree);
   BEGIN
      IF IsType ( Formals , Tree . Formal ) THEN
         WITH Formals^.Formal DO
            WriteS (f, "      begin"); ImplMod (TypeDesc); WriteS (f, " ("); WI (Name); WriteS (f, ")"); WriteNl (f);
            BeginFormals (Next);
         END;
      END;
   END BeginFormals;

PROCEDURE ConsPatterns (t: tTree; ListCount: INTEGER): INTEGER;
   BEGIN
      IF t^.Kind = Tree.NoPattern THEN RETURN ListCount; END;
      WITH t^.OnePattern DO
         IF Tree . IsType ( Pattern , Tree.DontCare ) THEN
            RETURN ConsTempos (Pattern^.DontCare.Tempos, ListCount);
         ELSE
            IF ListCount > 0 THEN WriteS (f, ", "); END;
            WI (Pattern^.Pattern.Tempo);
            RETURN ConsPatterns (Next, ListCount + 1);
         END;
      END;
   END ConsPatterns;

PROCEDURE ConsTempos (t: tTree; ListCount: INTEGER): INTEGER;
   BEGIN
      IF IsType ( t , Tree . Formal ) 
      THEN
         IF ListCount > 0 THEN WriteS (f, ", "); END;
         WI (t^.Formal.Name);
         RETURN ConsTempos (t^.Formal.Next, ListCount + 1);
      ELSE
         RETURN ListCount;
      END;
   END ConsTempos;

PROCEDURE Expressions (t: tTree; ListCount: INTEGER): INTEGER;
   BEGIN
      IF t^.Kind = Tree.NoExpr THEN RETURN ListCount; END;
      WITH t^.OneExpr DO
         IF Tree . IsType ( Expr , Tree.DontCare ) THEN
            RETURN ConsTempos (Expr^.DontCare.Tempos, ListCount);
         ELSE
            IF ListCount > 0 THEN WriteS (f, ", "); END;
            Expression (Expr);
            RETURN Expressions (Next, ListCount + 1);
         END;
      END;
   END Expressions;

PROCEDURE Expression (t: tTree);
   BEGIN
      CASE t^.Kind OF
      | Tree.Compose : WI (t^.Compose.Tempo);

      | Tree.Nil : WriteS (f, "NIL"); 

      | Tree.VarUse     
          : WITH t^.VarUse DO
              IF Object # NoTree THEN
                 WritePath ( Object^.Formal.Path );
              ELSE
                 WI (Name);
              END;
            END;

      | Tree.DontCare1Explicit , Tree.DontCare1Internal 
          : WI (t^.DontCare1.Tempo);

      | Tree.Call       : WITH t^.Call DO
            Expression (Expr); WriteS (f, " ("); 
            ListCount := Expressions (Exprs, 0);
            IF Object # NoTree THEN
               ListCount := ConsPatterns (Patterns, ListCount);
            ELSE
               ListCount := Expressions (Patterns, ListCount);
            END;
            WriteS (f, ")"); 
         END;

      | Tree.Binary : 
         (* Semantics now transforms "." constructs into "::", where
            it makes sense.  *) 
         WITH t^.Binary DO
            Expression (Lop); WriteS (f, " "); WI (Operator); WriteS (f, " "); Expression (Rop);
         END;

      | Tree.PreOperator        :
         WI (t^.PreOperator.Operator); WriteS (f, " "); Expression (t^.PreOperator.Expr);

      | Tree.PostOperator       :
         Expression (t^.PostOperator.Expr); WriteS (f, " "); WI (t^.PostOperator.Operator);

      | Tree.Index      :
         Expression (t^.Index.Expr); WriteS (f, " ["); ListCount := Expressions (t^.Index.Exprs, 0); WriteS (f, "]"); 

      | Tree.Parents    : WriteS (f, "("); Expression (t^.Parents.Expr); WriteS (f, ")"); 

      | Tree.TargetExpr : ImplMod (t^.TargetExpr.Expr);

      | Tree.StringExpr : WriteString (f, t^.StringExpr.String);

      | Tree.AttrDesc   : WITH t^.AttrDesc DO
            WritePath ( Object^.Formal.Path ); WriteS (f, "^."); WI (Type); WriteS (f, "."); WI (Attribute);
         END;
      END;
   END Expression;

PROCEDURE Tg2 (t, Formals: tTree);
   BEGIN
      IF (t^.Kind = Tree.NoPattern) OR (Formals^.Kind = Tree.NoFormal) THEN RETURN; END;
      CASE t^.OnePattern.Pattern^.Kind OF
      | Tree.Decompose:
         WriteS (f, "     WITH "); WI (Formals^.Formal.Name); WriteS (f, "^."); WI (t^.OnePattern.Pattern^.Decompose.Object^.Class.Name); WriteS (f, " DO"); WriteNl (f);
      Tg2 ( t^.OnePattern.Pattern^.Decompose.Patterns 
          , t^.OnePattern.Pattern^.Decompose.Object ^ . Class . Formals 
          ) ; 
      | Tree.VarDef, Tree.NilTest, Tree.Value, Tree.DontCare1Explicit, Tree.DontCare1Internal:
      ELSE RETURN;
      END;
      Tg2 (t^.OnePattern.Next, Formals^.Formal.Next);
   END Tg2;


































































PROCEDURE yyAbort (yyFunction: ARRAY OF CHAR);
 BEGIN
  IO.WriteS (IO.StdError, 'Error: module M2, routine ');
  IO.WriteS (IO.StdError, yyFunction);
  IO.WriteS (IO.StdError, ' failed');
  IO.WriteNl (IO.StdError);
  Exit;
 END yyAbort;

PROCEDURE yyIsEqual (yya, yyb: ARRAY OF SYSTEM.BYTE): BOOLEAN;
 VAR yyi       : INTEGER;
 BEGIN
  FOR yyi := 0 TO INTEGER (HIGH (yya)) DO
   IF yya [yyi] # yyb [yyi] THEN RETURN FALSE; END;
  END;
  RETURN TRUE;
 END yyIsEqual;

PROCEDURE MacroMod (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.Spec:
(* line 395 "" *)
     WITH t^.Spec DO
(* line 395 "" *)
      
        MacroMod (TreeNames);
;
      RETURN;
     END (* WITH *) ;

  | Tree.TreeName:
(* line 398 "" *)
     WITH t^.TreeName DO
(* line 398 "" *)
      
        WriteS (f, "# define begint"); WI (Name); WriteS (f, "(a)       a := NIL;"); WriteNl (f);
        WriteS (f, "# define equalt"); WI (Name); WriteS (f, "(a, b)    "); WI (Name); WriteS (f, ".IsEqual"); WI (Name); WriteS (f, " (a, b)"); WriteNl (f);
        MacroMod (Next);
;
      RETURN;
     END (* WITH *) ;

  ELSE END;

 END MacroMod;

PROCEDURE DefMod (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.Spec:
(* line 407 "" *)
     WITH t^.Spec DO
(* line 407 "" *)
      
        WriteNl (f);
        WriteS (f, "(* This file was mechanically generated by puma. *)"); WriteNl (f);
        WriteNl (f);
        WriteS (f, "DEFINITION MODULE "); WI (TrafoName); WriteS (f, ";"); WriteNl (f);
        WriteNl (f);
        WriteS (f, "IMPORT SYSTEM, IO"); DefMod (TreeNames); WriteS (f, ";"); WriteNl (f);
        WriteLine (Codes^.Codes.ImportLine);
        WriteText (f, Codes^.Codes.Import);
        WriteNl (f);
        WriteLine (Codes^.Codes.ExportLine);
        WriteText (f, Codes^.Codes.Export);
        WriteNl (f);
        WriteS (f, "VAR yyf        : IO.tFile;"); WriteNl (f);
        WriteS (f, "VAR Exit       : PROC;"); WriteNl (f);
        WriteNl (f);
        DefMod (Public);
        WriteNl (f);
        WriteS (f, "PROCEDURE Begin"); WI (TrafoName); WriteS (f, ";"); WriteNl (f);
        WriteS (f, "PROCEDURE Close"); WI (TrafoName); WriteS (f, ";"); WriteNl (f);
        WriteNl (f);
        WriteS (f, "END "); WI (TrafoName); WriteS (f, "."); WriteNl (f);
        WriteNl (f);
;
      RETURN;
     END (* WITH *) ;

  | Tree.TreeName:
(* line 431 "" *)
     WITH t^.TreeName DO
(* line 431 "" *)
      
        WriteS (f, ", "); WI (Name);
        DefMod (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Name:
(* line 435 "" *)
     WITH t^.Name DO
(* line 435 "" *)
      
        IF Object # NoTree THEN
           ListCount := 0;
           WriteS (f, "PROCEDURE "); WI (Name); WriteS (f, " ("); 
           DefMod (Object^.Routine.InForm);
           DefMod (Object^.Routine.OutForm);
           WriteS (f, ")"); 
           IF Object^.Kind = Tree.Predicate THEN
              WriteS (f, ": BOOLEAN"); 
           ELSIF Object^.Kind = Tree.Function THEN
              WriteS (f, ": "); DefMod (Object^.Function.ReturnForm^.Formal.TypeDesc);
           END;
           WriteS (f, ";"); WriteNl (f);
        END;
        DefMod (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Formal
  , Tree.PlainFormal
  , Tree.RoutineFormal:
(* line 451 "" *)
     WITH t^.Formal DO
(* line 451 "" *)
      
        IF ListCount > 0 THEN WriteS (f, "; "); END;
        IF Path^.Var.IsOutput THEN WriteS (f, "VAR "); END;
        WI (Name); WriteS (f, ": "); 
        DefMod (TypeDesc);
        INC (ListCount);
        DefMod (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.NodeTypes:
(* line 459 "" *)
     WITH t^.NodeTypes DO
(* line 459 "" *)
      
        WI (TreeName^.TreeName.Name); WriteS (f, ".t"); WI (TreeName^.TreeName.Name);
;
      RETURN;
     END (* WITH *) ;

  | Tree.UserType:
(* line 462 "" *)
     WITH t^.UserType DO
(* line 462 "" *)
      
        WI (Type);
;
      RETURN;
     END (* WITH *) ;

  ELSE END;

 END DefMod;

PROCEDURE NeedsWITHStmt (t: Tree.tTree): BOOLEAN;

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN FALSE; END;
(* line 469 "" *)
   LOOP
     WITH t^.Rule DO
(* line 469 "" *)
      IF NOT (( IsElement (ORD ('w'), Options) )) THEN EXIT; END;
(* line 470 "" *)
      IF NOT (( ( Statements^.Kind <> Tree.NoStatement ) 
                 OR ( Exprs^.Kind <> Tree.NoExpr ) 
                 OR ( Expr^.Kind <> Tree.NoExpr ) 
               )) THEN EXIT; END;
      RETURN TRUE;
     END (* WITH *) ;
   END (* LOOP *) ;

  RETURN FALSE;
 END NeedsWITHStmt;

PROCEDURE ImplMod (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.Spec:
(* line 480 "" *)
     WITH t^.Spec DO
(* line 480 "" *)
      
        WriteNl (f);
        WriteS (f, "(* This file was mechanically generated by puma. *)"); WriteNl (f);
        WriteNl (f);
        WriteS (f, "IMPLEMENTATION MODULE "); WI (TrafoName); WriteS (f, ";"); WriteNl (f);
      IF NOT IsElement (ORD ('m'), Options) THEN
        WriteS (f, "# define yyInline"); WriteNl (f);
      END;
        WriteS (f, "# ifdef yyInline"); WriteNl (f);
        WriteS (f, "# define yyALLOC(tree, make, ptr, kind) "); WriteBackslash ( f ) ; WriteNl (f);
        WriteS (f, "  ptr := tree.yyPoolFreePtr; "); WriteBackslash ( f ) ; WriteNl (f);
        WriteS (f, "  IF SYSTEM.ADDRESS (ptr) >= tree.yyPoolMaxPtr THEN ptr := tree.yyAlloc (); END; "); WriteBackslash ( f ) ; WriteNl (f);
        WriteS (f, "  INC (tree.yyPoolFreePtr, tree.yyNodeSize [tree.kind]); "); WriteBackslash ( f ) ; WriteNl (f);
        WriteS (f, "  ptr^.yyHead.yyMark := 0; "); WriteBackslash ( f ) ; WriteNl (f);
        WriteS (f, "  ptr^.Kind := tree.kind;"); WriteNl (f);
        WriteS (f, "# else"); WriteNl (f);
        WriteS (f, "# define yyALLOC(tree, make, ptr, kind) ptr := tree.make (tree.kind);"); WriteNl (f);
        WriteS (f, "# endif"); WriteNl (f);
        WriteNl (f);
        WriteS (f, "# define yyWrite(s) IO.WriteS (yyf, s)"); WriteNl (f);
        WriteS (f, "# define yyWriteNl IO.WriteNl (yyf)"); WriteNl (f);
        WriteNl (f);
        WriteS (f, "IMPORT SYSTEM, System, IO"); DefMod (TreeNames); WriteS (f, ";"); WriteNl (f);
        WriteLine (Codes^.Codes.GlobalLine);
        WriteText (f, Codes^.Codes.Global);
        WriteNl (f);
        WriteS (f, '# include "yy'); WI (TrafoName); WriteS (f, '.w"'); WriteNl (f);
        WriteNl (f);
        WriteS (f, "PROCEDURE yyAbort (yyFunction: ARRAY OF CHAR);"); WriteNl (f);
        WriteS (f, " BEGIN"); WriteNl (f);
        WriteS (f, "  IO.WriteS (IO.StdError, 'Error: module "); WI (TrafoName); WriteS (f, ", routine ');"); WriteNl (f);
        WriteS (f, "  IO.WriteS (IO.StdError, yyFunction);"); WriteNl (f);
        WriteS (f, "  IO.WriteS (IO.StdError, ' failed');"); WriteNl (f);
        WriteS (f, "  IO.WriteNl (IO.StdError);"); WriteNl (f);
        WriteS (f, "  Exit;"); WriteNl (f);
        WriteS (f, " END yyAbort;"); WriteNl (f);
        WriteNl (f);
        WriteS (f, "PROCEDURE yyIsEqual (yya, yyb: ARRAY OF SYSTEM.BYTE): BOOLEAN;"); WriteNl (f);
        WriteS (f, " VAR yyi       : INTEGER;"); WriteNl (f);
        WriteS (f, " BEGIN"); WriteNl (f);
        WriteS (f, "  FOR yyi := 0 TO INTEGER (HIGH (yya)) DO"); WriteNl (f);
        WriteS (f, "   IF yya [yyi] # yyb [yyi] THEN RETURN FALSE; END;"); WriteNl (f);
        WriteS (f, "  END;"); WriteNl (f);
        WriteS (f, "  RETURN TRUE;"); WriteNl (f);
        WriteS (f, " END yyIsEqual;"); WriteNl (f);
        WriteNl (f);
        ImplMod (Routines);
        WriteS (f, "PROCEDURE Begin"); WI (TrafoName); WriteS (f, ";"); WriteNl (f);
        WriteS (f, " BEGIN"); WriteNl (f);
        WriteLine (Codes^.Codes.BeginLine);
        WriteText (f, Codes^.Codes.Begin);
        WriteNl (f);
        WriteS (f, " END Begin"); WI (TrafoName); WriteS (f, ";"); WriteNl (f);
        WriteNl (f);
        WriteS (f, "PROCEDURE Close"); WI (TrafoName); WriteS (f, ";"); WriteNl (f);
        WriteS (f, " BEGIN"); WriteNl (f);
        WriteLine (Codes^.Codes.CloseLine);
        WriteText (f, Codes^.Codes.Close);
        WriteNl (f);
        WriteS (f, " END Close"); WI (TrafoName); WriteS (f, ";"); WriteNl (f);
        WriteNl (f);
        WriteS (f, "PROCEDURE yyExit;"); WriteNl (f);
        WriteS (f, " BEGIN"); WriteNl (f);
        WriteS (f, "  IO.CloseIO; System.Exit (1);"); WriteNl (f);
        WriteS (f, " END yyExit;"); WriteNl (f);
        WriteNl (f);
        WriteS (f, "BEGIN"); WriteNl (f);
        WriteS (f, " yyf   := IO.StdOutput;"); WriteNl (f);
        WriteS (f, " Exit  := yyExit;"); WriteNl (f);
        WriteS (f, " Begin"); WI (TrafoName); WriteS (f, ";"); WriteNl (f);
        WriteS (f, "END "); WI (TrafoName); WriteS (f, "."); WriteNl (f);
        WriteNl (f);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Procedure:
(* line 553 "" *)
     WITH t^.Procedure DO
(* line 553 "" *)
      
        ListCount := 0;
        WriteS (f, "PROCEDURE "); WI (Name); WriteS (f, " ("); 
        DefMod (InForm);
        DefMod (OutForm);
        WriteS (f, ");"); WriteNl (f);
        WriteLine (LocalLine);
        WriteText (f, Local);
        WriteNl (f);
        WriteS (f, " VAR yyTempo: RECORD CASE : INTEGER OF"); WriteNl (f);
        RoutineKind := kProcedure;
        InFormals := InForm;
        OutFormals := OutForm;
        Declare (Rules);
        WriteS (f, " END; END;"); WriteNl (f);
        WriteS (f, " BEGIN"); WriteNl (f);
      IF IsElement (ORD ('n'), Options) THEN
        Tg1 (InForm);
      END;
      IF IsElement (ORD ('b'), Options) THEN
        ImplMod (Rules);
        IF IsElement (ORD ('f'), Options) THEN
           WriteS (f, "  yyAbort ('"); WI (Name); WriteS (f, "');"); WriteNl (f);
        END;
      ELSE
        TemposDone := FALSE;
        CommonTestElim (Decisions);
        IF IsElement (ORD ('f'), Options) AND NOT NeedsNoFinale (Decisions) THEN
           WriteS (f, "  yyAbort ('"); WI (Name); WriteS (f, "');"); WriteNl (f);
        END;
      END;
        WriteS (f, " END "); WI (Name); WriteS (f, ";"); WriteNl (f);
        WriteNl (f);
        ImplMod (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Function:
(* line 588 "" *)
     WITH t^.Function DO
(* line 588 "" *)
      
        ListCount := 0;
        WriteS (f, "PROCEDURE "); WI (Name); WriteS (f, " ("); 
        DefMod (InForm);
        DefMod (OutForm);
        WriteS (f, "): "); DefMod (ReturnForm^.Formal.TypeDesc); WriteS (f, ";"); WriteNl (f);
        WriteLine (LocalLine);
        WriteText (f, Local);
        WriteNl (f);
        WriteS (f, " VAR yyTempo: RECORD CASE : INTEGER OF"); WriteNl (f);
        RoutineKind := kFunction;
        InFormals := InForm;
        OutFormals := OutForm;
        ReturnFormals := ReturnForm;
        Declare (Rules);
        WriteS (f, " END; END;"); WriteNl (f);
        WriteS (f, " BEGIN"); WriteNl (f);
      IF IsElement (ORD ('b'), Options) THEN
        ImplMod (Rules);
        WriteS (f, "  yyAbort ('"); WI (Name); WriteS (f, "');"); WriteNl (f);
      ELSE
        TemposDone := FALSE;
        CommonTestElim (Decisions);
        IF NOT NeedsNoFinale (Decisions) THEN
           WriteS (f, "  yyAbort ('"); WI (Name); WriteS (f, "');"); WriteNl (f);
        END;
      END;
        WriteS (f, " END "); WI (Name); WriteS (f, ";"); WriteNl (f);
        WriteNl (f);
        ImplMod (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Predicate:
(* line 619 "" *)
     WITH t^.Predicate DO
(* line 619 "" *)
      
        ListCount := 0;
        WriteS (f, "PROCEDURE "); WI (Name); WriteS (f, " ("); 
        DefMod (InForm);
        DefMod (OutForm);
        WriteS (f, "): BOOLEAN;"); WriteNl (f);
        WriteLine (LocalLine);
        WriteText (f, Local);
        WriteNl (f);
        WriteS (f, " VAR yyTempo: RECORD CASE : INTEGER OF"); WriteNl (f);
        RoutineKind := kPredicate;
        InFormals := InForm;
        OutFormals := OutForm;
        Declare (Rules);
        WriteS (f, " END; END;"); WriteNl (f);
        WriteS (f, " BEGIN"); WriteNl (f);
      IF IsElement (ORD ('n'), Options) THEN
        Tg1 (InForm);
      END;
      IF IsElement (ORD ('b'), Options) THEN
        ImplMod (Rules);
        WriteS (f, "  RETURN FALSE;"); WriteNl (f);
      ELSE
        TemposDone := FALSE;
        CommonTestElim (Decisions);
        IF NOT NeedsNoFinale (Decisions) THEN
           WriteS (f, "  RETURN FALSE;"); WriteNl (f);
        END;
      END;
        WriteS (f, " END "); WI (Name); WriteS (f, ";"); WriteNl (f);
        WriteNl (f);
        ImplMod (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Rule:
(* line 652 "" *)
     WITH t^.Rule DO
(* line 652 "" *)
      
        WriteLine (Line);
        IF HasTempos THEN WriteS (f, "    WITH yyTempo.yyR"); WN (Index); WriteS (f, " DO"); END;
        WriteS (f, "   LOOP"); WriteNl (f);
        Decls := VarDecls;
        Match (Patterns, InFormals);
      IF NeedsWITHStmt ( t ) 
      THEN 
        Tg2 (Patterns, InFormals);
      END;
        ImplMod (Statements);
        IF NOT HasRejectOrFail THEN
           AssignFormals (Exprs, OutFormals);
           MatchExprs (Exprs);
           CASE RoutineKind OF
           | kProcedure: WriteS (f, "      RETURN;"); WriteNl (f);

           | kFunction :
              AssignTempo (Expr);
              IF HasPatterns AND (Expr^.Kind # Tree.Compose) AND NOT Tree . IsType ( t , Tree.DontCare1 ) THEN
                 WriteS (f, "      "); WI (Tempo); WriteS (f, " := "); Expression (Expr); WriteS (f, ";"); WriteNl (f);
                 MatchExpr (Expr);
                 WriteS (f, "      RETURN "); WI (Tempo); WriteS (f, ";"); WriteNl (f);
              ELSE
                 MatchExpr (Expr);
                 WriteS (f, "      RETURN "); Expression (Expr); WriteS (f, ";"); WriteNl (f);
              END;

           | kPredicate: WriteS (f, "      RETURN TRUE;"); WriteNl (f);
           END;
        END;
      IF NeedsWITHStmt ( t ) 
      THEN 
        Tg3 (Patterns);
      END;
        WriteS (f, "   END (* LOOP *) ;"); WriteNl (f);
        IF HasTempos THEN WriteS (f, "    END (* WITH yyTempo.yyR ... *) ;"); WriteNl (f);
        END;
        WriteNl (f);
        ImplMod (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.ProcCall:
(* line 693 "" *)
     WITH t^.ProcCall DO
(* line 693 "" *)
      
        WriteLine (Pos);
        AssignTempo (Call);
        WriteS (f, "      "); Expression (Call); WriteS (f, ";"); WriteNl (f);
        MatchExpr (Call);
        ImplMod (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Condition:
(* line 700 "" *)
     WITH t^.Condition DO
(* line 700 "" *)
      
        WriteLine (Pos);
        AssignTempo (Expr);
        WriteS (f, "      IF NOT ("); Expression (Expr); WriteS (f, ") THEN EXIT; END;"); WriteNl (f);
        MatchExpr (Expr);
        ImplMod (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Assignment:
(* line 707 "" *)
     WITH t^.Assignment DO
(* line 707 "" *)
      
        WriteLine (Pos);
        AssignTempo (Adr);
        AssignTempo (Expr);
        IF Object # NoTree THEN
           WriteS (f, "      "); WritePath ( Object^.Formal.Path );
        ELSE
           WriteS (f, "      "); Expression (Adr);
        END;
        WriteS (f, " := "); Expression (Expr); WriteS (f, ";"); WriteNl (f);
        MatchExpr (Adr);
        MatchExpr (Expr);
        ImplMod (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Reject:
(* line 721 "" *)
     WITH t^.Reject DO
(* line 721 "" *)
      
        WriteLine (Pos);
        WriteS (f, "      EXIT;"); WriteNl (f);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Fail:
(* line 725 "" *)
     WITH t^.Fail DO
(* line 725 "" *)
      
        WriteLine (Pos);
        WriteS (f, "      RETURN"); IF RoutineKind = kPredicate THEN WriteS (f, " FALSE"); END; WriteS (f, ";"); WriteNl (f);
;
      RETURN;
     END (* WITH *) ;

  | Tree.TargetStmt:
(* line 729 "" *)
     WITH t^.TargetStmt DO
(* line 729 "" *)
      
        WriteLine (Pos);
        WriteS (f, "      "); ImplMod (Stmt); WriteS (f, ";"); WriteNl (f);
        ImplMod (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Nl:
(* line 734 "" *)
     WITH t^.Nl DO
(* line 734 "" *)
      
        WriteLine (Pos);
        WriteS (f, "      yyWriteNl;"); WriteNl (f);
        ImplMod (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.WriteStr:
(* line 739 "" *)
     WITH t^.WriteStr DO
(* line 739 "" *)
      
        WriteLine (Pos);
        WriteS (f, "      yyWrite ("); WriteString (f, String); WriteS (f, ");"); WriteNl (f);
        ImplMod (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Ident:
(* line 744 "" *)
     WITH t^.Ident DO
(* line 745 "" *)
       IF Object # NoTree 
        THEN WritePath ( Object^.Formal.Path ); 
        ELSE WI (Attribute); 
        END;
        ImplMod (Next);
      ;
      RETURN;
     END (* WITH *) ;

  | Tree.Any:
(* line 751 "" *)
     WITH t^.Any DO
(* line 751 "" *)
      
        WriteString (f, Code);
        ImplMod (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Anys:
(* line 755 "" *)
     WITH t^.Anys DO
(* line 755 "" *)
      
        ImplMod (Layouts);
        ImplMod (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.LayoutAny:
(* line 759 "" *)
     WITH t^.LayoutAny DO
(* line 759 "" *)
      
        WriteString (f, Code);
        ImplMod (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Designator:
(* line 763 "" *)
     WITH t^.Designator DO
(* line 763 "" *)
      
        WritePath ( Object^.Formal.Path ); WriteS (f, "^."); WI (Type); WriteS (f, "."); WI (Attribute);
        ImplMod (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Field:
(* line 767 "" *)
     WITH t^.Field DO
(* line 767 "" *)
      
        CantHappen ( "M2, ImplMod, Field" ) ; 
;
      RETURN;
     END (* WITH *) ;

  | Tree.ConsType:
(* line 770 "" *)
     WITH t^.ConsType DO
(* line 770 "" *)
      
        CantHappen ( "M2, ImplMod, ConsType" ) ; 
;
      RETURN;
     END (* WITH *) ;

  | Tree.Var:
(* line 773 "" *)
     WITH t^.Var DO
(* line 773 "" *)
      
        CantHappen ( "M2, ImplMod, Var" ) ; 
;
      RETURN;
     END (* WITH *) ;

  | Tree.NodeTypes:
(* line 776 "" *)
     WITH t^.NodeTypes DO
(* line 776 "" *)
      
        WriteS (f, "t"); WI (TreeName^.TreeName.Name);
;
      RETURN;
     END (* WITH *) ;

  | Tree.UserType:
(* line 779 "" *)
     WITH t^.UserType DO
(* line 779 "" *)
      
        WI (Type);
;
      RETURN;
     END (* WITH *) ;

  ELSE END;

 END ImplMod;

PROCEDURE WritePathRecurse (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.Field:
(* line 785 "" *)
     WITH t^.Field DO
(* line 785 "" *)
      
        WritePathRecurse (Next);
        WriteS (f, "."); WI (Name);
;
      RETURN;
     END (* WITH *) ;

  | Tree.ConsType:
(* line 789 "" *)
     WITH t^.ConsType DO
(* line 789 "" *)
      
        WritePathRecurse (Next);
        WriteS (f, "^."); WI (Name);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Var:
(* line 793 "" *)
     WITH t^.Var DO
(* line 793 "" *)
      
        WI (Name);
;
      RETURN;
     END (* WITH *) ;

  ELSE END;

 END WritePathRecurse;

PROCEDURE WritePath (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.ConsType:
(* line 800 "" *)
     WITH t^.ConsType DO
(* line 801 "" *)
       WritePathRecurse ( Next ) ; ;
      RETURN;
     END (* WITH *) ;

  | Tree.Field:
(* line 803 "" *)
     WITH t^.Field DO
(* line 805 "" *)
       WritePathRecurse ( t ) ; ;
      RETURN;
     END (* WITH *) ;

  | Tree.Var:
(* line 803 "" *)
     WITH t^.Var DO
(* line 805 "" *)
       WritePathRecurse ( t ) ; ;
      RETURN;
     END (* WITH *) ;

  ELSE END;

 END WritePath;

PROCEDURE Declare (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 | 2: yyR2: RECORD
  Var: tTree;
  END;
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.Formal
  , Tree.PlainFormal
  , Tree.RoutineFormal:
(* line 809 "" *)
     WITH t^.Formal DO
(* line 809 "" *)
      
        WriteS (f, "  "); WI (Name); WriteS (f, ": "); DefMod (TypeDesc); WriteS (f, ";"); WriteNl (f);
        Declare (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Param:
(* line 813 "" *)
    WITH yyTempo.yyR2 DO  
     WITH t^.Param DO
(* line 814 "" *)
      ;
(* line 815 "" *)
        Var := IdentifyVar (Decls, Name);
        WriteS (f, "  "); WI (Name); WriteS (f, ": "); DefMod (Var^.Formal.TypeDesc); WriteS (f, ";"); WriteNl (f);
        Declare (Next);
     ;
      RETURN;
     END (* WITH *) ;
    END (* WITH yyTempos.yyR ... *) ;  

  | Tree.Rule:
(* line 819 "" *)
     WITH t^.Rule DO
(* line 819 "" *)
      
        IF HasTempos THEN
           WriteS (f, " | "); WN (Index); WriteS (f, ": yyR"); WN (Index); WriteS (f, ": RECORD"); WriteNl (f);
           Decls := VarDecls;
           Declare (Patterns);
           Declare (Exprs);
           IF RoutineKind = kFunction THEN
              Declare (Expr);
              IF HasPatterns AND (Expr^.Kind # Tree.Compose) AND NOT Tree . IsType ( t , Tree.DontCare1 ) THEN
                 WriteS (f, "  "); WI (Tempo); WriteS (f, ": "); DefMod (ReturnFormals^.Formal.TypeDesc); WriteS (f, ";"); WriteNl (f);
              END;
           END;
           Declare (Statements);
           WriteS (f, "  END;"); WriteNl (f);
        END;
        Declare (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.ProcCall:
(* line 836 "" *)
     WITH t^.ProcCall DO
(* line 836 "" *)
      
        Declare (Call);
        Declare (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Condition:
(* line 840 "" *)
     WITH t^.Condition DO
(* line 840 "" *)
      
        Declare (Expr);
        Declare (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Assignment:
(* line 844 "" *)
     WITH t^.Assignment DO
(* line 844 "" *)
      
        Declare (Adr);
        Declare (Expr);
        Declare (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.TargetStmt:
(* line 849 "" *)
     WITH t^.TargetStmt DO
(* line 849 "" *)
      
        Declare (Parameters);
        Declare (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Statement
  , Tree.Reject
  , Tree.Fail
  , Tree.Nl
  , Tree.WriteStr:
(* line 853 "" *)
     WITH t^.Statement DO
(* line 853 "" *)
      
        Declare (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.OnePattern:
(* line 856 "" *)
     WITH t^.OnePattern DO
(* line 856 "" *)
      
        IF (Pattern^.Pattern.Tempo # NoIdent) AND NOT Tree . IsType ( Pattern , Tree.DontCare1 ) THEN
           WriteS (f, "  "); WI (Pattern^.Pattern.Tempo); WriteS (f, ": "); DefMod (Pattern^.Pattern.TypeDesc); WriteS (f, ";"); WriteNl (f);
        END;
        Declare (Pattern);
        Declare (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.OneExpr
  , Tree.NamedExpr:
(* line 863 "" *)
     WITH t^.OneExpr DO
(* line 863 "" *)
      
        Declare (Expr);
        Declare (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Decompose:
(* line 867 "" *)
     WITH t^.Decompose DO
(* line 867 "" *)
      
        Declare (Patterns);
;
      RETURN;
     END (* WITH *) ;

  | Tree.DontCare
  , Tree.DontCareExplicit
  , Tree.DontCareInternal:
(* line 870 "" *)
     WITH t^.DontCare DO
(* line 870 "" *)
      
        Declare (Tempos);
;
      RETURN;
     END (* WITH *) ;

  | Tree.DontCare1
  , Tree.DontCare1Explicit
  , Tree.DontCare1Internal:
(* line 873 "" *)
     WITH t^.DontCare1 DO
(* line 873 "" *)
      
        IF Tempo # NoIdent THEN
           WriteS (f, "  "); WI (Tempo); WriteS (f, ": "); DefMod (TypeDesc); WriteS (f, ";"); WriteNl (f);
        END;
;
      RETURN;
     END (* WITH *) ;

  | Tree.Value:
(* line 878 "" *)
     WITH t^.Value DO
(* line 878 "" *)
      
        Declare (Expr);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Compose:
(* line 881 "" *)
     WITH t^.Compose DO
(* line 881 "" *)
      
        IF Tempo # NoIdent THEN
           WriteS (f, "  "); WI (Tempo); WriteS (f, ": "); DefMod (TypeDesc); WriteS (f, ";"); WriteNl (f);
        END;
        Declare (Exprs);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Call:
(* line 887 "" *)
     WITH t^.Call DO
(* line 887 "" *)
      
        Declare (Expr);
        Declare (Exprs);
        Declare (Patterns);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Binary
  , Tree.yy1
  , Tree.BinaryCompound:
(* line 892 "" *)
     WITH t^.Binary DO
(* line 892 "" *)
      
        Declare (Lop);
        Declare (Rop);
;
      RETURN;
     END (* WITH *) ;

  | Tree.PreOperator:
(* line 896 "" *)
     WITH t^.PreOperator DO
(* line 898 "" *)
      
        Declare (Expr); 
;
      RETURN;
     END (* WITH *) ;

  | Tree.PostOperator:
(* line 896 "" *)
     WITH t^.PostOperator DO
(* line 898 "" *)
      
        Declare (Expr); 
;
      RETURN;
     END (* WITH *) ;

  | Tree.Parents:
(* line 896 "" *)
     WITH t^.Parents DO
(* line 898 "" *)
      
        Declare (Expr); 
;
      RETURN;
     END (* WITH *) ;

  | Tree.Index:
(* line 901 "" *)
     WITH t^.Index DO
(* line 901 "" *)
      
        Declare (Expr);
        Declare (Exprs);
;
      RETURN;
     END (* WITH *) ;

  ELSE END;

 END Declare;

PROCEDURE Tg1 (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.Formal
  , Tree.PlainFormal
  , Tree.RoutineFormal:
(* line 908 "" *)
     WITH t^.Formal DO
(* line 908 "" *)
      
        TheName := Name;
        Tg1 (TypeDesc);
        Tg1 (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.NodeTypes:
(* line 913 "" *)
     WITH t^.NodeTypes DO
(* line 913 "" *)
      
        WriteS (f, "  IF "); WI (TheName); WriteS (f, " = "); WI (TreeName^.TreeName.Name); WriteS (f, ".No"); 
        WI (TreeName^.TreeName.Name); WriteS (f, " THEN RETURN"); IF RoutineKind = kPredicate THEN WriteS (f, " FALSE"); END; WriteS (f, "; END;"); WriteNl (f);
;
      RETURN;
     END (* WITH *) ;

  ELSE END;

 END Tg1;

PROCEDURE Tg3 (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.OnePattern:
(* line 921 "" *)
     WITH t^.OnePattern DO
(* line 921 "" *)
      
        Tg3 (Pattern);
        Tg3 (Next);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Decompose:
(* line 925 "" *)
     WITH t^.Decompose DO
(* line 925 "" *)
      
        Tg3 ( Patterns ) ; 
        WriteS (f, "     END (* WITH *) ;"); WriteNl (f);
;
      RETURN;
     END (* WITH *) ;

  ELSE END;

 END Tg3;

PROCEDURE CommonTestElim2 (OneTest: Tree.tTree; yyP1: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF OneTest = Tree.NoTree THEN RETURN; END;
  IF yyP1 = Tree.NoTree THEN RETURN; END;
  IF (OneTest^.Kind = Tree.TestValue) THEN
(* line 932 "" *)
   LOOP
     WITH OneTest^.TestValue DO
(* line 933 "" *)
      IF NOT ((NeedsMatch (Expr))) THEN EXIT; END;
(* line 934 "" *)
      CommonTestElim (OneTest);
(* line 935 "" *)
      WriteS (f, "    LOOP");
(* line 935 "" *)
      WriteNl (f);
(* line 936 "" *)
      MatchExpr (OneTest ^ . TestValue . Expr);
(* line 937 "" *)
      CommonTestElim (yyP1);
(* line 938 "" *)
      WriteS (f, "    EXIT; END;");
(* line 938 "" *)
      WriteNl (f);
      RETURN;
     END (* WITH *) ;
   END (* LOOP *) ;

  END;
(* line 940 "" *)
(* line 941 "" *)
      CommonTestElim (OneTest);
(* line 942 "" *)
      CommonTestElim (yyP1);
      RETURN;

 END CommonTestElim2;

PROCEDURE CommonTestElim (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.Decision:
(* line 947 "" *)
     WITH t^.Decision DO
(* line 947 "" *)
      
        IF Cases = 0 THEN
           IF NOT TemposDone AND (OneTest^.Kind = Tree.TestValue) AND NeedsTempo (ThenPart, rule) THEN
              WriteS (f, "    WITH yyTempo.yyR"); WN (rule^.Rule.Index); WriteS (f, " DO "); WriteNl (f);
              TemposDone := TRUE;
              CommonTestElim2 (OneTest, ThenPart);
              WriteS (f, "  END;"); WriteNl (f);
              WriteS (f, "    END (* WITH yyTempo.yyR ... *) ; "); WriteNl (f);
           ELSE
              GetRule (ThenPart, rule);
              Decls := rule^.Rule.VarDecls;
              CommonTestElim2 (OneTest, ThenPart);
              WriteS (f, "  END;"); WriteNl (f);
           END;
           TemposDone := FALSE;
           CommonTestElim (ElsePart);
        ELSE
           i := Cases; Case (t);
        END;
;
      RETURN;
     END (* WITH *) ;

  | Tree.Decided:
(* line 967 "" *)
     WITH t^.Decided DO
(* line 967 "" *)
      
        CommonTestElim (Rule);
        IF Rule^.Rule.HasExit THEN
           TemposDone := FALSE;
           CommonTestElim (ElsePart);
        END;
;
      RETURN;
     END (* WITH *) ;

  | Tree.TestKind:
(* line 974 "" *)
     WITH t^.TestKind DO
(* line 974 "" *)
      
        WriteS (f, "  IF ("); WritePath ( Path ); WriteS (f, "^.Kind = "); 
        WI (TypeDesc^.NodeTypes.TreeName^.TreeName.Name); 
        WriteS (f, "."); WI (Name); WriteS (f, ") THEN"); WriteNl (f);
;
      RETURN;
     END (* WITH *) ;

  | Tree.TestIsType:
(* line 979 "" *)
     WITH t^.TestIsType DO
(* line 979 "" *)
      
        WriteS (f, "  IF "); WI (TypeDesc^.NodeTypes.TreeName^.TreeName.Name); 
                WriteS (f, ".IsType ("); WritePath ( Path ); WriteS (f, ", "); 
        WI (TypeDesc^.NodeTypes.TreeName^.TreeName.Name); 
        WriteS (f, "."); WI (Name); WriteS (f, ") THEN"); WriteNl (f);
;
      RETURN;
     END (* WITH *) ;

  | Tree.TestNil:
(* line 985 "" *)
     WITH t^.TestNil DO
(* line 985 "" *)
      
        WriteS (f, "  IF "); WritePath ( Path ); WriteS (f, " = NIL THEN"); WriteNl (f);
;
      RETURN;
     END (* WITH *) ;

  | Tree.TestNonlin:
(* line 988 "" *)
     WITH t^.TestNonlin DO
(* line 988 "" *)
      
        WriteS (f, "  IF (equal"); ImplMod ( TypeDesc); WriteS (f, " ("); WritePath (Path );
        WriteS (f, ", "); WritePath (Path2); WriteS (f, ")) THEN"); WriteNl (f);
;
      RETURN;
     END (* WITH *) ;

  | Tree.TestValue:
(* line 992 "" *)
     WITH t^.TestValue DO
(* line 992 "" *)
      
        AssignTempo (Expr);
        WriteS (f, "  IF (equal"); ImplMod ( TypeDesc); WriteS (f, " ("); WritePath (Path );
        WriteS (f, ", "); Expression (Expr); WriteS (f, ")) THEN"); WriteNl (f);
;
      RETURN;
     END (* WITH *) ;

  | Tree.Rule:
(* line 997 "" *)
     WITH t^.Rule DO
(* line 997 "" *)
      
        WriteLine (Line);
        IF HasTempos AND NOT TemposDone 
        THEN WriteS (f, "    WITH yyTempo.yyR"); WN (Index); WriteS (f, " DO  "); WriteNl (f);
        END;
        IF HasExit THEN WriteS (f, "   LOOP"); WriteNl (f);
        END;
        Decls := VarDecls;
      IF NeedsWITHStmt ( t ) 
      THEN 
        Tg2 (Patterns, InFormals);
      END;
        ImplMod (Statements);
        IF NOT HasRejectOrFail THEN
           AssignFormals (Exprs, OutFormals);
           MatchExprs (Exprs);
           CASE RoutineKind OF
           | kProcedure: WriteS (f, "      RETURN;"); WriteNl (f);

           | kFunction :
              AssignTempo (Expr);
              IF HasPatterns 
                 AND (Expr^.Kind # Tree.Compose) 
                 AND NOT Tree . IsType ( t , Tree.DontCare1 ) THEN
                 WriteS (f, "      "); WI (Tempo); WriteS (f, " := "); Expression (Expr); WriteS (f, ";"); WriteNl (f);
                 MatchExpr (Expr);
                 WriteS (f, "      RETURN "); WI (Tempo); WriteS (f, ";"); WriteNl (f);
              ELSE
                 MatchExpr (Expr);
                 WriteS (f, "      RETURN "); Expression (Expr); WriteS (f, ";"); WriteNl (f);
              END;

           | kPredicate: WriteS (f, "      RETURN TRUE;"); WriteNl (f);
           END;
        END;
      IF NeedsWITHStmt ( t ) 
      THEN 
        Tg3 (Patterns);
      END;
        IF HasExit THEN WriteS (f, "   END (* LOOP *) ;"); WriteNl (f);
        END;
        IF HasTempos AND NOT TemposDone 
        THEN 
          WriteS (f, "    END (* WITH yyTempos.yyR ... *) ;  "); WriteNl (f);
        END;
        WriteNl (f);
;
      RETURN;
     END (* WITH *) ;

  ELSE END;

 END CommonTestElim;

PROCEDURE Case (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 | 1: yyR1: RECORD
  n: CARDINAL;
  END;
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.Decision:
(* line 1048 "" *)
    WITH yyTempo.yyR1 DO  
     WITH t^.Decision DO
(* line 1049 "" *)
      ;
(* line 1050 "" *)
       WriteNl (f);
        WriteS (f, "  CASE "); WritePath ( OneTest^.OneTest.Path ); WriteS (f, "^.Kind OF"); WriteNl (f);
        n := i;
        WHILE n > 0 DO
           IF NOT IsEmpty (t^.Decision.OneTest^.TestIsType.TypeDesc^.NodeTypes.Types) THEN
              Case (t^.Decision.OneTest);
              CommonTestElim (t^.Decision.ThenPart);
           END;
           t := t^.Decision.ElsePart;
           DEC (n);
        END;
        WriteS (f, "  ELSE END;"); WriteNl (f);
        WriteNl (f);
        CommonTestElim (t);
      ;
      RETURN;
     END (* WITH *) ;
    END (* WITH yyTempos.yyR ... *) ;  

  | Tree.TestKind:
(* line 1065 "" *)
     WITH t^.TestKind DO
(* line 1065 "" *)
      
        WriteS (f, "  | "); WI (TypeDesc^.NodeTypes.TreeName^.TreeName.Name); WriteS (f, "."); WI (Name); WriteS (f, ":"); WriteNl (f);
;
      RETURN;
     END (* WITH *) ;

  | Tree.TestIsType:
(* line 1068 "" *)
     WITH t^.TestIsType DO
(* line 1068 "" *)
      
        WITH TypeDesc^.NodeTypes DO
           TheClass := LookupClass (TreeName^.TreeName.Classes, Minimum (Types));
           WriteS (f, "  | "); WI (TreeName^.TreeName.Name); WriteS (f, "."); WI (TheClass^.Class.Name);
           Case (TypeDesc); WriteS (f, ":"); WriteNl (f);
        END;
;
      RETURN;
     END (* WITH *) ;

  | Tree.NodeTypes:
(* line 1075 "" *)
     WITH t^.NodeTypes DO
(* line 1075 "" *)
      
        FOR j := Minimum (Types) + 1 TO Maximum (Types) DO
           IF IsElement (j, Types) THEN
              TheClass := LookupClass (TreeName^.TreeName.Classes, j); WriteNl (f);
              WriteS (f, "  , "); WI (TreeName^.TreeName.Name); WriteS (f, "."); WI (TheClass^.Class.Name);
           END;
        END;
;
      RETURN;
     END (* WITH *) ;

  ELSE END;

 END Case;

PROCEDURE BeginM2;
 BEGIN

 END BeginM2;

PROCEDURE CloseM2;
 BEGIN

 END CloseM2;

PROCEDURE yyExit;
 BEGIN
  IO.CloseIO; System.Exit (1);
 END yyExit;

BEGIN
 yyf   := IO.StdOutput;
 Exit  := yyExit;
 BeginM2;
END M2.

