     1 
     2 (* Ich, Doktor Josef Grosch, Informatiker, 20.3.1989 *)
     3 (* Rodney M. Bates Feb 96. Added SPECWITH and BODYWITH sections. *)
     4 (* RMB Jun 96 Added Modula-2 style comments (* ... *) , including
c    5               nesting thereof.  
c    6    RMB Oct 96 Changed to scan comments inside target code blocks properly.
c    7               (previously, a quote inside a comment inside target
c    8                code gave a spurious "unclosed string" message.) 
c    9    RMB Apr 97 Added Ada expression operators. 
c   10    RMB Jun 97 Added CompoundOperator for the THEN/ELSE of Ada 
c   11               AND THEN and OR ELSE 
c   12    RMB Sep 98 Changed to deliver tokens '.' and '->' in state expr,
c   13               so parser can distinguish occurences of Ident following them
c   14    RMB July 1999 Fixed a bug in postion of comments
c   15        
c   16 *) 
    17 
    18 EXPORT  {                                                                     *
    19 FROM StringMem  IMPORT tStringRef;                                            *     *     *     *
    20 FROM Idents     IMPORT tIdent   ;                                            19     *    19     *
    21 FROM Texts      IMPORT tText    ;                                            20     *    20     *
    22 FROM Positions  IMPORT tPosition;                                            21     *    21     *
    23 
    24 INSERT tScanAttribute                                                         *     *
    25 
    26 PROCEDURE Error         (Text: ARRAY OF CHAR; Position: tPosition);           *     *     *     *     *     *     *    22
    27 PROCEDURE ErrorI        (Text: ARRAY OF CHAR; Position: tPosition; Ident: tIdent);       26     *    26    26    26    26
                                                                                    26    26     *    20
    28 PROCEDURE Warning       (Text: ARRAY OF CHAR; Position: tPosition);          27     *    27    27    27    27    27    27
    29 PROCEDURE WarningI      (Text: ARRAY OF CHAR; Position: tPosition; Ident: tIdent);       28     *    28    28    28    28
                                                                                    28    28    27    27
    30 }
    31 
    32 GLOBAL  {                                                                     *
    33 FROM SYSTEM     IMPORT ADR;                                                  22     *    22     *
    34 FROM StringMem  IMPORT PutString;                                            33    19    33     *
    35 FROM Strings    IMPORT tString, Concatenate, Char, SubString,                34     *    34     *     *     *     *
    36                         AssignEmpty, Length, WriteL;                          *     *     *
    37 FROM Idents     IMPORT tIdent, MakeIdent, NoIdent, GetStringRef ;            35    20    35    29     *     *     *
    38   (* NOTE: The references to GetStringRef (and no doubt others) 
c   39            come from code in puma.pars, but they are generated 
c   40            into Scanner.mi, whose imports come from here! *) 
    41 FROM Texts      IMPORT MakeText, Append;                                     37    21    37     *     *
    42 FROM Sets       IMPORT IsElement;                                            41     *    41     *
    43 FROM Tree       IMPORT Options, ErrorCount;                                  42     *    42     *     *
    44 FROM Positions  IMPORT tPosition;                                            43    22    43    29
    45 
    46 IMPORT Errors;                                                               44     *
    47 
    48 VAR BraceNestingLevel , CommentNestingLevel : INTEGER;                        *     *     *     *
    49 VAR CommentPos, StringPos, TargetPos : tPosition;                            48     *     *     *    44
    50 VAR InsideTarget , InsideExpr : BOOLEAN ;                                    49     *     *     *
    51 
    52 INSERT ErrorAttribute                                                        24     *
    53 
    54 PROCEDURE Error (Text: ARRAY OF CHAR; Position: tPosition);                  29    26    29    29    29    29    29    49
    55    BEGIN                                                                      *
    56       Errors.Message (Text, Errors.Error, Position);                         46     *    54     *    54    54
    57       INC (ErrorCount);                                                       *    43
    58    END Error;                                                                 *    56
    59 
    60 PROCEDURE ErrorI (Text: ARRAY OF CHAR; Position: tPosition; Ident: tIdent);        54    27    56    54    54    54    56
                                                                                    54    29    37
    61    BEGIN                                                                     55
    62       Errors.MessageI (Text, Errors.Error, Position, Errors.Ident, ADR (Ident));         56     *    60     *    58    60
                                                                                     *    60    33     *
    63       INC (ErrorCount);                                                      57    57
    64    END ErrorI;                                                               58    60
    65 
    66 PROCEDURE Warning (Text: ARRAY OF CHAR; Position: tPosition);                60    28    62    60    60    60    62    60
    67    BEGIN                                                                     61
    68       IF NOT IsElement (ORD ('s'), Options) THEN                              *     *    42     *    43     *
    69          Errors.Message (Text, Errors.Warning, Position);                    62    56    66     *    66    66
    70       END;                                                                   64
    71    END Warning;                                                              70    69
    72 
    73 PROCEDURE WarningI (Text: ARRAY OF CHAR; Position: tPosition; Ident: tIdent);      66    29    69    66    66    66    69
                                                                                    66    62    60
    74    BEGIN                                                                     67
    75       IF NOT IsElement (ORD ('s'), Options) THEN                             68    68    68    68    68    68
    76          Errors.MessageI (Text, Errors.Warning, Position, Errors.Ident, ADR (Ident))\    69    62    73     *    71    73
                                                                                     *    73    62     *
      \;
    77       END;                                                                   71
    78    END WarningI;                                                             77    73
    79 }
    80 
    81 LOCAL                                                                         *
    82   { VAR Word, String, TargetCode: tString;                                   50     *     *     *    35
    83 
    84     PROCEDURE AccumComment ( ) ;                                             73     *
    85     BEGIN                                                                    74
    86       IF InsideTarget AND ( BraceNestingLevel > 0 )                          75    50     *    48
    87       THEN                                                                   75
    88         GetWord (Word);                                                       *    82
    89         Concatenate (TargetCode, Word);                                      35    82    88
    90       END (* IF *)                                                           78
    91     END AccumComment;                                                        90    84
    92 
    93   }
    94 
    95 BEGIN                                                                        85
    96   { BraceNestingLevel := 0;                                                  86
    97     CommentNestingLevel := 0;                                                48
    98     InsideTarget := FALSE;                                                   86     *
    99     InsideExpr := FALSE;                                                     50    98
   100   }
   101 
   102 DEFAULT                                                                       *
   103   { GetWord (Word);                                                          88    89
   104     Errors.MessageI                                                          76    76
   105       ( "illegal character", Errors.Error                                   104    62
   106       , Attribute.Position, Errors.String, ADR (Word)                         *    76   105    82    76   103
   107       );
   108   }
   109 
   110 EOF     {                                                                     *
   111    CASE yyStartState OF                                                       *     *    73
   112    | CComment , M2Comment : Error ("unclosed comment", CommentPos);           *     *   105    49
   113      IF InsideTarget OR InsideExpr                                           86    98     *    99
   114      THEN Error ("unclosed target code", TargetPos);                         87   112    49
   115      END (* IF *)                                                            91
   116    | expr       ,                                                             *
   117      targetcode : Error ("unclosed target code", TargetPos);                  *   114   114
   118    | CStr1, CStr2,                                                            *     *
   119      Str1, Str2 : Error ("unclosed string", StringPos);                       *     *   117    49
   120      IF InsideTarget OR InsideExpr                                          113   113   113   113
   121      THEN Error ("unclosed target code", TargetPos);                        114   119   117
   122      END (* IF *)                                                           115
   123    ELSE                                                                       *
   124    END;                                                                     122
   125    BraceNestingLevel := 0;                                                   96
   126    CommentNestingLevel := 0;                                                 97
   127 }
   128 
   129 DEFINE  letter  =   {A-Z a-z _} .                                             *     *     *     *     *     *     *
   130         digit   =   {0-9}       .                                             *
   131         CCmtCh  = - {*\t\n}     .                                             *     *     *
   132         M2CmtCh  = - {*(\t\n}   .                                             *   131   131
   133         StrCh1  = - {'\t\n}     .                                             *
   134         StrCh2  = - {"\t\n}     .                                             *
   135         CStrCh1 = - {'\t\n\\}   .                                             *
   136         CStrCh2 = - {"\t\n\\}   .                                             *
   137         code    = - {\\\t\n{\}'"(/} .                                         *   132   132
   138         anyExpr = - {\\\t\n{\}'":\ (/\.\-a-zA-Z} .                            *   137   137
   139 
   140 START   CComment , M2Comment, Str1, Str2, CStr1, CStr2, targetcode, expr      *   112   112   119   119   118   118   117
                                                                                   116
   141 
   142 RULE                                                                          *
   143 
   144 #targetcode#    "{"     : {                                                 140
   145                            IF BraceNestingLevel = 0 THEN                    120   125   121
   146                               MakeText (Attribute.TargetBlock.Text);         41   106     *    76
   147                               AssignEmpty (TargetCode);                      36    89
   148                               TargetPos := Attribute.Position;              121   146   106
   149                               InsideTarget := TRUE;                         120     *
   150                            ELSE                                             123
   151                               GetWord (Word);                               103   106
   152                               Concatenate (TargetCode, Word);                89   147   151
   153                            END;                                             124
   154                            INC (BraceNestingLevel);                          63   145
   155                         }
   156 
   157 #targetcode#    "}"     :- {                                                144
   158                            DEC (BraceNestingLevel);                           *   154
   159                            IF BraceNestingLevel = 0 THEN                    145   158   145
   160                               yyStart (STD);                                  *     *
   161                               InsideTarget := FALSE;                        149    99
   162                               Append (Attribute.TargetBlock.Text, TargetCode);     41   148   146   146   152
   163                               Attribute.Position := TargetPos;              162   148   148
   164                               RETURN TargetBlock;                             *   162
   165                            ELSE                                             150
   166                               GetWord (Word);                               151   152
   167                               Concatenate (TargetCode, Word);               152   162   166
   168                            END;                                             153
   169                         }
   170 
   171 #targetcode#    code +  | "/" | "("                                         157   137
   172                         :- {
   173                            IF BraceNestingLevel > 0 THEN                    159   159   159
   174                               GetWord (Word);                               166   167
   175                               Concatenate (TargetCode, Word);               167   167   174
   176                            END;                                             168
   177                         }
   178 
   179 #targetcode#    \t      :- {                                                171   138
   180                            IF BraceNestingLevel > 0 THEN                    173   173   173
   181                               Strings.Append (TargetCode, 11C);              35   162   175
   182                            END;                                             176
   183                            yyTab;                                             *
   184                         }
   185 
   186 #targetcode#    \n      :- {                                                179   138
   187                            IF BraceNestingLevel > 0 THEN                    180   180   180
   188                               Append (Attribute.TargetBlock.Text, TargetCode);    181   163   164   162   181
   189                               AssignEmpty (TargetCode);                     147   188
   190                            END;                                             182
   191                            yyEol (0);                                         *
   192                         }
   193 
   194 #targetcode#    \\ ANY  :- {                                                186     *
   195                            IF BraceNestingLevel > 0 THEN                    187   187   187
   196                               GetWord (Word);                               174   175
   197                               Strings.Append (TargetCode, Char (Word, 2));        181   188   189    35   196
   198                            END;                                             190
   199                         }
   200 
   201 #targetcode#    \\      :- {                                                194
   202                            IF BraceNestingLevel > 0 THEN                    195   195   195
   203                               Strings.Append (TargetCode, '\');             197   197   197
   204                            END;                                             198
   205                         }
   206 
   207 #STD, expr, targetcode#                                                     160   140   201
   208              "(*"  :  { AccumComment ( );                                    91
   209                         CommentNestingLevel := 1;                           126
   210                         CommentPos := Attribute.Position;                   112   188   163
   211                         yyStart (M2Comment);                                160   140
   212                       }
   213 
   214 #M2Comment#  "(*"  :- { INC (CommentNestingLevel); AccumComment ( ); }      211   154   209   208
   215 #M2Comment#  "*)"  :- { AccumComment ( ); DEC (CommentNestingLevel);        214   214   158   214
   216                         IF CommentNestingLevel = 0 THEN yyPrevious; END;    202   215   202     *   204
   217                       }
   218 #M2Comment#  "(" | "*" | M2CmtCh + :- { AccumComment ( ); }                 215   132   215
   219 
   220 #STD, expr, targetcode#                                                     207   207   207
   221            "/*"   :  { AccumComment ( );                                    218
   222                        yyStart (CComment);                                  211   140
   223                        CommentPos := Attribute.Position;                    210   210   210
   224                      }
   225 #CComment# "*/"    :- { AccumComment ( ); yyPrevious;}                      222   221   216
   226 #CComment# "*" | CCmtCh + :- { AccumComment ( ); }                          225   131   225
   227 
   228 #M2Comment, CComment#                                                       218   226
   229               \t     :- {                                                   179
   230                            IF InsideTarget AND ( BraceNestingLevel > 0 )    216   161    86   202
   231                            THEN                                             216
   232                               Strings.Append (TargetCode, 11C);             203   203   203
   233                            END;                                             216
   234                            yyTab;                                           183
   235                         }
   236 
   237 #M2Comment, CComment#                                                       228   228
   238               \n     :- {                                                   186
   239                            IF InsideTarget AND ( BraceNestingLevel > 0 )    230   230   230   230
   240                            THEN                                             231
   241                               Append (Attribute.TargetBlock.Text, TargetCode);    232   223   188   188   232
   242                               AssignEmpty (TargetCode);                     189   241
   243                            END;                                             233
   244                            yyEol (0);                                       191
   245                         }
   246 
   247 #STD# \f | \r           :- {}                                               220     *     *
   248 
   249 #STD# (digit + "." digit * | digit * "." digit +) ({Ee} {+\-} ? digit +) ?        247   130     *     *     *     *     *
   250       | digit +                                                             249
   251                         :  {GetWord (Word);                                 196   197
   252                             Attribute.Number.StringRef := PutString (Word);       241     *     *    34   251
   253                             RETURN Number;}                                 164   252
   254 
   255 #STD, expr, targetcode# ' :{GetWord (String);                               249   220   220
   256                             StringPos := Attribute.Position;                119   252   223
   257                             IF IsElement (ORD ('c'), Options)               239    75    75    75
   258                             THEN yyStart (CStr1);                           240   222   140
   259                             ELSE yyStart (Str1);                            165   258   140
   260                             END;}                                           243
   261 
   262 #STD, expr, targetcode# \":{GetWord (String);                               255   255   255
   263                             StringPos := Attribute.Position;                256   256   256
   264                             IF IsElement (ORD ('c'), Options)               257   257   257   257
   265                             THEN yyStart (CStr2);                           258   259   140
   266                             ELSE yyStart (Str2);                            259   265   140
   267                             END;}                                           260
   268 
   269 #Str1#  StrCh1 +        ,                                                   259   133
   270 #Str2#  StrCh2 +        ,                                                   266   134
   271 #CStr1# CStrCh1 + | \\ ANY ? ,                                              258   135   194
   272 #CStr2# CStrCh2 + | \\ ANY ? :- {GetWord (Word); Concatenate (String, Word);}     265   136   271   251   252   175   106
                                                                                     *
   273 
   274 #CStr1# \\ \n           ,                                                   271   238
   275 #CStr2# \\ \n           :- {GetWord (Word); Concatenate (String, Word); yyEol (0);}     272   274   272   272   272   272
                                                                                     *   244
   276 
   277 #Str1, CStr1# '         ,                                                   269   274
   278 #Str2, CStr2# \"        :- {Strings.Append (String, Char (String, 1));      270   275
   279                             yyPrevious;                                     225
   280                             IF yyStartState = targetcode THEN               264   111   262   265
   281                                Concatenate (TargetCode, String);            275   242   275
   282                             ELSE                                            266
   283                                Attribute.String.StringRef := PutString (String);        263   281   252   252     *
   284                                RETURN String;                               253   283
   285                             END;}                                           267
   286 
   287 #Str1, Str2, CStr1, CStr2# \t :- {Strings.Append (String, 11C); yyTab;}     277   278   277   278   229   232   241   284
                                                                                   234
   288 
   289 #Str1, Str2, CStr1, CStr2# \n :- {Error ("unclosed string", Attribute.Position);        287   287   287   287   275   121
                                                                                   283   263
   290                             Strings.Append (String, Char (String, 1));      287   287   287   197     *
   291                             yyEol (0); yyPrevious;                          275   279
   292                             IF yyStartState = targetcode THEN               280   280   280   280
   293                                Concatenate (TargetCode, String);            281   281   290
   294                             ELSE                                            282
   295                                Attribute.String.StringRef := PutString (String);        289   293   283   283     *
   296                                RETURN String;                               284   295
   297                             END;}                                           285
   298 
   299 (* The following 3 tokens don't get inserted, even though they
c  300    appear in puma.pars.  A possible reason?: they are declared
c  301    there as subtokens of 'String' *) 
   302 #STD# "::"              : {RETURN '::'                  ;}                  262   296
   303 
   304 #STD# "."               : {RETURN '.'                   ;}                  302   302
   305 
   306 #STD# "->"              : {RETURN '->'                  ;}                  304   304
   307 
   308 #STD# "{"               : {IF BraceNestingLevel = 0                         306   292   239
   309                            THEN TargetPos := Attribute.Position;            292   163   295   289
   310                            END;                                             297
   311                            yyStart (expr);                                  266   262
   312                            InsideExpr := TRUE;                              120   149
   313                            INC (BraceNestingLevel);                         214   308
   314                            RETURN '{';}                                     306
   315 
   316 #expr# anyExpr * | "(" | "/"                                                311   138
   317                         : {GetWord (Word);                                  275   275
   318                            Attribute.TargetCode.StringRef := PutString (Word);    309   293   295   295   317
   319                            RETURN TargetCode            ;}                  314   318
   320 
   321 #expr# "{"              : {INC (BraceNestingLevel);                         316   313   313
   322                            GetWord (Word);                                  317   318
   323                            Attribute.TargetCode.StringRef := PutString (Word);    318   319   318   318   322
   324                            RETURN TargetCode            ;}                  319   323
   325 
   326 #expr# "}"              : {DEC (BraceNestingLevel);                         321   215   321
   327                            IF BraceNestingLevel = 0 THEN                    308   326   309
   328                               yyStart (STD);                                311   308
   329                               InsideExpr := FALSE;                          312   161
   330                               RETURN '}';                                   324
   331                            ELSE                                             294
   332                               GetWord (Word);                               322   323
   333                               Attribute.TargetCode.StringRef := PutString (Word);       323   324   323   323   332
   334                               RETURN TargetCode;                            330   333
   335                            END                          ;}                  310
   336 
   337 #expr# ":"              : {GetWord (Word);                                  326   332   333
   338                            Attribute.TargetCode.StringRef := PutString (Word);    333   334   333   333   337
   339                            RETURN TargetCode            ;}                  334   338
   340 
   341 #expr# "::"             : {GetWord (Word);                                  337   337   338
   342                            Attribute.'::'.StringRef := PutString (Word);    338   338   338   341
   343                            RETURN '::'                  ;}                  339
   344 
   345 #expr# "."              : {GetWord (Word);                                  341   341   342
   346                            Attribute.'.'.StringRef := PutString (Word);     342   342   342   345
   347                            RETURN '.'                   ;}                  343
   348 
   349 #expr# "->"             : {GetWord (Word);                                  345   345   346
   350                            Attribute.'->'.StringRef := PutString (Word);    346   346   346   349
   351                            RETURN '->'                  ;}                  347
   352 
   353 #expr# "-"              : {GetWord (Word);                                  349   349   350
   354                            Attribute.TargetCode.StringRef := PutString (Word);    350   339   350   350   353
   355                            RETURN TargetCode            ;}                  351   354
   356 
   357 #expr# " " +            : {GetWord (Word);                                  353   353   354
   358                            Attribute.WhiteSpace.StringRef := PutString (Word);    354     *   354   354   357
   359                            RETURN WhiteSpace            ;}                  355   358
   360 
   361 #expr# \n               : {GetWord (Word);                                  357   289   357   358
   362                            Attribute.WhiteSpace.StringRef := PutString (Word);    358   359   358   358   361
   363                            yyEol (0);                                       291
   364                            RETURN WhiteSpace            ;}                  359   362
   365 
   366 #expr# \t               : {GetWord (Word);                                  361   287   361   362
   367                            Attribute.WhiteSpace.StringRef := PutString (Word);    362   364   362   362   366
   368                            yyTab;                                           287
   369                            RETURN WhiteSpace            ;}                  364   367
   370 
   371 #expr# \\ ANY           : {GetWord (Word);                                  366   272   366   367
   372                            SubString (Word, 2, 2, String);                   35   371   296
   373                            Attribute.TargetCode.StringRef                   367   355   367
   374                              := PutString (String);                         367   372
   375                            RETURN TargetCode            ;}                  369   373
   376 
   377 #expr# \\               : {GetWord (Word);                                  371   371   372
   378                            Attribute.TargetCode.StringRef := PutString (Word);    373   375   373   374   377
   379                            RETURN TargetCode            ;}                  375   378
   380 
   381 #STD# SPECWITH          : {yyStart (targetcode); RETURN 'SPECWITH';}        328     *   328   292   379
   382 #STD# BODYWITH          : {yyStart (targetcode); RETURN 'BODYWITH';}        381     *   381   381   381
   383 #STD# BEGIN             : {yyStart (targetcode); RETURN 'BEGIN';}           382    95   382   382   382
   384 #STD# CLOSE             : {yyStart (targetcode); RETURN 'CLOSE';}           383     *   383   383   383
   385 #STD# EXPORT            : {yyStart (targetcode); RETURN 'EXPORT';}          384    18   384   384   384
   386 #STD# GLOBAL            : {yyStart (targetcode); RETURN 'GLOBAL';}          385    32   385   385   385
   387 #STD# IMPORT            : {yyStart (targetcode); RETURN 'IMPORT';}          386    46   386   386   386
   388 #STD# LOCAL             : {yyStart (targetcode); RETURN 'LOCAL';}           387    81   387   387   387
   389 
   390 #STD#                                                                       388
   391   "!"
   392 | "!="
   393 | "#"
   394 | "%"
   395 | "&"
   396 | "&&"
   397 | "*"
   398 | "+"
   399 | "-"
   400 | "/"
   401 | "<"
   402 | "<<"
   403 | "<="
   404 | "<>"
   405 | "="
   406 | "=="
   407 | ">"
   408 | ">="
   409 | ">>"
   410 | "|"
   411 | "||"
   412 | "~"
   413 | "**" 
   414 | "/=" 
   415 | DIV                                                                         *
   416 | in | iN | In | IN                                                           *     *     *     *
   417 | or | oR | Or | OR                                                           *     *     *   120
   418 | and | anD | aNd | aND | And | AnD | ANd | AND                               *     *     *     *     *     *     *   239
   419 | mod | moD | mOd | mOD | Mod | MoD | MOd | MOD                               *     *     *     *     *     *     *     *
   420 | not | noT | nOt | nOT | Not | NoT | NOt | \NOT                              *     *     *     *     *     *     *    75
   421 | abs | abS | aBs | aBS | Abs | AbS | ABs | ABS                               *     *     *     *     *     *     *     *
   422 | rem | reM | rEm | rEM | Rem | ReM | REm | REM                               *     *     *     *     *     *     *     *
   423 | xor | xoR | xOr | xOR | Xor | XoR | XOr | XOR                               *     *     *     *     *     *     *     *
   424                         : {GetWord (Word);                                  377   378
   425                            Attribute.Operator.Ident := MakeIdent (Word);    378     *    76    37   424
   426                            RETURN Operator              ;}                  388   425
   427 
   428 #STD#                                                                       390
   429   then | theN | thEn | thEN | tHen | tHeN | tHEn | tHEN                       *     *     *     *     *     *     *     *
   430 | Then | TheN | ThEn | ThEN | THen | THeN | THEn | THEN                       *     *     *     *     *     *     *   327
   431 | else | elsE | elSe | elSE | eLse | eLsE | eLSe | eLSE                       *     *     *     *     *     *     *     *
   432 | Else | ElsE | ElSe | ElSE | ELse | ELsE | ELSe | ELSE                       *     *     *     *     *     *     *   331
   433                         : {GetWord (Word);                                  424   425
   434                            Attribute.Operator.Ident := MakeIdent (Word);    425   426   425   425   433
   435                            RETURN CompoundOperator              ;}          426     *
   436 
   437 #STD# "++" | "--"       : {GetWord (Word);                                  428   433   434
   438                            Attribute.IncOperator.Ident := MakeIdent (Word);       434     *   434   434   437
   439                            RETURN IncOperator           ;}                  435   438
   440 
   441 #STD# \\ - {\ \t\n} +   : {GetWord (Word);                                  437   366   361   437   438
   442                            SubString (Word, 2, Length (Word), String);      372   441    36     *   374
   443                            Attribute.Operator.Ident := MakeIdent (String);        438   434   438   438   442
   444                            RETURN Operator              ;}                  439   443
   445 
   446 INSERT RULES #STD#                                                           52     *   441
   447 
   448 #STD# "..."             : {RETURN '..'                  ;}                  446   444
   449 #STD# ":-"              : {RETURN '?'                   ;}                  448   448
   450 
   451 #STD, expr# letter (letter | digit) *                                       449   377   129     *   250
   452                         : {GetWord (Word);                                  441   442
   453                            Attribute.Ident.Ident := MakeIdent (Word);       443   443     *   443   452
   454                            RETURN Ident                 ;}                  449   453
Cross reference: 

-"-
 "        :- {Strings.Append (\  279 
   String, Char (String, 1));
 " "                             357 
 "!"                             391 
 "!="                            392 
 "#"                             393 
 "%"                             394 
 "&"                             395 
 "&&"                            396 
 "("                             171   218   316 
 "(*"                            208   214 
 "*"                             218   226   397 
 "*)"                            215 
 "**"                            413 
 "*/"                            225 
 "+"                             398 
 "++"                            437 
 "-"                             353   399 
 "--"                            437 
 "->"                            306   349 
 "."                             249   249   304   345 
 "..."                           448 
 "/"                             171   316   400 
 "/*"                            221 
 "/="                            414 
 ":"                             337 
 ":-"                            449 
 "::"                            302   341 
 ":{GetWord (String);            263 
 "<"                             401 
 "<<"                            402 
 "<="                            403 
 "<>"                            404 
 "="                             405 
 "=="                            406 
 ">"                             407 
 ">="                            408 
 ">>"                            409 
 "illegal character"             105 
 "unclosed comment"              112 
 "unclosed string"               119   289 
 "unclosed target code"          114   117   121 
 "\t\n\\}   .                    137 
 "\t\n}     .                    135 
 "{"                             144   308   321 
 "|"                             410 
 "||"                            411 
 "}"                             157   326 
 "~"                             412 

-'-
 '         ,                     278 
 ' :{GetWord (String);           256 
 '"(/} .                         138 
 '":\ (/\.\-a-zA-Z} .            139 
 '->'                            306   350   351 
 '.'                             304   346   347 
 '..'                            448 
 '::'                            302   342   343 
 '?'                             449 
 'BEGIN'                         383 
 'BODYWITH'                      382 
 'c'                             257   264 
 'CLOSE'                         384 
 'EXPORT'                        385 
 'GLOBAL'                        386 
 'IMPORT'                        387 
 'LOCAL'                         388 
 's'                              68    75 
 'SPECWITH'                      381 
 '\'                             203 
 '\t\n\\}   .                    136 
 '\t\n}     .                    134 
 '{'                             314 
 '}'                             330 

-0-
 0                                86    96    97   125   126   130   145   159 
                                 173   180   187   191   195   202   216   230 
                                 239   244   275   291   308   327   363 

-1-
 1                               209   290 
 11C                             181   232   287 

-2-
 2                               197   372   372   442 

-9-
 9                               130 

-A-
 A                               129 
 a                               129 
 ABS                             421 
 ABs                             421 
 AbS                             421 
 Abs                             421 
 aBS                             421 
 aBs                             421 
 abS                             421 
 abs                             421 
 AccumComment                     84    91   208   214   215   218   221   225 
                                 226 
 ADR                              33    62    76   106 
 AND                              86   230   239   418 
 ANd                             418 
 AnD                             418 
 And                             418 
 aND                             418 
 aNd                             418 
 anD                             418 
 and                             418 
 ANY                             194   271   272   371 
 anyExpr                         138   316 
 Append                           41   162   181   188   197   203   232   241 
                                 287   290 
 ARRAY                            26    27    28    29    54    60    66    73 
 AssignEmpty                      36   147   189   242 
 Attribute                       106   146   148   162   163   188   210   223 
                                 241   252   256   263   283   289   295   309 
                                 318   323   333   338   342   346   350   354 
                                 358   362   367   373   378   425   434   438 
                                 443   453 

-B-
 BEGIN                            55    61    67    74    85    95   383 
 BODYWITH                        382 
 BOOLEAN                          50 
 BraceNestingLevel                48    86    96   125   145   154   158   159 
                                 173   180   187   195   202   230   239   308 
                                 313   321   326   327 

-C-
 CASE                            111 
 CCmtCh                          131   226 
 CComment                        112   140   222   225   226   228   237 
 CHAR                             26    27    28    29    54    60    66    73 
 Char                             35   197   290 
 CLOSE                           384 
 code                            137   171 
 CommentNestingLevel              48    97   126   209   214   215   216 
 CommentPos                       49   112   210   223 
 CompoundOperator                435 
 Concatenate                      35    89   152   167   175   272   275   281 
                                 293 
 CStr1                           118   140   258   271   274   277   287   289 
 CStr2                           118   140   265   272   275   278   287   289 
 CStrCh1                         135   271 
 CStrCh2                         136   272 

-D-
 DEC                             158   215   326 
 DEFAULT                         102 
 DEFINE                          129 
 digit                           130   249   249   249   249   249   250   451 
 DIV                             415 

-E-
 Ee                              249 
 ELSE                            123   150   165   259   266   282   294   331 
                                 432 
 ELSe                            432 
 ELsE                            432 
 ELse                            432 
 ElSE                            432 
 ElSe                            432 
 ElsE                            432 
 Else                            432 
 eLSE                            431 
 eLSe                            431 
 eLsE                            431 
 eLse                            431 
 elSE                            431 
 elSe                            431 
 elsE                            431 
 else                            431 
 END                              58    64    70    71    77    78    90    91 
                                 115   122   124   153   168   176   182   190 
                                 198   204   216   233   243   260   267   285 
                                 297   310   335 
 EOF                             110 
 Error                            26    54    56    58    62   105   112   114 
                                 117   119   121   289 
 ErrorAttribute                   52 
 ErrorCount                       43    57    63 
 ErrorI                           27    60    64 
 Errors                           46    56    56    62    62    62    69    69 
                                  76    76    76   104   105   106 
 EXPORT                           18   385 
 expr                            116   140   207   220   255   262   311   316 
                                 321   326   337   341   345   349   353   357 
                                 361   366   371   377   451 

-F-
 f                               247 
 FALSE                            98    99   161   329 
 FROM                             19    20    21    22    33    34    35    37 
                                  41    42    43    44 

-G-
 GetStringRef                     37 
 GetWord                          88   103   151   166   174   196   251   272 
                                 275   317   322   332   337   341   345   349 
                                 353   357   361   366   371   377   424   433 
                                 437   441   452 
 GLOBAL                           32   386 

-I-
 Ident                            27    29    60    62    62    73    76    76 
                                 425   434   438   443   453   453   454 
 Idents                           20    37 
 IF                               68    75    86   113   120   145   159   173 
                                 180   187   195   202   216   230   239   257 
                                 264   280   292   308   327 
 IMPORT                           19    20    21    22    33    34    35    37 
                                  41    42    43    44    46   387 
 IN                              416 
 In                              416 
 iN                              416 
 in                              416 
 INC                              57    63   154   214   313   321 
 IncOperator                     438   439 
 INSERT                           24    52   446 
 InsideExpr                       50    99   113   120   312   329 
 InsideTarget                     50    86    98   113   120   149   161   230 
                                 239 
 INTEGER                          48 
 IsElement                        42    68    75   257   264 

-L-
 Length                           36   442 
 letter                          129   451   451 
 LOCAL                            81   388 

-M-
 M2CmtCh                         132   218 
 M2Comment                       112   140   211   214   215   218   228   237 
 MakeIdent                        37   425   434   438   443   453 
 MakeText                         41   146 
 Message                          56    69 
 MessageI                         62    76   104 
 MOD                             419 
 MOd                             419 
 MoD                             419 
 Mod                             419 
 mOD                             419 
 mOd                             419 
 moD                             419 
 mod                             419 

-N-
 n                               131   132   137   138   186   238   274   275 
                                 289   361   441 
 NoIdent                          37 
 NOT                              68    75   420 
 NOt                             420 
 NoT                             420 
 Not                             420 
 nOT                             420 
 nOt                             420 
 noT                             420 
 not                             420 
 Number                          252   253 

-O-
 OF                               26    27    28    29    54    60    66    73 
                                 111 
 Operator                        425   426   434   443   444 
 Options                          43    68    75   257   264 
 OR                              113   120   417 
 Or                              417 
 oR                              417 
 or                              417 
 ORD                              68    75   257   264 

-P-
 Position                         26    27    28    29    54    56    60    62 
                                  66    69    73    76   106   148   163   210 
                                 223   256   263   289   309 
 Positions                        22    44 
 PROCEDURE                        26    27    28    29    54    60    66    73 
                                  84 
 PutString                        34   252   283   295   318   323   333   338 
                                 342   346   350   354   358   362   367   374 
                                 378 

-R-
 r                               247 
 REM                             422 
 REm                             422 
 ReM                             422 
 Rem                             422 
 rEM                             422 
 rEm                             422 
 reM                             422 
 rem                             422 
 RETURN                          164   253   284   296   302   304   306   314 
                                 319   324   330   334   339   343   347   351 
                                 355   359   364   369   375   379   381   382 
                                 383   384   385   386   387   388   426   435 
                                 439   444   448   449   454 
 RULE                            142 
 RULES                           446 

-S-
 Sets                             42 
 SPECWITH                        381 
 START                           140 
 STD                             160   207   220   247   249   255   262   302 
                                 304   306   308   328   381   382   383   384 
                                 385   386   387   388   390   428   437   441 
                                 446   448   449   451 
 Str1                            119   140   259   269   277   287   289 
 Str2                            119   140   266   270   278   287   289 
 StrCh1                          133   269 
 StrCh2                          134   270 
 String                           82   106   272   275   281   283   283   284 
                                 287   290   290   293   295   295   296   372 
                                 374   442   443 
 StringMem                        19    34 
 StringPos                        49   119   256   263 
 StringRef                       252   283   295   318   323   333   338   342 
                                 346   350   354   358   362   367   373   378 
 Strings                          35   181   197   203   232   287   290 
 SubString                        35   372   442 
 SYSTEM                           33 

-T-
 t                               131   132   137   138   179   229   287   366 
                                 441 
 TargetBlock                     146   162   164   188   241 
 TargetCode                       82    89   147   152   162   167   175   181 
                                 188   189   197   203   232   241   242   281 
                                 293   318   319   323   324   333   334   338 
                                 339   354   355   373   375   378   379 
 targetcode                      117   140   144   157   171   179   186   194 
                                 201   207   220   255   262   280   292   381 
                                 382   383   384   385   386   387   388 
 TargetPos                        49   114   117   121   148   163   309 
 Text                             26    27    28    29    54    56    60    62 
                                  66    69    73    76   146   162   188   241 
 Texts                            21    41 
 THEN                             68    75    87   114   121   145   159   173 
                                 180   187   195   202   216   231   240   258 
                                 265   280   292   309   327   430 
 THEn                            430 
 THeN                            430 
 THen                            430 
 ThEN                            430 
 ThEn                            430 
 TheN                            430 
 Then                            430 
 tHEN                            429 
 tHEn                            429 
 tHeN                            429 
 tHen                            429 
 thEN                            429 
 thEn                            429 
 theN                            429 
 then                            429 
 tIdent                           20    27    29    37    60    73 
 tPosition                        22    26    27    28    29    44    49    54 
                                  60    66    73 
 Tree                             43 
 TRUE                            149   312 
 tScanAttribute                   24 
 tString                          35    82 
 tStringRef                       19 
 tText                            21 

-V-
 VAR                              48    49    50    82 

-W-
 Warning                          28    66    69    71    76 
 WarningI                         29    73    78 
 WhiteSpace                      358   359   362   364   367   369 
 Word                             82    88    89   103   106   151   152   166 
                                 167   174   175   196   197   251   252   272 
                                 272   275   275   317   318   322   323   332 
                                 333   337   338   341   342   345   346   349 
                                 350   353   354   357   358   361   362   366 
                                 367   371   372   377   378   424   425   433 
                                 434   437   438   441   442   442   452   453 
 WriteL                           36 

-X-
 XOR                             423 
 XOr                             423 
 XoR                             423 
 Xor                             423 
 xOR                             423 
 xOr                             423 
 xoR                             423 
 xor                             423 

-Y-
 yyEol                           191   244   275   291   363 
 yyPrevious                      216   225   279   291 
 yyStart                         160   211   222   258   259   265   266   311 
                                 328   381   382   383   384   385   386   387 
                                 388 
 yyStartState                    111   280   292 
 yyTab                           183   234   287   368 

-Z-
 Z                               129 
 z                               129 

-_-
 _                               129 

end cross reference, 1143 occurrences of 294 identifiers.
