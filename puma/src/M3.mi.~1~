
(* This file was mechanically generated by puma. *)

IMPLEMENTATION MODULE M3;








IMPORT SYSTEM, System, IO, Tree;
(* line 37 "" *)


IMPORT Positions ; 
IMPORT Errors ; 
IMPORT SYSTEM ; 
FROM Positions  IMPORT tPosition;
IMPORT IO ; 
FROM IO         IMPORT WriteC , WriteNl , tFile;
IMPORT StringMem ; 
IMPORT Strings ; 
FROM Strings    IMPORT ArrayToString , Concatenate ; 
FROM Idents     IMPORT tIdent, NoIdent , GetString , MakeIdent ;
FROM Texts      IMPORT WriteText;
FROM Sets       IMPORT IsElement, IsNotEqual, Minimum, Maximum, IsEmpty;
FROM Semantics  IMPORT IdentifyVar, LookupClass;
FROM Optimize   IMPORT NeedsTempo, NeedsMatch, NeedsNoFinale, GetRule;
FROM Tree       IMPORT NoTree, tTree, Options, f, SourceFile, WI, WN;
FROM IOUtils    IMPORT WriteBackslash;

VAR
   RoutineKind  : (kProcedure, kFunction, kPredicate);
   i, j         : CARDINAL;
   ListCount    : INTEGER;
   rule         ,
   TheClass     ,
   InFormals    ,
   OutFormals   ,
   ReturnFormals,
   Decls        : tTree;
   TheName      : tIdent;
   TemposDone   : BOOLEAN;
VAR TypeCaseDepth : CARDINAL; 

PROCEDURE WriteLine (Line: tPosition);
   BEGIN
      IF Line.Line # 0 THEN
         WriteS (f, "(* line "); WN (Line.Line); WriteS (f, ' "'); IO . WriteS (f, SourceFile); WriteS (f, '" *)'); WriteNl (f);
      END;
   END WriteLine;

PROCEDURE WriteString ( f : tFile ; r : StringMem . tStringRef ) 
; VAR LIn : Strings . tString 
; VAR LLength , I : CARDINAL  
; VAR LCh : CHAR 
; BEGIN
    StringMem . GetString ( r , LIn ) 
  ; LLength := Strings . Length ( LIn ) 
  ; IF LLength < 2 
    THEN 
      Strings . WriteS ( f , r ) 
    ELSIF Strings . Char ( 1 ) = '"' 
    THEN 
      Strings . WriteS ( f , r ) 
    ELSIF Strings . Char ( 1 ) = "'"
    THEN 
      IO . WriteC ( f , '"' ) 
    ; FOR I := 2 TO LLength - 1 
      DO 
        LCh := Strings . Char ( LIn , I ) 
      ; IF LCh = '"' 
        THEN 
          WriteBackslash ( f ) ; 
        END (* IF *) 
      ; IO . WriteC ( f , LCh ) 
      END (* FOR *) 
    ; IO . WriteC ( f , '"' ) 
    ELSE     
      Strings . WriteS ( f , r ) 
    END (* IF *) 
  END WriteString ; 

PROCEDURE CloseTypeCases ( ToDepth : CARDINAL ) 

; BEGIN 
    WHILE TypeCaseDepth > ToDepth 
    DO 
      WriteS (f, "      ELSE EXIT"); WriteNl (f);
      WriteS (f, "      END (* TYPECASE Depth "); WN ( TypeCaseDepth ) ; WriteS (f, " , CloseTypeCases *)"); 
      DEC ( TypeCaseDepth ) 
    END (* WHILE *) 
  END CloseTypeCases ; 

PROCEDURE Match (t, Formals: tTree);
   VAR TreeName : tIdent;
   VAR Pattern  : tTree;
   BEGIN
      IF (t^.Kind = Tree.NoPattern) OR (Formals^.Kind # Tree.Formal) THEN RETURN; END;
      Pattern := t^.OnePattern.Pattern;
      CASE Pattern^.Kind OF
      | Tree.Decompose: WITH Pattern^.Decompose DO
            TreeName := Object^.Class.TypeDesc^.NodeTypes.TreeName^.TreeName.Name;
            IF ( Formals^.Formal.TypeDesc^.Kind = Tree.UserType (* sem will have generated an error *) 
               ) OR IsNotEqual 
                      ( Object^.Class.TypeDesc^.NodeTypes.Types
                      , Formals^.Formal.TypeDesc^.NodeTypes.Types
                      ) 
            THEN
              INC ( TypeCaseDepth ) ; 
              WriteS (f, "      TYPECASE "); WritePath ( Path ); WriteS (f, " (* Depth "); WN ( TypeCaseDepth ) ; WriteS (f, " , Decompose *)"); 
              WriteS (f, "      OF "); WI (TreeName); WriteS (f, " . "); WI (Object^.Class.Name); 
                        WriteS (f, " ( "); PathPrefix (Path); WriteS (f, "_yy_"); WI (Object^.Class.Name); WriteS (f, " ) "); WriteNl (f);
              WriteS (f, "      => "); (* Not end of line *) 
            END;
            Match (Patterns, Object^.Class.Formals);
         END;

      | Tree.VarDef: WITH Pattern^.VarDef DO
            IF Object # NoTree THEN
               WITH Object^.Formal DO
                  WriteS (f, "      IF NOT (equal"); Module (TypeDesc); WriteS (f, " ( "); WritePath ( Path );
                  WriteS (f, " , "); WritePath (Pattern^.VarDef.Path); WriteS (f, " ) ) THEN EXIT END (* IF *) ;"); WriteNl (f);
               END;
            END;
         END;

      | Tree.NilTest:
         WriteS (f, "      IF "); WritePath (Pattern^.NilTest.Path); WriteS (f, " # NIL THEN EXIT END (* IF *) ;"); WriteNl (f);

      | Tree.DontCare1Explicit , Tree.DontCare1Internal :
      | Tree.DontCareExplicit , Tree.DontCareInternal : RETURN;

      | Tree.Value: WITH Pattern^.Value DO
            AssignTempo (Expr);
            WriteS (f, "      IF NOT (equal"); Module (Formals^.Formal.TypeDesc);
            WriteS (f, " ( "); WritePath ( Path ); WriteS (f, " , "); Expression (Expr); WriteS (f, " ) ) THEN EXIT END (* IF *) ;"); WriteNl (f);
            MatchExpr (Expr);
         END;
      END;
      Match (t^.OnePattern.Next, Formals^.Formal.Next);
   END Match;

(* MatchExprs and MatchExpr traverse over expression(s) and, for any contained
   Call of a puma routine which has out actuals (i.e. patterns), calls match 
   for the patterns. *) 

PROCEDURE MatchExprs (t: tTree);
   BEGIN
      IF t^.Kind = Tree.NoExpr THEN RETURN; END;
      IF Tree . IsType ( t^.OneExpr.Expr , Tree.DontCare ) THEN RETURN; END;
      MatchExpr (t^.OneExpr.Expr);
      MatchExprs (t^.OneExpr.Next);
   END MatchExprs;

PROCEDURE MatchExpr (t: tTree);
   BEGIN
      CASE t^.Kind OF
      | Tree.Compose:
         MatchExprs (t^.Compose.Exprs);

      | Tree.VarUse     :
      | Tree.Nil        :
      | Tree.DontCare1Explicit  :
      | Tree.DontCare1Internal  :
      | Tree.TargetExpr :
      | Tree.StringExpr :
      | Tree.AttrDesc   :

      | Tree.Call       : WITH t^.Call DO
            MatchExpr (Expr);
            MatchExprs (Exprs);
            IF Object # NoTree THEN
               Match (Patterns, Object^.Routine.OutForm);
            END;
         END;

      | Tree.Binary     : WITH t^.Binary DO
            MatchExpr (Lop);
            MatchExpr (Rop);
         END;

      | Tree.PreOperator, Tree.PostOperator     :
         MatchExpr (t^.PreOperator.Expr);

      | Tree.Index      :
         MatchExpr (t^.Index.Expr);
         MatchExprs (t^.Index.Exprs);

      | Tree.Parents    :
         MatchExpr (t^.Parents.Expr);
      END;
   END MatchExpr;

PROCEDURE AssignTempos (t: tTree);
   BEGIN
      IF t^.Kind = Tree.NoExpr THEN RETURN; END;
      IF Tree . IsType ( t^.OneExpr.Expr , Tree.DontCare ) THEN RETURN; END;
      AssignTempo (t^.OneExpr.Expr);
      AssignTempos (t^.OneExpr.Next);
   END AssignTempos;

PROCEDURE AssignTempo (t: tTree);
   VAR TreeName : tIdent;
   BEGIN
      CASE t^.Kind OF
      | Tree.Compose: WITH t^.Compose DO
            TreeName := Object^.Class.TypeDesc^.NodeTypes.TreeName^.TreeName.Name;
            WriteS (f, "      "); WI (Tempo); WriteS (f, " := NEW ( "); WI (TreeName); WriteS (f, " . "); WI (Object^.Class.Name);  WriteS (f, " ) ;"); WriteNl (f);
            IF (Exprs^.Kind = Tree.OneExpr) AND NOT Tree . IsType ( Exprs^.OneExpr.Expr , Tree.DontCare ) THEN
               AssignFormals (Exprs, Object^.Class.Formals , Tempo );
            END;
         END;

      | Tree.VarUse     :
      | Tree.Nil        :
      | Tree.DontCare1Explicit  :
      | Tree.DontCare1Internal  :
      | Tree.TargetExpr :
      | Tree.StringExpr :
      | Tree.AttrDesc   :

      | Tree.Call       : WITH t^.Call DO
            AssignTempo (Expr); (* 
*) 
            AssignTempos (Exprs);
         END;

      | Tree.Binary     : WITH t^.Binary DO
            AssignTempo (Lop);
            AssignTempo (Rop);
         END;

      | Tree.PreOperator, Tree.PostOperator     :
         AssignTempo (t^.PreOperator.Expr);

      | Tree.Index      :
         AssignTempo (t^.Index.Expr);
         AssignTempos (t^.Index.Exprs);

      | Tree.Parents    :
         AssignTempo (t^.Parents.Expr);
      END;
   END AssignTempo;

(* Generate assignments to a formals list *) 

PROCEDURE MakeWith ( Id : tIdent ): tIdent;
   VAR String1, String2 : tString;
   BEGIN
      ArrayToString ( "yyWITH_" , String1 ) ; 
      GetString ( Id , String2 ) ; 
      Concatenate (String1, String2);
      RETURN MakeIdent (String1);
   END MakeWith;

PROCEDURE WritePrefixIdent ( Id : tIdent ) ; 
  BEGIN 
    IF Id # NoIdent 
    THEN 
      WI ( Id ) ; 
      WriteS (f, " . "); 
    END (* IF *) 
  END WritePrefixIdent ; 

PROCEDURE AssignFormals (t, Formals: tTree ; PrefixIdent : tIdent );
   BEGIN
      IF (t^.Kind = Tree.NoExpr) OR (Formals^.Kind # Tree.Formal) THEN RETURN; END;
      IF Tree . IsType ( t^.OneExpr.Expr , Tree.DontCare ) THEN
         BeginFormals ( Formals , PrefixIdent );
         RETURN;
      END;
      AssignFormal (t^.OneExpr.Expr, Formals , PrefixIdent );
      AssignFormals (t^.OneExpr.Next, Formals^.Formal.Next PrefixIdent );
   END AssignFormals;

PROCEDURE AssignFormal (t, Formals: tTree ; PrefixIdent : tIdent );
   VAR TreeName : tIdent;
   VAR LWithTemp : tIdent;
   BEGIN
      IF t^.Kind = Tree.Compose THEN
         WITH t^.Compose DO
            TreeName := Object^.Class.TypeDesc^.NodeTypes.TreeName^.TreeName.Name;
            IF (Exprs^.Kind = Tree.OneExpr) AND NOT Tree . IsType ( Exprs^.OneExpr.Expr , Tree.DontCare ) THEN
              LWithTemp := MakeWith ( Formals^.Formal.Name ) ; 
              WriteS (f, "      WITH "); WI ( LWithTemp ); WriteS (f, " := NEW ( "); WI (TreeName); WriteS (f, " . "); WI (Object^.Class.Name); WriteS (f, " ) DO"); WriteNl (f);
              WriteS (f, "      "); WI (Formals^.Formal.Name); WriteS (f, " := "); WI ( LWithTemp ) ; WriteS (f, " ;"); WriteNl (f);
              AssignFormals (Exprs, Object^.Class.Formals , LWithTemp );
              WriteS (f, "      END (* WITH *) ;"); WriteNl (f);
            ELSE 
              WriteS (f, "      "); WI (Formals^.Formal.Name); WriteS (f, " := NEW ( "); WI (TreeName); WriteS (f, " . "); WI (Object^.Class.Name); WriteS (f, " )"); WriteNl (f);
            END;
         END;
      ELSE
         AssignTempo (t);
      END;

      CASE t^.Kind OF
      | Tree.VarUse, Tree.Nil, Tree.Call, Tree.Binary, Tree.PreOperator,
        Tree.PostOperator, Tree.Index, Tree.Parents, Tree.TargetExpr, Tree.StringExpr,
        Tree.AttrDesc:
         WriteS (f, "      "); WritePrefixIdent ( PrefixIdent ) ; WI (Formals^.Formal.Name); WriteS (f, " := "); Expression (t); WriteS (f, " ;"); WriteNl (f);
      | Tree.DontCare1Explicit , Tree.DontCare1Internal :
         WriteS (f, "      begin"); Module (Formals^.Formal.TypeDesc); WriteS (f, " ( "); 
                WritePrefixIdent ( PrefixIdent ) ;  WI (Formals^.Formal.Name); WriteS (f, " ) "); WriteNl (f);
      ELSE
      END;
   END AssignFormal;

PROCEDURE BeginFormals (Formals: tTree ; PrefixIdent : tIdent );
   BEGIN
      IF Formals^.Kind = Tree.Formal THEN
         WITH Formals^.Formal DO
            WriteS (f, "      begin"); Module (TypeDesc); WriteS (f, " ( "); WritePrefixIdent ( PrefixIdent ) ; WI (Name); WriteS (f, " )"); WriteNl (f);
            BeginFormals (Next);
         END;
      END;
   END BeginFormals;

PROCEDURE ConsPatterns (t: tTree; ListCount: INTEGER): INTEGER;
   BEGIN
      IF t^.Kind = Tree.NoPattern THEN RETURN ListCount; END;
      WITH t^.OnePattern DO
         IF Tree . IsType ( Pattern , Tree.DontCare ) THEN
            RETURN ConsTempos (Pattern^.DontCare.Tempos, ListCount);
         ELSE
            IF ListCount > 0 THEN WriteS (f, " , "); END;
            WI (Pattern^.Pattern.Tempo);
            RETURN ConsPatterns (Next, ListCount + 1);
         END;
      END;
   END ConsPatterns;

PROCEDURE ConsTempos (t: tTree; ListCount: INTEGER): INTEGER;
   BEGIN
      IF t^.Kind = Tree.Formal THEN
         IF ListCount > 0 THEN WriteS (f, " , "); END;
         WI (t^.Formal.Name);
         RETURN ConsTempos (t^.Formal.Next, ListCount + 1);
      ELSE
         RETURN ListCount;
      END;
   END ConsTempos;

PROCEDURE Expressions (t: tTree; ListCount: INTEGER): INTEGER;
   BEGIN
      IF t^.Kind = Tree.NoExpr THEN RETURN ListCount; END;
      WITH t^.OneExpr DO
         IF Tree . IsType ( Expr , Tree.DontCare ) THEN
            RETURN ConsTempos (Expr^.DontCare.Tempos, ListCount);
         ELSE
            IF ListCount > 0 THEN WriteS (f, " , "); END;
            Expression (Expr);
            RETURN Expressions (Next, ListCount + 1);
         END;
      END;
   END Expressions;

PROCEDURE Expression (t: tTree);
   BEGIN
      CASE t^.Kind OF
      | Tree.Compose    : WI (t^.Compose.Tempo);

      | Tree.Nil        : WriteS (f, "NIL"); 

      | Tree.VarUse     : WITH t^.VarUse DO
            IF Object # NoTree THEN
               WritePath (Object^.Formal.Path);
            ELSE
               WI (Name);
            END;
         END;

      | Tree.DontCare1Explicit , Tree.DontCare1Internal : WI (t^.DontCare1.Tempo);

      | Tree.Call       : WITH t^.Call DO
            Expression (Expr); WriteS (f, " ( "); 
            ListCount := Expressions (Exprs, 0);
            IF Object # NoTree THEN
               ListCount := ConsPatterns (Patterns, ListCount);
            ELSE
               ListCount := Expressions (Patterns, ListCount);
            END;
            WriteS (f, " )"); 
         END;

      | Tree.Binary     : WITH t^.Binary DO
            Expression (Lop); WriteS (f, " "); WI (Operator); WriteS (f, " "); Expression (Rop);
         END;

      | Tree.PreOperator        :
         WI (t^.PreOperator.Operator); WriteS (f, " "); Expression (t^.PreOperator.Expr);

      | Tree.PostOperator       :
         Expression (t^.PostOperator.Expr); WriteS (f, " "); WI (t^.PostOperator.Operator);

      | Tree.Index      :
         Expression (t^.Index.Expr); WriteS (f, " [ "); ListCount := Expressions (t^.Index.Exprs, 0); WriteS (f, " ]"); 

      | Tree.Parents    : WriteS (f, "( "); Expression (t^.Parents.Expr); WriteS (f, " )"); 

      | Tree.TargetExpr : Module (t^.TargetExpr.Expr);

      | Tree.StringExpr : WriteString (f, t^.StringExpr.String);

      | Tree.AttrDesc   : WITH t^.AttrDesc DO
            WritePath (Object^.Formal.Path); WriteS (f, "_yy_"); WI (Type); WriteS (f, " . "); WI (Attribute);
         END;
      END;
   END Expression;

PROCEDURE Tg2 (t, Formals: tTree)
; VAR Object , Path : tTree 
; VAR Count : CARDINAL 
; VAR FormalName : tIdent 
;  PROCEDURE Tg2Attrs ( AttrFormals : tTree ) 
   ; VAR LNewFormalName : tIdent 
   ; VAR LString1 , LString2 : tString 
   ; BEGIN
     (* This renaming would need some work, requiring a routine which does something like
        PathPrefix, but builds a tIdent to compare to, instead of writing. 
        Since the constructed identifiers have _yy_ in them, consider it too unlikely
        they will clash with a user-defined child/field name and forget the renaming. 
       IF AttrFormals ^ . Kind = Tree . Formal 
       THEN 
         IF AttrFormals ^ . Formal . Name = FormalName 
         THEN (* Rename FormalName, possibly again. *) 
           ArrayToString ( "yy_Rename_" , LString1 ) ;
           GetString ( FormalName , LString2 ) ; 
           Concatenate ( LString1 , LString2 ) ; 
           LNewFormalName := MakeIdent ( LString1 ) ; 
           WriteS (f, "      "); WI ( LNewFormalName ) ; 
           WriteS (f, " = "); WI ( FormalName  ) ; WriteS (f, " ; "); 
           FormalName := LNewFormalName ; 
         ELSE 
         END (* IF *) ; 
     *) 
         IF Count = 0 THEN WriteS (f, "        "); ELSE WriteS (f, "      , "); END (* IF *) ; 
         INC ( Count ) ; 
         WI ( AttrFormals ^ . Formal . Name ) ; 
         WriteS (f, " = "); WritePath ( AttrFormals ^ . Formal . Path ) ; 
                 (* ^This is a TYPECASE-bound name *)
                 (* Its type is t ^ . OnePattern . Pattern ^ . Decompose . Object ^ . Class . Name  *)
         WriteS (f, " . "); WI ( AttrFormals ^ . Formal . Name ) ; 
                 (* *) 
         Tg2Attrs ( AttrFormals ^ . Formal . Next ) ; 
       END (* IF *) ; 
     END Tg2Attrs ;
   BEGIN (* Tg2 *) 
      IF (t^.Kind = Tree.NoPattern) OR (Formals^.Kind = Tree.NoFormal) THEN RETURN; END;
      CASE t^.OnePattern.Pattern^.Kind OF
      | Tree.Decompose:
         WriteS (f, "    WITH (* Renames *) "); WriteNl (f);
         Object := t^.OnePattern.Pattern^.Decompose.Object ; 
         Path := t^.OnePattern.Pattern^.Decompose.Path ; 
         Count := 0 ; 
         (* FormalName := PathPrefixIdent ( Path , Object ^ . Class . Name ) ; *)
           (* Formals ^ . Formal . Name might need to be renamed later. *) 
         Tg2Attrs ( Object ^ . Class . Formals ) ; 
         WriteS (f, "    DO (* Renames *) "); WriteNl (f);
      | Tree.VarDef, Tree.NilTest, Tree.Value, Tree.DontCare1Explicit, Tree.DontCare1Internal:
      ELSE RETURN;
      END;
      Tg2 (t^.OnePattern.Next, Formals^.Formal.Next);
   END Tg2;





























































PROCEDURE yyAbort (yyFunction: ARRAY OF CHAR);
 BEGIN
  IO.WriteS (IO.StdError, 'Error: module M3, routine ');
  IO.WriteS (IO.StdError, yyFunction);
  IO.WriteS (IO.StdError, ' failed');
  IO.WriteNl (IO.StdError);
  Exit;
 END yyAbort;

PROCEDURE yyIsEqual (yya, yyb: ARRAY OF SYSTEM.BYTE): BOOLEAN;
 VAR yyi	: INTEGER;
 BEGIN
  FOR yyi := 0 TO INTEGER (HIGH (yya)) DO
   IF yya [yyi] # yyb [yyi] THEN RETURN FALSE; END;
  END;
  RETURN TRUE;
 END yyIsEqual;

PROCEDURE MacroM3 (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.Spec:
(* line 495 "" *)
     WITH t^.Spec DO
(* line 495 "" *)
      
        MacroM3 (TreeNames);
;
      RETURN;
     END;

  | Tree.TreeName:
(* line 498 "" *)
     WITH t^.TreeName DO
(* line 498 "" *)
      
        WriteS (f, "# define begint"); WI (Name); WriteS (f, "(a)       a := NIL;"); WriteNl (f);
        WriteS (f, "# define equalt"); WI (Name); WriteS (f, "(a, b)    "); WI (Name); WriteS (f, ".IsEqual"); WI (Name); WriteS (f, " (a, b)"); WriteNl (f);
        MacroM3 (Next);
;
      RETURN;
     END;

  ELSE END;

 END MacroM3;

PROCEDURE Interface (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.Spec:
(* line 507 "" *)
     WITH t^.Spec DO
(* line 507 "" *)
      
        WriteNl (f);
        WriteS (f, "(* This file was mechanically generated by puma. *)"); WriteNl (f);
        WriteNl (f);
        WriteS (f, "INTERFACE "); WI (TrafoName); WriteS (f, ";"); WriteNl (f);
        WriteNl (f);
        WriteS (f, "IMPORT Wr , "); Interface (TreeNames); WriteS (f, ";"); WriteNl (f);
        WriteS (f, "    "); WriteLine (Codes^.Codes.ImportLine);
        WriteText (f, Codes^.Codes.Import);
        WriteNl (f);
        WriteS (f, "    "); WriteLine (Codes^.Codes.ExportLine);
        WriteText (f, Codes^.Codes.Export);
        WriteNl (f);
        WriteS (f, "VAR yyf        : Wr . T ;"); WriteNl (f);
        WriteS (f, "VAR Exit       : PROC;"); WriteNl (f);

        WriteNl (f);
        Interface (Public);
        WriteNl (f);
        WriteS (f, "PROCEDURE Begin"); WI (TrafoName); WriteS (f, " ( ) ;"); WriteNl (f);
        WriteS (f, "PROCEDURE Close"); WI (TrafoName); WriteS (f, " ( ) ;"); WriteNl (f);
        WriteNl (f);
        WriteS (f, "END "); WI (TrafoName); WriteS (f, "."); WriteNl (f);
        WriteNl (f);
;
      RETURN;
     END;

  | Tree.TreeName:
(* line 532 "" *)
     WITH t^.TreeName DO
(* line 532 "" *)
      
        WriteS (f, ", "); WI (Name);
        Interface (Next);
;
      RETURN;
     END;

  | Tree.Name:
(* line 536 "" *)
     WITH t^.Name DO
(* line 536 "" *)
      
        IF Object # NoTree THEN
           ListCount := 0;
           WriteS (f, "PROCEDURE "); WI (Name); WriteS (f, " ("); 
           Interface (Object^.Routine.InForm);
           Interface (Object^.Routine.OutForm);
           WriteS (f, ")"); 
           IF Object^.Kind = Tree.Predicate THEN
              WriteS (f, ": BOOLEAN"); 
           ELSIF Object^.Kind = Tree.Function THEN
              WriteS (f, ": "); Interface (Object^.Function.ReturnForm^.Formal.TypeDesc);
           END;
           WriteS (f, ";"); WriteNl (f);
        END;
        Interface (Next);
;
      RETURN;
     END;

  | Tree.Formal:
(* line 552 "" *)
     WITH t^.Formal DO
(* line 552 "" *)
      
        IF ListCount > 0 THEN WriteS (f, "; "); END;
        IF Path^.Var.IsOutput THEN WriteS (f, "VAR "); END;
        WI (Name); WriteS (f, ": "); 
        Interface (TypeDesc);
        INC (ListCount);
        Interface (Next);
;
      RETURN;
     END;

  | Tree.NodeTypes:
(* line 560 "" *)
     WITH t^.NodeTypes DO
(* line 560 "" *)
      
        WI (TreeName^.TreeName.Name); WriteS (f, " . "); WI (TreeName^.TreeName.Name);
;
      RETURN;
     END;

  | Tree.UserType:
(* line 563 "" *)
     WITH t^.UserType DO
(* line 563 "" *)
      
        WI (Type);
;
      RETURN;
     END;

  ELSE END;

 END Interface;

PROCEDURE NeedsWITHStmt (t: Tree.tTree): BOOLEAN;

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN FALSE; END;
(* line 570 "" *)
   LOOP
     WITH t^.Rule DO
(* line 570 "" *)
      IF NOT (( IsElement (ORD ('w'), Options) )) THEN EXIT; END;
(* line 571 "" *)
      IF NOT (( ( Statements^.Kind <> Tree.NoStatement ) 
                 OR ( Exprs^.Kind <> Tree.NoExpr ) 
                 OR ( Expr^.Kind <> Tree.NoExpr ) 
               )) THEN EXIT; END;
      RETURN TRUE;
     END;
   END (* LOOP *) ;

  RETURN FALSE;
 END NeedsWITHStmt;

PROCEDURE Module (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 | 5: yyR5: RECORD
  LTypeCaseDepth: CARDINAL;
  END;
 | 14: yyR14: RECORD
  LVar: tTree;
  END;
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.Spec:
(* line 581 "" *)
     WITH t^.Spec DO
(* line 581 "" *)
      
        WriteNl (f);
        WriteS (f, "(* This file was mechanically generated by puma. *)"); WriteNl (f);
        WriteNl (f);
        WriteS (f, "MODULE "); WI (TrafoName); WriteS (f, ";"); WriteNl (f);
        WriteNl (f);
        WriteS (f, "IMPORT Stdio , Process , "); Interface (TreeNames); WriteS (f, ";"); WriteNl (f);
        WriteS (f, "# define yyWrite(s) Wr.PutText (yyf, s)"); WriteNl (f);
        WriteS (f, "# define yyWriteNl Wr.PutText(yyf,Wr.EOL)"); WriteNl (f);
        WriteNl (f);
        WriteS (f, "    "); WriteLine (Codes^.Codes.GlobalLine);
        WriteText (f, Codes^.Codes.Global);
        WriteNl (f);
        WriteS (f, '# include "yy'); WI (TrafoName); WriteS (f, '.w"'); WriteNl (f);
        WriteNl (f);
        WriteS (f, "PROCEDURE yyAbort (yyFunction: TEXT);"); WriteNl (f);
        WriteS (f, " BEGIN"); WriteNl (f);
        WriteS (f, '  Wr . PutText (Stdio . stderr, "Error: module '); WI (TrafoName); WriteS (f, ', routine " ) ;'); WriteNl (f);
        WriteS (f, "  Wr . PutText (Stdio . stderr, yyFunction);"); WriteNl (f);
        WriteS (f, '  Wr . PutText (Stdio . stderr, " failed" ) ;'); WriteNl (f);
        WriteS (f, "  Wr . PutText (Stdio . stderr , Wr . EOL ) ;"); WriteNl (f);
        WriteS (f, "  Exit;"); WriteNl (f);
        WriteS (f, " END yyAbort;"); WriteNl (f);
        WriteNl (f);


        Module (Routines);
        WriteS (f, "PROCEDURE Begin"); WI (TrafoName); WriteS (f, " ( ) ;"); WriteNl (f);
        WriteS (f, "=BEGIN"); WriteNl (f);
        WriteS (f, "    "); WriteLine (Codes^.Codes.BeginLine);
        WriteText (f, Codes^.Codes.Begin);
        WriteNl (f);
        WriteS (f, " END Begin"); WI (TrafoName); WriteS (f, " ;"); WriteNl (f);
        WriteNl (f);
        WriteS (f, "PROCEDURE Close"); WI (TrafoName); WriteS (f, "( ) ;"); WriteNl (f);
        WriteS (f, "=BEGIN"); WriteNl (f);
        WriteS (f, "    "); WriteLine (Codes^.Codes.CloseLine);
        WriteText (f, Codes^.Codes.Close);
        WriteNl (f);
        WriteS (f, " END Close"); WI (TrafoName); WriteS (f, " ;"); WriteNl (f);
        WriteNl (f);
        WriteS (f, "PROCEDURE yyExit ( ) ;"); WriteNl (f);
        WriteS (f, "=BEGIN"); WriteNl (f);
        WriteS (f, "   Process . Exit ( 1 ) ;"); WriteNl (f);
        WriteS (f, " END yyExit ;"); WriteNl (f);
        WriteNl (f);
        WriteS (f, "BEGIN"); WriteNl (f);
        WriteS (f, " yyf   := Stdio . Stdout ;"); WriteNl (f);
        WriteS (f, " Exit  := yyExit;"); WriteNl (f);
        WriteS (f, " Begin"); WI (TrafoName); WriteS (f, " ( ) ;"); WriteNl (f);
        WriteS (f, "END "); WI (TrafoName); WriteS (f, "."); WriteNl (f);
        WriteNl (f);
        TypeCaseDepth := 0 ; 
;
      RETURN;
     END;

  | Tree.Procedure:
(* line 644 "" *)
     WITH t^.Procedure DO
(* line 644 "" *)
      
        ListCount := 0;
        WriteS (f, "PROCEDURE "); WI (Name); WriteS (f, " ( "); 
        Interface (InForm);
        Interface (OutForm);
        WriteS (f, " ) ="); WriteNl (f);
        WriteS (f, "    "); WriteLine (LocalLine);
        WriteText (f, Local);
        WriteNl (f);
        RoutineKind := kProcedure;
        InFormals := InForm;
        OutFormals := OutForm;
        WriteS (f, " BEGIN"); WriteNl (f);
      IF IsElement (ORD ('n'), Options) THEN
        Tg1 (InForm);
      END;
      IF IsElement (ORD ('b'), Options) THEN
        Module (Rules);
        IF IsElement (ORD ('f'), Options) THEN
           WriteS (f, '  yyAbort ( "'); WI (Name); WriteS (f, '" ) ;'); WriteNl (f);
        END;
      ELSE
        TemposDone := FALSE;
        CommonTestElim (Decisions);
        IF IsElement (ORD ('f'), Options) AND NOT NeedsNoFinale (Decisions) THEN
           WriteS (f, '  yyAbort ( "'); WI (Name); WriteS (f, '" ) ;'); WriteNl (f);
        END;
      END;
        WriteS (f, " END "); WI (Name); WriteS (f, " ;"); WriteNl (f);
        WriteNl (f);
        Module (Next);
;
      RETURN;
     END;

  | Tree.Function:
(* line 676 "" *)
     WITH t^.Function DO
(* line 676 "" *)
      
        ListCount := 0;
        WriteS (f, "PROCEDURE "); WI (Name); WriteS (f, " ( "); 
        Interface (InForm);
        Interface (OutForm);
        WriteS (f, " ) : "); Interface (ReturnForm^.Formal.TypeDesc); WriteS (f, "="); WriteNl (f);
        WriteS (f, "    "); WriteLine (LocalLine);
        WriteText (f, Local);
        WriteNl (f);
        RoutineKind := kFunction;
        InFormals := InForm;
        OutFormals := OutForm;
        ReturnFormals := ReturnForm;
        WriteS (f, " BEGIN"); WriteNl (f);
      IF IsElement (ORD ('b'), Options) THEN
        Module (Rules);
        WriteS (f, '  yyAbort ( "'); WI (Name); WriteS (f, '" ) ;'); WriteNl (f);
      ELSE
        TemposDone := FALSE;
        CommonTestElim (Decisions);
        IF NOT NeedsNoFinale (Decisions) THEN
           WriteS (f, '  yyAbort (" '); WI (Name); WriteS (f, '" ) ;'); WriteNl (f);
        END;
      END;
        WriteS (f, " END "); WI (Name); WriteS (f, " ;"); WriteNl (f);
        WriteNl (f);
        Module (Next);
;
      RETURN;
     END;

  | Tree.Predicate:
(* line 704 "" *)
     WITH t^.Predicate DO
(* line 704 "" *)
      
        ListCount := 0;
        WriteS (f, "PROCEDURE "); WI (Name); WriteS (f, " ( "); 
        Interface (InForm);
        Interface (OutForm);
        WriteS (f, " ) : BOOLEAN = "); WriteNl (f);
        WriteS (f, "    "); WriteLine (LocalLine);
        WriteText (f, Local);
        WriteNl (f);
        RoutineKind := kPredicate;
        InFormals := InForm;
        OutFormals := OutForm;
        WriteS (f, " BEGIN"); WriteNl (f);
      IF IsElement (ORD ('n'), Options) THEN
        Tg1 (InForm);
      END;
      IF IsElement (ORD ('b'), Options) THEN
        Module (Rules);
        WriteS (f, "  RETURN FALSE;"); WriteNl (f);
      ELSE
        TemposDone := FALSE;
        CommonTestElim (Decisions);
        IF NOT NeedsNoFinale (Decisions) THEN
           WriteS (f, "  RETURN FALSE;"); WriteNl (f);
        END;
      END;
        WriteS (f, " END "); WI (Name); WriteS (f, " ;"); WriteNl (f);
        WriteNl (f);
        Module (Next);
;
      RETURN;
     END;

  | Tree.Rule:
(* line 734 "" *)
    WITH yyTempo.yyR5 DO  
     WITH t^.Rule DO
(* line 735 "" *)
      ;
(* line 736 "" *)
      
        WriteS (f, "    "); WriteLine (Line);
        IF HasTempos 
        THEN 
          WriteS (f, "    (* Tempo declarations: *)"); 
          Declare ( t ) ; 
          WriteS (f, "    BEGIN (* Block of Tempo declarations *)"); WriteNl (f);
        END;
        WriteS (f, "   LOOP"); WriteNl (f);
        Decls := VarDecls;
        LTypeCaseDepth := TypeCaseDepth ; 
        Match (Patterns, InFormals);
      IF NeedsWITHStmt ( t ) 
      THEN 
        Tg2 (Patterns, InFormals);
      END;
        Module (Statements);
        IF NOT HasRejectOrFail THEN
           AssignFormals (Exprs, OutFormals , NoIdent );
           MatchExprs (Exprs);
           CASE RoutineKind OF
           | kProcedure: WriteS (f, "      RETURN;"); WriteNl (f);

           | kFunction :
              AssignTempo (Expr);
              IF HasPatterns AND (Expr^.Kind # Tree.Compose) AND NOT Tree . IsType ( t , Tree.DontCare1 ) THEN
                                                                  
                 WriteS (f, "      "); WI (Tempo); WriteS (f, " := "); Expression (Expr); WriteS (f, ";"); WriteNl (f);
                 MatchExpr (Expr);
                 WriteS (f, "      RETURN "); WI (Tempo); WriteS (f, ";"); WriteNl (f);
              ELSE
                 MatchExpr (Expr);
                 WriteS (f, "      RETURN "); Expression (Expr); WriteS (f, ";"); WriteNl (f);
              END;

           | kPredicate: WriteS (f, "      RETURN TRUE;"); WriteNl (f);
           END;
        END;
        CloseTypeCases ( LTypeCaseDepth ) ; 
      IF NeedsWITHStmt ( t ) 
      THEN 
        Tg3 (Patterns);
      END;
        WriteS (f, "   END (* LOOP *) ;"); WriteNl (f);
        IF HasTempos THEN WriteS (f, "    END (* Block of Tempo declarations *) ;"); WriteNl (f);
        END;
        WriteNl (f);
        Module (Next);
;
      RETURN;
     END;
    END (* WITH yyTempos.yyR ... *) ;  

  | Tree.ProcCall:
(* line 785 "" *)
     WITH t^.ProcCall DO
(* line 786 "" *)
      
        WriteS (f, "      "); WriteLine (Pos);
        AssignTempo (Call);
        WriteS (f, "      "); Expression (Call); WriteS (f, ";"); WriteNl (f);
        MatchExpr (Call);
        Module (Next);
;
      RETURN;
     END;

  | Tree.Condition:
(* line 793 "" *)
     WITH t^.Condition DO
(* line 794 "" *)
      
        WriteS (f, "      "); WriteLine (Pos);
        AssignTempo (Expr);
        WriteS (f, "      IF NOT ( "); Expression (Expr); WriteS (f, " ) THEN EXIT END (* IF *) ;"); WriteNl (f);
        MatchExpr (Expr);
        Module (Next);
;
      RETURN;
     END;

  | Tree.Assignment:
(* line 801 "" *)
     WITH t^.Assignment DO
(* line 802 "" *)
      
        WriteS (f, "      "); WriteLine (Pos);
        AssignTempo (Adr);
        AssignTempo (Expr);
        IF Object # NoTree THEN
           WriteS (f, "      "); WritePath (Object^.Formal.Path);
        ELSE
           WriteS (f, "      "); Expression (Adr);
        END;
        WriteS (f, " := "); Expression (Expr); WriteS (f, " ;"); WriteNl (f);
        MatchExpr (Adr);
        MatchExpr (Expr);
        Module (Next);
;
      RETURN;
     END;

  | Tree.Reject:
(* line 816 "" *)
     WITH t^.Reject DO
(* line 816 "" *)
      
        WriteS (f, "      "); WriteLine (Pos);
        WriteS (f, "      EXIT;"); WriteNl (f);
;
      RETURN;
     END;

  | Tree.Fail:
(* line 820 "" *)
     WITH t^.Fail DO
(* line 820 "" *)
      
        WriteS (f, "      "); WriteLine (Pos);
        WriteS (f, "      RETURN "); IF RoutineKind = kPredicate THEN WriteS (f, "FALSE "); END; WriteS (f, ";"); WriteNl (f);
;
      RETURN;
     END;

  | Tree.TargetStmt:
(* line 824 "" *)
     WITH t^.TargetStmt DO
(* line 824 "" *)
      
        WriteS (f, "      "); WriteLine (Pos);
        WriteS (f, "      "); Module (Stmt); WriteS (f, ";"); WriteNl (f);
        Module (Next);
;
      RETURN;
     END;

  | Tree.Nl:
(* line 829 "" *)
     WITH t^.Nl DO
(* line 829 "" *)
      
        WriteS (f, "      "); WriteLine (Pos);
        WriteS (f, "      yyWriteNl;"); WriteNl (f);
        Module (Next);
;
      RETURN;
     END;

  | Tree.WriteStr:
(* line 834 "" *)
     WITH t^.WriteStr DO
(* line 834 "" *)
      
        WriteS (f, "      "); WriteLine (Pos);
        WriteS (f, "      yyWrite ( "); WriteString (f, String); WriteS (f, " ) ;"); WriteNl (f);
        Module (Next);
;
      RETURN;
     END;

  | Tree.Ident:
(* line 839 "" *)
    WITH yyTempo.yyR14 DO  
     WITH t^.Ident DO
(* line 839 "" *)
      ;
(* line 839 "" *)
      
        LVar := IdentifyVar (Decls, Attribute);
        IF LVar # NoTree THEN WritePath (LVar^.Formal.Path); ELSE WI (Attribute); END;
        Module (Next);
;
      RETURN;
     END;
    END (* WITH yyTempos.yyR ... *) ;  

  | Tree.Any:
(* line 844 "" *)
     WITH t^.Any DO
(* line 844 "" *)
      
        StringMem . WriteString (f, Code);  
        Module (Next);
;
      RETURN;
     END;

  | Tree.Anys:
(* line 848 "" *)
     WITH t^.Anys DO
(* line 848 "" *)
      
        Module (Layouts);
        Module (Next);
;
      RETURN;
     END;

  | Tree.LayoutAny:
(* line 852 "" *)
     WITH t^.LayoutAny DO
(* line 852 "" *)
      
        StringMem . WriteString (f, Code);  
        Module (Next);
;
      RETURN;
     END;

  | Tree.Designator:
(* line 856 "" *)
     WITH t^.Designator DO
(* line 856 "" *)
      
        WritePath (Object^.Formal.Path); WriteS (f, "_yy_"); WI ( Type ) ; WriteS (f, " . "); WI (Attribute);
        Module (Next);
;
      RETURN;
     END;

  | Tree.Field:
(* line 860 "" *)
     WITH t^.Field DO
(* line 860 "" *)
      
      Errors . MessageI
        ( 'Assertion failure: Module called on Field' 
        , Errors . Fatal 
        , Positions . NoPosition 
        , Errors . Ident
        , SYSTEM . ADR ( Name )  
        ) 
        Module (Next);
        WriteS (f, "."); WI (Name);
;
      RETURN;
     END;

  | Tree.ConsType:
(* line 871 "" *)
     WITH t^.ConsType DO
(* line 871 "" *)
      
      Errors . MessageI
        ( 'Assertion failure: Module called on ConsType' 
        , Errors . Fatal 
        , Positions . NoPosition 
        , Errors . Ident
        , SYSTEM . ADR ( Name )  
        ) 
        Module (Next);
        WriteS (f, "^."); WI (Name);
;
      RETURN;
     END;

  | Tree.Var:
(* line 882 "" *)
     WITH t^.Var DO
(* line 882 "" *)
      
      Errors . MessageI
        ( 'Assertion failure: Module called on Var' 
        , Errors . Fatal 
        , Positions . NoPosition 
        , Errors . Ident
        , SYSTEM . ADR ( Name )  
        ) 
        WI (Name);
;
      RETURN;
     END;

  | Tree.NodeTypes:
(* line 892 "" *)
     WITH t^.NodeTypes DO
(* line 892 "" *)
      
        WI (TreeName^.TreeName.Name);
;
      RETURN;
     END;

  | Tree.UserType:
(* line 895 "" *)
     WITH t^.UserType DO
(* line 895 "" *)
      
        WI (Type);
;
      RETURN;
     END;

  ELSE END;

 END Module;

PROCEDURE PathPrefix (Path: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF Path = Tree.NoTree THEN RETURN; END;

  CASE Path^.Kind OF
  | Tree.Field:
(* line 901 "" *)
     WITH Path^.Field DO
(* line 901 "" *)
      
        PathPrefix (Next);
        WriteS (f, "_y_"); WI (Name);
;
      RETURN;
     END;

  | Tree.ConsType:
(* line 905 "" *)
     WITH Path^.ConsType DO
(* line 905 "" *)
      
        PathPrefix (Next);
        WriteS (f, "_yy_"); WI (Name);
;
      RETURN;
     END;

  | Tree.Var:
(* line 909 "" *)
     WITH Path^.Var DO
(* line 909 "" *)
      
        WI (Name);
;
      RETURN;
     END;

  ELSE END;

  IF (Tree.IsEqualTree ( Path ,    () ) ) THEN
(* line 912 "" *)
(* line 912 "" *)
      
      Errors . MessageI
        ( 'Assertion failure: PathPrefix, bad node kind' 
        , Errors . Fatal 
        , Positions . NoPosition 
        , Errors . Iinteger
        , SYSTEM . ADR ( Kind )  
        ) 
;
      RETURN;

  END;
 END PathPrefix;

PROCEDURE WritePath (Path: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF Path = Tree.NoTree THEN RETURN; END;

  CASE Path^.Kind OF
  | Tree.Field:
(* line 925 "" *)
     WITH Path^.Field DO
(* line 925 "" *)
      
        PathPrefix (Next);
        WriteS (f, "."); WI (Name);
;
      RETURN;
     END;

  | Tree.Var:
(* line 929 "" *)
     WITH Path^.Var DO
(* line 929 "" *)
      
        WI (Name);
;
      RETURN;
     END;

  ELSE END;

  IF (Tree.IsEqualTree ( Path ,    () ) ) THEN
(* line 932 "" *)
(* line 932 "" *)
      
      Errors . MessageI
        ( 'Assertion failure: WritePath, bad node kind' 
        , Errors . Fatal 
        , Positions . NoPosition 
        , Errors . Iinteger
        , SYSTEM . ADR ( Kind )  
        ) 
;
      RETURN;

  END;
 END WritePath;

PROCEDURE Declare (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 | 2: yyR2: RECORD
  LVar: tTree;
  END;
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.Formal:
(* line 945 "" *)
     WITH t^.Formal DO
(* line 945 "" *)
      
        WriteS (f, "  "); WI (Name); WriteS (f, " : "); Interface (TypeDesc); WriteS (f, " ;"); WriteNl (f);
        Declare (Next);
;
      RETURN;
     END;

  | Tree.Param:
(* line 949 "" *)
    WITH yyTempo.yyR2 DO  
     WITH t^.Param DO
(* line 949 "" *)
      ;
(* line 949 "" *)
      
        LVar := IdentifyVar (Decls, Name);
        WriteS (f, "  "); WI (Name); WriteS (f, " : "); Interface (LVar^.Formal.TypeDesc); WriteS (f, " ;"); WriteNl (f);
        Declare (Next);
;
      RETURN;
     END;
    END (* WITH yyTempos.yyR ... *) ;  

  | Tree.Rule:
(* line 954 "" *)
     WITH t^.Rule DO
(* line 954 "" *)
      
        IF HasTempos THEN
           Decls := VarDecls;
           Declare (Patterns);
           Declare (Exprs);
           IF RoutineKind = kFunction THEN
              Declare (Expr);
              IF HasPatterns AND (Expr^.Kind # Tree.Compose) 
                 AND NOT Tree . IsType ( t , Tree.DontCare1 ) THEN
                          
                          
                 WriteS (f, "  "); WI (Tempo); WriteS (f, " : "); Interface (ReturnFormals^.Formal.TypeDesc); WriteS (f, " ;"); WriteNl (f);
              END;
           END;
           Declare (Statements);
        END;
;
      RETURN;
     END;

  | Tree.ProcCall:
(* line 971 "" *)
     WITH t^.ProcCall DO
(* line 971 "" *)
      
        Declare (Call);
        Declare (Next);
;
      RETURN;
     END;

  | Tree.Condition:
(* line 975 "" *)
     WITH t^.Condition DO
(* line 975 "" *)
      
        Declare (Expr);
        Declare (Next);
;
      RETURN;
     END;

  | Tree.Assignment:
(* line 979 "" *)
     WITH t^.Assignment DO
(* line 979 "" *)
      
        Declare (Adr);
        Declare (Expr);
        Declare (Next);
;
      RETURN;
     END;

  | Tree.TargetStmt:
(* line 984 "" *)
     WITH t^.TargetStmt DO
(* line 984 "" *)
      
        Declare (Parameters);
        Declare (Next);
;
      RETURN;
     END;

  | Tree.Statement
  , Tree.Reject
  , Tree.Fail
  , Tree.Nl
  , Tree.WriteStr:
(* line 988 "" *)
     WITH t^.Statement DO
(* line 988 "" *)
      
        Declare (Next);
;
      RETURN;
     END;

  | Tree.OnePattern:
(* line 991 "" *)
     WITH t^.OnePattern DO
(* line 991 "" *)
      
        IF (Pattern^.Pattern.Tempo # NoIdent) AND NOT Tree . IsType ( Pattern , Tree.DontCare1 ) THEN
           WriteS (f, "  "); WI (Pattern^.Pattern.Tempo); WriteS (f, " : "); Interface (Pattern^.Pattern.TypeDesc); WriteS (f, " ;"); WriteNl (f);
        END;
        Declare (Pattern);
        Declare (Next);
;
      RETURN;
     END;

  | Tree.OneExpr
  , Tree.NamedExpr:
(* line 998 "" *)
     WITH t^.OneExpr DO
(* line 998 "" *)
      
        Declare (Expr);
        Declare (Next);
;
      RETURN;
     END;

  | Tree.Decompose:
(* line 1002 "" *)
     WITH t^.Decompose DO
(* line 1002 "" *)
      
        Declare (Patterns);
;
      RETURN;
     END;

  | Tree.DontCare
  , Tree.DontCareExplicit
  , Tree.DontCareInternal:
(* line 1005 "" *)
     WITH t^.DontCare DO
(* line 1005 "" *)
      
        Declare (Tempos);
;
      RETURN;
     END;

  | Tree.DontCare1
  , Tree.DontCare1Explicit
  , Tree.DontCare1Internal:
(* line 1008 "" *)
     WITH t^.DontCare1 DO
(* line 1008 "" *)
      
        IF Tempo # NoIdent THEN
           WriteS (f, "  "); WI (Tempo); WriteS (f, " : "); Interface (TypeDesc); WriteS (f, " ;"); WriteNl (f);
        END;
;
      RETURN;
     END;

  | Tree.Value:
(* line 1013 "" *)
     WITH t^.Value DO
(* line 1013 "" *)
      
        Declare (Expr);
;
      RETURN;
     END;

  | Tree.Compose:
(* line 1016 "" *)
     WITH t^.Compose DO
(* line 1016 "" *)
      
        IF Tempo # NoIdent THEN
           WriteS (f, "  "); WI (Tempo); WriteS (f, " : ");  
                                  
                               WI ( Object^.Class.Name ) ; 
                               WriteS (f, " ;"); WriteNl (f);
        END;
        Declare (Exprs);
;
      RETURN;
     END;

  | Tree.Call:
(* line 1026 "" *)
     WITH t^.Call DO
(* line 1026 "" *)
      
        Declare (Expr);
        Declare (Exprs);
        Declare (Patterns);
;
      RETURN;
     END;

  | Tree.Binary
  , Tree.yy1
  , Tree.BinaryCompound:
(* line 1031 "" *)
     WITH t^.Binary DO
(* line 1031 "" *)
      
        Declare (Lop);
        Declare (Rop);
;
      RETURN;
     END;

  | Tree.PreOperator:
(* line 1035 "" *)
     WITH t^.PreOperator DO
(* line 1037 "" *)
      
        Declare (Expr); 
;
      RETURN;
     END;

  | Tree.PostOperator:
(* line 1035 "" *)
     WITH t^.PostOperator DO
(* line 1037 "" *)
      
        Declare (Expr); 
;
      RETURN;
     END;

  | Tree.Parents:
(* line 1035 "" *)
     WITH t^.Parents DO
(* line 1037 "" *)
      
        Declare (Expr); 
;
      RETURN;
     END;

  | Tree.Index:
(* line 1040 "" *)
     WITH t^.Index DO
(* line 1040 "" *)
      
        Declare (Expr);
        Declare (Exprs);
;
      RETURN;
     END;

  ELSE END;

 END Declare;

PROCEDURE Tg1 (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.Formal:
(* line 1048 "" *)
     WITH t^.Formal DO
(* line 1048 "" *)
      
        TheName := Name;
        Tg1 (TypeDesc);
        Tg1 (Next);
;
      RETURN;
     END;

  | Tree.NodeTypes:
(* line 1053 "" *)
     WITH t^.NodeTypes DO
(* line 1053 "" *)
      
        WriteS (f, "  IF "); WI (TheName); WriteS (f, " = "); WI (TreeName^.TreeName.Name); WriteS (f, " . No"); 
        WI (TreeName^.TreeName.Name); WriteS (f, " THEN RETURN "); IF RoutineKind = kPredicate THEN WriteS (f, "FALSE "); END; WriteS (f, " ; END (* IF *) ;"); WriteNl (f);
;
      RETURN;
     END;

  ELSE END;

 END Tg1;

PROCEDURE Tg3 (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.OnePattern:
(* line 1061 "" *)
     WITH t^.OnePattern DO
(* line 1061 "" *)
      
        Tg3 (Pattern);
        Tg3 (Next);
;
      RETURN;
     END;

  | Tree.Decompose:
(* line 1065 "" *)
     WITH t^.Decompose DO
(* line 1065 "" *)
      
        WriteS (f, "     END (* WITH Renames *) ;"); WriteNl (f);
;
      RETURN;
     END;

  ELSE END;

 END Tg3;

PROCEDURE CommonTestElim2 (OneTest: Tree.tTree; yyP1: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 | 1: yyR1: RECORD
  LTypeCaseDepth: CARDINAL;
  END;
 END; END;
 BEGIN
  IF OneTest = Tree.NoTree THEN RETURN; END;
  IF yyP1 = Tree.NoTree THEN RETURN; END;
  IF (OneTest^.Kind = Tree.TestValue) THEN
(* line 1071 "" *)
    WITH yyTempo.yyR1 DO  
   LOOP
     WITH OneTest^.TestValue DO
(* line 1072 "" *)
      IF NOT ((NeedsMatch (Expr))) THEN EXIT; END;
(* line 1073 "" *)
      ;
(* line 1075 "" *)
      CommonTestElim (OneTest);
(* line 1076 "" *)
      WriteS (f, "    LOOP");
(* line 1076 "" *)
      WriteNl (f);
(* line 1077 "" *)
      LTypeCaseDepth := TypeCaseDepth;
(* line 1078 "" *)
      MatchExpr (OneTest ^ . TestValue . Expr);
(* line 1079 "" *)
      CommonTestElim (yyP1);
(* line 1080 "" *)
      CloseTypeCases (LTypeCaseDepth);
(* line 1081 "" *)
      WriteS (f, "    EXIT; END (* LOOP *) ; ");
(* line 1081 "" *)
      WriteNl (f);
      RETURN;
     END;
   END (* LOOP *) ;
    END (* WITH yyTempos.yyR ... *) ;  

  END;
(* line 1083 "" *)
(* line 1084 "" *)
      CommonTestElim (OneTest);
(* line 1085 "" *)
      CommonTestElim (yyP1);
      RETURN;

 END CommonTestElim2;

PROCEDURE CommonTestElim (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 | 8: yyR8: RECORD
  LTypeCaseDepth: CARDINAL;
  END;
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.Decision:
(* line 1090 "" *)
     WITH t^.Decision DO
(* line 1090 "" *)
      
        IF Cases = 0 THEN
           IF NOT TemposDone AND (OneTest^.Kind = Tree.TestValue) AND NeedsTempo (ThenPart, rule) THEN
              WriteS (f, "    (* Tempo declarations: *)"); 
              Declare ( t ) ; 
              WriteS (f, "    BEGIN (* Block of Tempo declarations *)"); WriteNl (f);
              TemposDone := TRUE;
              CommonTestElim2 (OneTest, ThenPart);
              WriteS (f, "      END (* TYPECASE Depth "); WN ( TypeCaseDepth ) ; WriteS (f, " , Decision *)"); 
              DEC ( TypeCaseDepth ) 
              WriteS (f, "    END (* Block of Tempo declarations  *) ; "); WriteNl (f);
           ELSE
              GetRule (ThenPart, rule);
              Decls := rule^.Rule.VarDecls;
              CommonTestElim2 (OneTest, ThenPart);
              WriteS (f, "      END (* TYPECASE Depth "); WN ( TypeCaseDepth ) ; WriteS (f, " , Decision *)"); 
              DEC ( TypeCaseDepth ) 
           END;
           TemposDone := FALSE;
           CommonTestElim (ElsePart);
        ELSE
           i := Cases; Case (t);
        END;
;
      RETURN;
     END;

  | Tree.Decided:
(* line 1114 "" *)
     WITH t^.Decided DO
(* line 1114 "" *)
      
        CommonTestElim (Rule);
        IF Rule^.Rule.HasExit THEN
           TemposDone := FALSE;
           CommonTestElim (ElsePart);
        END;
;
      RETURN;
     END;

  | Tree.TestKind:
(* line 1121 "" *)
     WITH t^.TestKind DO
(* line 1121 "" *)
      
        INC ( TypeCaseDepth ) ; 
        WriteS (f, "      TYPECASE ");  WritePath ( Path ); WriteS (f, " (* Depth "); WN ( TypeCaseDepth ) ; WriteS (f, " , Decision *)"); 
        WriteS (f, "      OF "); WI (TypeDesc^.NodeTypes.TreeName^.TreeName.Name); WriteS (f, " . "); WI (Name);  
                  WriteS (f, " ( "); PathPrefix (Path); WriteS (f, "_yy_"); WI ( Name ) ; WriteS (f, " ) "); WriteNl (f);
        WriteS (f, "      => ");  
;
      RETURN;
     END;

  | Tree.TestIsType:
(* line 1128 "" *)
     WITH t^.TestIsType DO
(* line 1128 "" *)
      
        INC ( TypeCaseDepth ) ; 
        WriteS (f, "      TYPECASE ");  WritePath ( Path ); WriteS (f, " (* Depth "); WN ( TypeCaseDepth ) ; WriteS (f, " , Decision *)"); 
        WriteS (f, "      OF "); WI (TypeDesc^.NodeTypes.TreeName^.TreeName.Name); WriteS (f, " . "); WI (Name);  
                  WriteS (f, " ( "); PathPrefix (Path); WriteS (f, "_yy_"); WI ( Name ) ; WriteS (f, " ) "); WriteNl (f);
        WriteS (f, "      => ");  
;
      RETURN;
     END;

  | Tree.TestNil:
(* line 1135 "" *)
     WITH t^.TestNil DO
(* line 1135 "" *)
      
        WriteS (f, "  IF "); WritePath ( Path ); WriteS (f, " = NIL THEN"); WriteNl (f);
;
      RETURN;
     END;

  | Tree.TestNonlin:
(* line 1138 "" *)
     WITH t^.TestNonlin DO
(* line 1138 "" *)
      
        WriteS (f, "  IF (equal"); Module (TypeDesc); WriteS (f, " ( "); WritePath ( Path );
        WriteS (f, " , "); WritePath (Path2); WriteS (f, " ) ) THEN"); WriteNl (f);
;
      RETURN;
     END;

  | Tree.TestValue:
(* line 1142 "" *)
     WITH t^.TestValue DO
(* line 1142 "" *)
      
        AssignTempo (Expr);
        WriteS (f, "  IF (equal"); Module (TypeDesc); WriteS (f, " ( "); WritePath ( Path );
        WriteS (f, " , "); Expression (Expr); WriteS (f, " ) ) THEN"); WriteNl (f);
;
      RETURN;
     END;

  | Tree.Rule:
(* line 1147 "" *)
    WITH yyTempo.yyR8 DO  
     WITH t^.Rule DO
(* line 1148 "" *)
      ;
(* line 1149 "" *)
      
        WriteS (f, "    "); WriteLine (Line);
        IF HasTempos AND NOT TemposDone 
        THEN 
          WriteS (f, "    (* Tempo declarations: *)"); 
          Declare ( t ) ; 
          WriteS (f, "    BEGIN (* Block of Tempo declarations *)"); WriteNl (f);
        END;
        IF HasExit THEN WriteS (f, "   LOOP"); WriteNl (f);
        END;
        Decls := VarDecls;
      IF NeedsWITHStmt ( t ) 
      THEN 
        Tg2 (Patterns, InFormals);
      END;
        LTypeCaseDepth := TypeCaseDepth ; 
        Module (Statements);
        IF NOT HasRejectOrFail THEN
           AssignFormals (Exprs, OutFormals , NoIdent );
           MatchExprs (Exprs);
           CASE RoutineKind OF
           | kProcedure: WriteS (f, "      RETURN ;"); WriteNl (f);

           | kFunction :
              AssignTempo (Expr);
              IF HasPatterns AND (Expr^.Kind # Tree.Compose) AND NOT Tree . IsType ( t , Tree.DontCare1 ) THEN
                 WriteS (f, "      "); WI (Tempo); WriteS (f, " := "); Expression (Expr); WriteS (f, " ;"); WriteNl (f);
                 MatchExpr (Expr);
                 WriteS (f, "      RETURN "); WI (Tempo); WriteS (f, " ;"); WriteNl (f);
              ELSE
                 MatchExpr (Expr);
                 WriteS (f, "      RETURN "); Expression (Expr); WriteS (f, " ;"); WriteNl (f);
              END;

           | kPredicate: WriteS (f, "      RETURN TRUE ;"); WriteNl (f);
           END;
        END;
        CloseTypeCases ( LTypeCaseDepth ) ; 
      IF NeedsWITHStmt ( t ) 
      THEN 
        Tg3 (Patterns);
      END;
        IF HasExit THEN WriteS (f, "   END (* LOOP *) ;"); WriteNl (f);
        END;
        IF HasTempos AND NOT TemposDone 
        THEN 
          WriteS (f, "    END (* Block of Tempo declarations  *) ;  "); WriteNl (f);
        END;
        WriteNl (f);
;
      RETURN;
     END;
    END (* WITH yyTempos.yyR ... *) ;  

  ELSE END;

 END CommonTestElim;

PROCEDURE Case (t: Tree.tTree);

 VAR yyTempo: RECORD CASE : INTEGER OF
 | 1: yyR1: RECORD
  n: CARDINAL;
  END;
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.Decision:
(* line 1203 "" *)
    WITH yyTempo.yyR1 DO  
     WITH t^.Decision DO
(* line 1203 "" *)
      ;
(* line 1203 "" *)
      
        WriteNl (f);
        WriteS (f, "  TYPECASE "); WritePath (OneTest^.OneTest.Path); WriteS (f, " OF"); WriteNl (f);
        n := i;
        WHILE n > 0 DO
           IF NOT IsEmpty (t^.Decision.OneTest^.TestIsType.TypeDesc^.NodeTypes.Types) THEN
              Case (t^.Decision.OneTest);
              CommonTestElim (t^.Decision.ThenPart);
           END;
           t := t^.Decision.ElsePart;
           DEC (n);
        END;
        WriteS (f, "  ELSE END (* TYPECASE *) ;"); WriteNl (f);
        WriteNl (f);
        CommonTestElim (t);
;
      RETURN;
     END;
    END (* WITH yyTempos.yyR ... *) ;  

  | Tree.TestKind:
(* line 1219 "" *)
     WITH t^.TestKind DO
(* line 1219 "" *)
      
        WriteS (f, "  | "); WI (TypeDesc^.NodeTypes.TreeName^.TreeName.Name); WriteS (f, " . "); WI (Name); 
               WriteS (f, " ( "); PathPrefix (Path); WriteS (f, "_yy_"); WI ( Name ); WriteS (f, " ) => "); WriteNl (f);
;
      RETURN;
     END;

  | Tree.TestIsType:
(* line 1223 "" *)
     WITH t^.TestIsType DO
(* line 1223 "" *)
      
        WriteS (f, "  | "); WI (TypeDesc^.NodeTypes.TreeName^.TreeName.Name); WriteS (f, " . "); WI (Name); 
               WriteS (f, " ( "); PathPrefix (Path); WriteS (f, "_yy_"); WI ( Name ); WriteS (f, " ) => "); WriteNl (f);
;
      RETURN;
     END;

  ELSE END;

 END Case;

PROCEDURE BeginM3;
 BEGIN

 END BeginM3;

PROCEDURE CloseM3;
 BEGIN

 END CloseM3;

PROCEDURE yyExit;
 BEGIN
  IO.CloseIO; System.Exit (1);
 END yyExit;

BEGIN
 yyf	:= IO.StdOutput;
 Exit	:= yyExit;
 BeginM3;
END M3.

