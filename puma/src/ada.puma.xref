     1 
     2 (* Ich, Doktor Josef Grosch, Informatiker, 29.4.1991 *)
     3 (* Rodney M. Bates Jan '96 *) 
     4 (* File Ada.puma: generate Ada code. Extensively modified from Mod.puma *) 
     5 (* Modified, RMB: 
c    6     3-97 Fixed a generation bug which put Ada parameter IN OUT mode in
c    7          the wrong place. 
c    8     3-97 To put the renaming declarations (-w option, equivalent of Modula-2's
c    9          WITH statement) in when there is a return expr or result
c   10          parameter exprs. 
c   11     4-97 Fixed a generation error when a renaming decl of a field (-w option) 
c   12          has the same name as the pointer to the containing node. 
c   13     5-97 To work with explicit/internal distinguished dont cares. 
c   14     5-97 Added writing a blank line after each call to WriteText, which
c   15          can leave things not at BOL if the target code section is
c   16          omitted.  This caused a bug in the case of GLOBAL, which is
c   17          followed by a # include, which cpp misses if not at BOL. 
c   18     6-97 Added writing of Ada compound operators (AND THEN, OR ELSE)
c   19          from BinaryCompound nodes. 
c   20     6-97 Rename 'Then' to 'ThenPart' and 'Else' to 'ElsePart',
c   21          to avoid conflicts with new case-insensitive recognition
c   22          by puma of Ada operators THEN and ELSE 
c   23     7-97 Further fixes on the problem of 4-97.
c   24     1-98 Fixed -w option (Tg2,Tg3) to generate the renames for all
c   25          nested patterns. 
c   26    10-98 Changes to go with new subtype RoutineFormal. 
c   27     7-99 Added 'VAR' to local declarations of rules. 
c   28     7-99 Took Var, ConsType, and Field out of PackBody and put into
c   29          WritePath, for special handling to ignore a ConsType at the
c   30          top (i.e. right end) of a path.  I have changed Semantics to
c   31          produce these, which are of interest only to object oriented
c   32          target language generation.
c   33 
c   34 *) 
    35 
    36 TRAFO Ada                                                                     *     *
    37 TREE Tree                                                                     *     *
    38 PUBLIC PackSpec PackBody MacroAda                                             *     *     *     *
    39 
    40 GLOBAL {                                                                      *
    41 
    42 FROM Positions  IMPORT tPosition;                                             *     *     *     *
    43 FROM IO         IMPORT StdOutput, WriteS, WriteNl;                           42     *    42     *     *     *
    44 FROM StringMem  IMPORT WriteString;                                          43     *    43     *
    45 FROM Strings    IMPORT tString, IntToString, ArrayToString, Concatenate;     44     *    44     *     *     *     *
    46 FROM Idents     IMPORT tIdent, NoIdent, MakeIdent, GetString;                45     *    45     *     *     *     *
    47 FROM Texts      IMPORT WriteText;                                            46     *    46     *
    48 FROM Sets       IMPORT IsElement, IsNotEqual, Minimum, Maximum, IsEmpty;     47     *    47     *     *     *     *     *
    49 FROM Semantics  IMPORT IdentifyVar, LookupClass;                             48     *    48     *     *
    50 FROM Optimize   IMPORT NeedsTempo, NeedsMatch, NeedsNoFinale, GetRule;       49     *    49     *     *     *     *
    51 FROM Tree       IMPORT NoTree, tTree, Options, f, SourceFile, WI, WN;        50    37    50     *     *     *     *     *
                                                                                     *     *
    52 FROM Assertions IMPORT Assert, AssertPos, CantHappen, CantHappenPos;         51     *    51     *     *     *     *
    53 
    54 VAR                                                                           *
    55    RoutineKind  : (kProcedure, kFunction, kPredicate);                        *     *     *     *
    56    i, j         : CARDINAL;                                                   *     *     *
    57    ListCount    ,                                                             *
    58    WithCount    : INTEGER;                                                    *     *
    59    rule         ,                                                             *
    60    TheClass     ,                                                             *
    61    InFormals    ,                                                             *
    62    OutFormals   ,                                                             *
    63    ReturnFormals,                                                             *
    64    Decls        : tTree;                                                      *    51
    65    TheName      : tIdent;                                                     *    46
    66    TemposDone   : BOOLEAN;                                                    *     *
    67 
    68 PROCEDURE WriteLine (Line: tPosition);                                        *     *     *    42
    69    BEGIN                                                                      *
    70       IF Line.Line # 0 THEN                                                   *    68     *     *
    71          !-- line ! WN (Line.Line); @, file "@ WriteS (f, SourceFile); @" @         *    51    70     *     *
    72       END;                                                                    *
    73    END WriteLine;                                                            72    68
    74 
    75 PROCEDURE Match (t, Formals: tTree);                                         68     *     *     *    64
    76    VAR TreeName : tIdent;                                                    54     *    65
    77    VAR Pattern  : tTree;                                                     76     *    75
    78    BEGIN                                                                     69
    79       IF (t^.Kind = Tree.NoPattern)                                          70    75     *    51     *
    80          OR NOT Tree . IsType ( Formals , Tree . Formal )                     *     *    79     *    75     *     *
    81       THEN RETURN;                                                           70     *
    82       END;                                                                   73
    83       Pattern := t^.OnePattern.Pattern;                                      77    79     *     *
    84       CASE Pattern^.Kind OF                                                   *    83    79     *
    85       | Tree.Decompose: WITH Pattern^.Decompose DO                           80     *     *    84     *     *
    86             TreeName := Object^.Class.TypeDesc^.NodeTypes.TreeName^.TreeName.Name;       76     *     *     *     *     *
                                                                                     *     *
    87             IF (Formals^.Formal.TypeDesc^.Kind = Tree.UserType) OR           79    80    80    86    84    85     *    80
    88                IsNotEqual                                                    48
    89                  ( Object^.Class.TypeDesc^.NodeTypes.Types                   86    86    87    86     *
    90                  , Formals^.Formal.TypeDesc^.NodeTypes.Types                 87    87    89    89    89
    91                  ) 
    92             THEN                                                             81
    93                IF Object^.Class.Extensions^.Kind = Tree.NoClass THEN    (* Low ? *)      87    89    89     *    87    87
                                                                                     *    92
    94                   !        IF (! WritePath ( Path ); !.ALL.Kind /= !         93     *     *     *    93
    95                ELSE                                                           *
    96                   !        IF NOT ! WI (TreeName); !.IsType (! WritePath ( Path ); !\    94    80    51    86    80    94
                                                                                    94
      \, ! 
    97                END;                                                          82
    98                WI (TreeName); ! . ! WI (Object^.Class.Name); !) THEN EXIT ; END IF ;\    96    96     *    93    93    86
                                                                                    93     *    97    96
      \!
    99             END;                                                             98
   100             Match (Patterns, Object^.Class.Formals);                         75     *    98    98    90
   101          END;                                                                99
   102 
   103       | Tree.VarDef: WITH Pattern^.VarDef DO                                 93     *    85    85     *    85
   104             IF Object # NoTree THEN                                          98   100    51    98
   105                WITH Object^.Formal DO                                       103   104    90   103
   106                   !        IF NOT (equal! PackBody ( TypeDesc ); ! (! WritePath  ( P\   104    96     *    38    90    96
      \ath );                                                                       96
   107                   !, ! WritePath ( Pattern^.VarDef.Path ); !)) THEN EXIT ; END IF ;!    106   103   103   106   104    98
                                                                                   101   106
   108                END;                                                         107
   109             END;                                                            108
   110          END;                                                               109
   111 
   112       | Tree.NilTest:                                                       103     *
   113          !        IF ! WritePath ( Pattern^.NilTest.Path ); ! /= NULL THEN EXIT ; EN\   107   107   107   112   107     *
                                                                                   107   107
      \D IF ;!                                                                     110     *
   114 
   115       | Tree.DontCare1Explicit , Tree.DontCare1Internal :                   112     *     *     *
   116       | Tree.DontCareExplicit , Tree.DontCareInternal : RETURN;             115     *     *     *    81
   117 
   118       | Tree.Value: WITH Pattern^.Value DO                                  116     *   105   113     *   105
   119             AssignTempo (Expr);                                               *     *
   120             !        IF NOT (equal! PackBody (Formals^.Formal.TypeDesc);    113   106   106   106   100   105   106
   121             ! (! WritePath ( Path ); !, ! Expression (Expr); !)) THEN EXIT ; END IF \   113   113     *   119   113   113
                                                                                   113   120
      \;!
   122             MatchExpr (Expr);                                                 *   121
   123          END;                                                               121
   124       END;                                                                  123
   125       Match (t^.OnePattern.Next, Formals^.Formal.Next);                     100    83    83     *   120   120     *
   126    END Match;                                                               124   125
   127 
   128 PROCEDURE MatchExprs (t: tTree);                                             75     *   125    77
   129    BEGIN                                                                     78
   130       IF t^.Kind = Tree.NoExpr THEN RETURN; END;                            121   128    94   118     *   121   116   126
   131       IF Tree . IsType ( t^.OneExpr.Expr , Tree.DontCare ) THEN RETURN; END;      130   130    96   130     *   122     *
                                                                                     *   130   130   130
   132       MatchExpr (t^.OneExpr.Expr);                                          122   131   131   131
   133       MatchExprs (t^.OneExpr.Next);                                         128   132   132   125
   134    END MatchExprs;                                                          131   133
   135 
   136 PROCEDURE MatchExpr (t: tTree);                                             128   132   133   128
   137    BEGIN                                                                    129
   138       CASE t^.Kind OF                                                        84   136   130    84
   139       | Tree.Compose:                                                       131     *
   140          MatchExprs (t^.Compose.Exprs);                                     134   138   139     *
   141 
   142       | Tree.VarUse     :                                                   139     *
   143       | Tree.Nil        :                                                   142     *
   144       | Tree.DontCare1Explicit , Tree.DontCare1Internal :                   143   115     *   115
   145       | Tree.TargetExpr :                                                   144     *
   146       | Tree.StringExpr :                                                   145     *
   147       | Tree.AttrDesc   :                                                   146     *
   148 
   149       | Tree.Call       : WITH t^.Call DO                                   147     *   118   140     *   118
   150             MatchExpr (Expr);                                               136   132
   151             MatchExprs (Exprs);                                             140   140
   152             IF Object # NoTree THEN                                         131   105   104   131
   153                Match (Patterns, Object^.Routine.OutForm);                   126   100   152     *     *
   154             END;                                                            134
   155          END;                                                               154
   156 
   157       | Tree.Binary     : WITH t^.Binary DO                                 149     *   149   149     *   149
   158             MatchExpr (Lop);                                                150     *
   159             MatchExpr (Rop);                                                158     *
   160          END;                                                               155
   161 
   162       | Tree.PreOperator, Tree.PostOperator     :                           157     *     *     *
   163          MatchExpr (t^.PreOperator.Expr);                                   159   157   162   150
   164 
   165       | Tree.Index      :                                                   162     *
   166          MatchExpr (t^.Index.Expr);                                         163   163   165   163
   167          MatchExprs (t^.Index.Exprs);                                       151   166   166   151
   168 
   169       | Tree.Parents    :                                                   165     *
   170          MatchExpr (t^.Parents.Expr);                                       166   167   169   166
   171       END;                                                                  160
   172    END MatchExpr;                                                           171   170
   173 
   174 PROCEDURE AssignTempos (t: tTree);                                          136     *   170   136
   175    BEGIN                                                                    137
   176       IF t^.Kind = Tree.NoExpr THEN RETURN; END;                            152   174   138   169   130   152   131   172
   177       IF Tree . IsType ( t^.OneExpr.Expr , Tree.DontCare ) THEN RETURN; END;      176   176   131   176   133   170     *
                                                                                   131   176   176   176
   178       AssignTempo (t^.OneExpr.Expr);                                        119   177   177   177
   179       AssignTempos (t^.OneExpr.Next);                                       174   178   178   133
   180    END AssignTempos;                                                        177   179
   181 
   182 PROCEDURE AssignTempo (t: tTree);                                           174   178   179   174
   183    VAR TreeName : tIdent;                                                    77    98    76
   184    BEGIN                                                                    175
   185       CASE t^.Kind OF                                                       138   182   176   138
   186       | Tree.Compose: WITH t^.Compose DO                                    177   140   157   185     *   157
   187             TreeName := Object^.Class.TypeDesc^.NodeTypes.TreeName^.TreeName.Name;      183   153   100   120    90     *
                                                                                     *    98
   188             !      ! WI ( Tempo ) ; ! := NEW ! WI ( TreeName ) ;             98     *     *     *   187
   189               ! . yyNode ( ! WI ( Object ^ . Class . Name ) ; ! ) ; !         *   188   187   187   187
   190             AssignSubFormals                                                  *
   191               (Exprs, Object^.Class.Formals , Tempo , Object^.Class.Name );       167   189   189   125   188     *     *
                                                                                   189
   192          END;                                                               180
   193 
   194       | Tree.VarUse     :                                                   186   142
   195       | Tree.Nil        :                                                   194   143
   196       | Tree.DontCare1Explicit , Tree.DontCare1Internal :                   195   144     *   144
   197       | Tree.TargetExpr :                                                   196   145
   198       | Tree.StringExpr :                                                   197   146
   199       | Tree.AttrDesc   :                                                   198   147
   200 
   201       | Tree.Call       : WITH t^.Call DO                                   199   149   186   186     *   186
   202             AssignTempo (Expr);                                             182   178
   203             AssignTempos (Exprs);                                           180   191
   204          END;                                                               192
   205 
   206       | Tree.Binary     : WITH t^.Binary DO                                 201   157   201   201     *   201
   207             AssignTempo (Lop);                                              202   158
   208             AssignTempo (Rop);                                              207   159
   209          END;                                                               204
   210 
   211       | Tree.PreOperator, Tree.PostOperator     :                           206   163     *   162
   212          AssignTempo (t^.PreOperator.Expr);                                 208   206   211   202
   213 
   214       | Tree.Index      :                                                   211   167
   215          AssignTempo (t^.Index.Expr);                                       212   212   214   212
   216          AssignTempos (t^.Index.Exprs);                                     203   215   215   203
   217 
   218       | Tree.Parents    :                                                   214   170
   219          AssignTempo (t^.Parents.Expr);                                     215   216   218   215
   220       END;                                                                  209
   221    END AssignTempo;                                                         220   219
   222 
   223 (* Generate assignments to a formals list *) 
   224 
   225 PROCEDURE MakeWith (): tIdent;                                              182     *   183
   226    VAR String1, String2 : tString;                                          183     *     *    45
   227    BEGIN                                                                    184
   228       INC (WithCount);                                                        *    58
   229       ArrayToString ("yyW", String1);                                        45   226
   230       IntToString (WithCount, String2);                                      45   228   226
   231       Concatenate (String1, String2);                                        45   229   230
   232       RETURN MakeIdent (String1);                                           177    46   231
   233    END MakeWith;                                                            221   225
   234 
   235 PROCEDURE AssignFormals (t, Formals: tTree );                               225     *   219   191   182
   236    BEGIN                                                                    227
   237       IF (t^.Kind = Tree.NoExpr)                                            177   235   185   218   176
   238          OR NOT Tree . IsType ( Formals , Tree . Formal )                    87   120   237   177   235     *   125
   239       THEN RETURN;                                                          177   232
   240       END;                                                                  233
   241       IF Tree . IsType ( t^.OneExpr.Expr , Tree.DontCare ) THEN             237   238   238   237   179   219     *   177
                                                                                   239
   242          BeginFormals (Formals );                                             *   238
   243          RETURN;                                                            239
   244       END;                                                                  240
   245       AssignFormal (t^.OneExpr.Expr, Formals );                               *   241   241   241   242
   246 (* c.puma has a call on MatchExpr here *) 
   247       AssignFormals (t^.OneExpr.Next, Formals^.Formal.Next );               235   245   245   179   245   238     *
   248    END AssignFormals;                                                       244   247
   249 
   250 PROCEDURE AssignFormal (t, Formals: tTree );                                235   245   247   247   235
   251    VAR TreeName , With : tIdent;                                            226   188     *   225
   252    BEGIN                                                                    236
   253       IF t^.Kind = Tree.Compose THEN                                        241   250   237   241   186   241
   254          WITH t^.Compose DO                                                 206   253   253   206
   255             TreeName := Object^.Class.TypeDesc^.NodeTypes.TreeName^.TreeName.Name;      251   191   191   187   187     *
                                                                                     *   191
   256             With := MakeWith ( ) ;                                          251   233
   257             !      DECLARE -- Compose !                                       *   254
   258             !        ! WI ( With ) ; ! : ! WI ( TreeName ) ; ! . t! WI ( TreeName ) \   189   256     *   255   254     *
                                                                                     *
      \; 
   259             !            := NEW ! WI ( TreeName ) ;                         188   258   258
   260                          ! . yyNode ( ! WI ( Object ^ . Class . Name ) ; ! ) ; !        189   259   255   255   255
   261             !      BEGIN -- DECLARE Compose !                               252   257   257
   262             !        ! WI ( Formals^.Formal.Name ) ; ! := ! WI ( With ) ; ! ; !   260   250   247   260     *   258
   263 
   264             AssignSubFormals (Exprs, Object^.Class.Formals, With , Object^.Class.Nam\   190   216   260   260   262   262
                                                                                     *     *
      \e);                                                                         262
   265             !      END ; -- DECLARE Compose !                               248   261   261
   266          END;                                                               265
   267       ELSE                                                                   95
   268          AssignTempo (t);                                                   221   258
   269       END;                                                                  266
   270       CASE t^.Kind OF                                                       185   268   253   185
   271       | Tree.VarUse, Tree.Nil, Tree.Call, Tree.Binary, Tree.PreOperator,    253   194     *   195     *   201     *   206
                                                                                     *   212
   272         Tree.PostOperator, Tree.Index, Tree.Parents, Tree.TargetExpr, Tree.StringExp\   271   211     *   216     *   219
                                                                                     *   197     *
      \r,                                                                          198
   273         Tree.AttrDesc:                                                      272   199
   274          !      ! WI (Formals^.Formal.Name); ! := ! Expression (t); !;!     262   264   262   264   121   270
   275       | Tree.DontCare1Explicit , Tree.DontCare1Internal :                   273   196     *   196
   276          !begin! PackBody (Formals^.Formal.TypeDesc);                         *   120   274   274   255
   277            ! ( ! WI (Formals^.Formal.Name); ! ) ; !                         274   276   276   274
   278       ELSE                                                                  267
   279       END;                                                                  269
   280 
   281    END AssignFormal;                                                        279   250
   282 
   283 PROCEDURE BeginFormals (Formals: tTree );                                   250   242   277   250
   284    BEGIN                                                                    261
   285       IF Tree . IsType ( Formals , Tree . Formal )                          253   275   241   283     *   277
   286       THEN                                                                  253
   287          WITH Formals^.Formal DO                                            254   285   285   254
   288             !      begin! PackBody (TypeDesc); ! ( ! WI (Name); ! ) ; !     276   276   276   277   277
   289             BeginFormals ( Next );                                          283   247
   290          END;                                                               281
   291       END;                                                                  290
   292    END BeginFormals;                                                        291   289
   293 
   294 PROCEDURE AssignSubFormals (t, Formals: tTree ; PrevWith , Composer : tIdent );   283   264   274   287   283     *     *
                                                                                   251
   295    BEGIN                                                                    284
   296       IF (t^.Kind = Tree.NoExpr)                                            285   294   270   285   237
   297          OR NOT Tree . IsType ( Formals , Tree . Formal )                   238   238   296   285   294     *   287
   298       THEN RETURN;                                                          286   243
   299       END;                                                                  292
   300       IF Tree . IsType ( t^.OneExpr.Expr , Tree.DontCare ) THEN             296   297   297   296   247   245     *   241
                                                                                   298
   301          BeginSubFormals (Formals , PrevWith , Composer );                    *   297   294   294
   302          RETURN;                                                            298
   303       END;                                                                  299
   304       AssignSubFormal (t^.OneExpr.Expr, Formals , PrevWith , Composer );      *   300   300   300   301   301   301
   305       AssignSubFormals (t^.OneExpr.Next, Formals^.Formal.Next , PrevWith , Composer \   294   304   304   289   304   297
                                                                                     *   304   304
      \);
   306    END AssignSubFormals;                                                    303   305
   307 
   308 PROCEDURE AssignSubFormal (t, Formals: tTree ; PrevWith , Composer : tIdent );    294   304   305   305   294   305   305
                                                                                   294
   309    VAR TreeName , With : tIdent;                                            251   259   264   308
   310    BEGIN                                                                    295
   311       IF t^.Kind = Tree.Compose THEN                                        300   308   296   300   265   300
   312          WITH t^.Compose DO                                                 287   311   311   287
   313             TreeName := Object^.Class.TypeDesc^.NodeTypes.TreeName^.TreeName.Name;      309   264   264   288   255     *
                                                                                     *   288
   314             With := MakeWith ( ) ;                                          309   256
   315             !      DECLARE -- Subcompose !                                  265     *
   316             !        ! WI ( With ) ; ! : ! WI ( TreeName ) ; ! . t! WI ( TreeName ) \   288   314     *   313   312     *
                                                                                     *
      \; 
   317             !            := NEW ! WI ( TreeName ) ;                         259   316   316
   318                          ! . yyNode ( ! WI ( Object ^ . Class . Name ) ; ! ) ; !        260   317   313   313   313
   319             !      BEGIN -- DECLARE Subcompose !                            310   315   315
   320             !        ! WI ( PrevWith ) ; ! . ALL . ! WI ( Composer ) ;      318   308    94     *   308
   321                ! . ! WI ( Formals ^ . Formal . Name ) ; ! := ! WI ( With ) ; ! ; !      320   308   305   318     *   316
   322 
   323             AssignSubFormals (Exprs, Object^.Class.Formals, With , Object^.Class.Nam\   306   264   318   318   321   321
                                                                                     *     *
      \e);                                                                         321
   324             !      END ; -- DECLARE Subcompose !                            306   319   319
   325          END;                                                               324
   326       ELSE                                                                  278
   327          AssignTempo (t);                                                   268   316
   328       END;                                                                  325
   329       CASE t^.Kind OF                                                       270   327   311   270
   330       | Tree.VarUse, Tree.Nil, Tree.Call, Tree.Binary, Tree.PreOperator,    311   271     *   271     *   271     *   271
                                                                                     *   271
   331         Tree.PostOperator, Tree.Index, Tree.Parents, Tree.TargetExpr, Tree.StringExp\   330   272     *   272     *   272
                                                                                     *   272     *
      \r,                                                                          272
   332         Tree.AttrDesc:                                                      331   273
   333          !        ! WI ( PrevWith ) ; ! . ALL . ! WI ( Composer ) ;         321   320   320     *   320
   334              ! . ! WI ( Formals ^ . Formal . Name ) ; ! := ! Expression (t); ! ; !      333   323   321   323   274   329
   335       | Tree.DontCare1Explicit , Tree.DontCare1Internal :                   332   275     *   275
   336          !begin! PackBody (Formals^.Formal.TypeDesc);                       288   288   334   334   313
   337             ! ( ! WI ( PrevWith ) ; ! . ALL . ! WI ( Composer ) ;           334   333   333     *   333
   338              ! . ! WI ( Formals ^ . Formal . Name ) ; ! ) ; !               337   336   336   334
   339       ELSE                                                                  326
   340       END;                                                                  328
   341 
   342    END AssignSubFormal;                                                     340   308
   343 
   344 PROCEDURE BeginSubFormals (Formals: tTree ; PrevWith , Composer : tIdent );       308   301   338   308   337   337   309
   345    BEGIN                                                                    319
   346       IF Tree . IsType ( Formals , Tree . Formal )                          311   335   300   344     *   338
   347       THEN                                                                  311
   348          WITH Formals^.Formal DO                                            312   346   346   312
   349            !      begin! PackBody (TypeDesc);                               336   336   336
   350              ! ( ! WI ( PrevWith ) ; ! . ALL . ! WI ( Composer ) ;          338   344   337     *   344
   351              ! . ! WI ( Name ) ; ! ) ; !                                    350   338
   352            BeginSubFormals(Next , PrevWith , Composer );                    344   305   350   350
   353          END;                                                               342
   354       END;                                                                  353
   355    END BeginSubFormals;                                                     354   352
   356 
   357 PROCEDURE ConsPatterns (t: tTree; ListCount: INTEGER): INTEGER;             344     *   334   344    57    58     *
   358    BEGIN                                                                    345
   359       IF t^.Kind = Tree.NoPattern THEN RETURN ListCount; END;               346   357   329   346    79   347   302   357
                                                                                   355
   360       WITH t^.OnePattern DO                                                 348   359   125   348
   361          IF Tree . IsType ( Pattern , Tree.DontCare ) THEN                  359   359   346   118     *   300   359
   362             RETURN ConsTempos (Pattern^.DontCare.Tempos, ListCount);        359     *   361   361     *   359
   363          ELSE                                                               339
   364             IF ListCount > 0 THEN !, ! END;                                 361   362   361   359
   365             WI (Pattern^.Pattern.Tempo);                                    351   362     *   191
   366             RETURN ConsPatterns (Next, ListCount + 1);                      362   357   352   364
   367          END;                                                               364
   368       END;                                                                  367
   369    END ConsPatterns;                                                        368   366
   370 
   371 PROCEDURE ConsTempos (t: tTree; ListCount: INTEGER): INTEGER;               357   362   360   357   366   357     *
   372    BEGIN                                                                    358
   373       IF Tree . IsType ( t , Tree . Formal )                                364   361   361   371     *   348
   374       THEN                                                                  364
   375          IF ListCount > 0 THEN !, ! END;                                    373   371   374   369
   376          WI (t^.Formal.Name);                                               365   373   373   351
   377          RETURN ConsTempos (t^.Formal.Next, ListCount + 1);                 366   371   376   376   366   375
   378       ELSE                                                                  363
   379          RETURN ListCount;                                                  377   377
   380       END;                                                                  375
   381    END ConsTempos;                                                          380   377
   382 
   383 PROCEDURE Expressions (t: tTree; ListCount: INTEGER): INTEGER;              371     *   377   371   379   371     *
   384    BEGIN                                                                    372
   385       IF t^.Kind = Tree.NoExpr THEN RETURN ListCount; END;                  375   383   359   373   296   375   379   383
                                                                                   381
   386       WITH t^.OneExpr DO                                                    360   385   305   360
   387          IF Tree . IsType ( Expr , Tree.DontCare ) THEN                     385   385   373   304     *   362   385
   388             RETURN ConsTempos (Expr^.DontCare.Tempos, ListCount);           385   381   387   387   362   385
   389          ELSE                                                               378
   390             IF ListCount > 0 THEN !, ! END;                                 387   388   387   385
   391             Expression (Expr);                                              334   388
   392             RETURN Expressions (Next, ListCount + 1);                       388   383   377   390
   393          END;                                                               390
   394       END;                                                                  393
   395    END Expressions;                                                         394   392
   396 
   397 PROCEDURE Expression (t: tTree);                                            383   391   386   383
   398    BEGIN                                                                    384
   399       CASE t^.Kind OF                                                       329   397   385   329
   400       | Tree.Compose    : WI (t^.Compose.Tempo);                            387   312   376   399     *   365
   401 
   402       | Tree.Nil        : !NULL !                                           400   330   113
   403 
   404       | Tree.VarUse     : WITH t^.VarUse DO                                 402   330   386   400     *   386
   405             IF Object # NoTree THEN                                         390   323   152   390
   406                WritePath ( Object^.Formal.Path );                           121   405   377   121
   407             ELSE                                                            389
   408                WI (Name);                                                   400   376
   409             END;                                                            395
   410          END;                                                               409
   411 
   412       | Tree.DontCare1Explicit , Tree.DontCare1Internal : WI (t^.DontCare1.Tempo);      404   335     *   335   408   404
                                                                                     *   400
   413 
   414       | Tree.Call       : WITH t^.Call DO                                   412   330   404   412     *   404
   415             Expression (Expr);                                              397   391
   416             IF ( Exprs^.Kind = Tree.NoExpr )                                405   323   399   414   385
   417                AND ( ( Patterns^.Kind = Tree.NoPattern )                      *   153   416   416   359
   418                      OR ( Patterns^.Kind = Tree.NoExpr )                    297   417   417   417   416
   419                         (* semantics can leave Patterns as a list of
c  420                            OneExpr/NoExpr, see TransformExpr *) 
   421                    ) 
   422             THEN (* No parameters.  Omits parentheses too. *)               405
   423             ELSE                                                            407
   424                ! (! 
   425                ListCount := Expressions (Exprs, 0);                         392   395   416
   426                IF Object # NoTree THEN                                      416   406   405   422
   427                   ListCount := ConsPatterns (Patterns, ListCount);          425   369   418     *
   428                ELSE                                                         423
   429                   ListCount := Expressions (Patterns, ListCount);           427   425   427     *
   430                END;                                                         410
   431                !) !
   432             END (* IF *)                                                    430
   433          END;                                                               432
   434 
   435       | Tree . BinaryCompound                                               418     *
   436         : WITH t ^ . BinaryCompound                                         414   414   435
   437           DO                                                                414
   438             Expression ( Lop ) ; ! ! WI ( Operator ) ; ! !                  415   207   412     *
   439             WI ( CompoundOperator ) ; ! ! Expression ( Rop ) ;              438     *   438   208
   440           END (* t ^ . BinaryCompound *) ;                                  433
   441 
   442       | Tree.Binary     : WITH t^.Binary DO                                 435   330   436   436     *   437
   443             Expression (Lop); ! ! WI (Operator); ! ! Expression (Rop);      439   438   439   438     *   439
   444          END;                                                               440
   445 
   446       | Tree.PreOperator        :                                           442   330
   447          WI (t^.PreOperator.Operator); ! ! Expression (t^.PreOperator.Expr);      443   442   446   443   443     *     *
                                                                                   415
   448 
   449       | Tree.PostOperator       :                                           446   331
   450          Expression (t^.PostOperator.Expr); ! ! WI (t^.PostOperator.Operator);    447   447   449   447   447     *     *
                                                                                   447
   451 
   452       | Tree.Index      :                                                   449   331
   453          Expression (t^.Index.Expr); ! (! ListCount := Expressions (t^.Index.Exprs, \   450   450   452   450   429   429
                                                                                     *     *   425
      \0); !)! 
   454 
   455       | Tree.Parents    : !(! Expression (t^.Parents.Expr); !)!             452   331   453   453     *   453
   456 
   457       | Tree.TargetExpr : PackBody (t^.TargetExpr.Expr);                    455   331   349   455     *   455
   458 
   459       | Tree.StringExpr : WriteString (f, t^.StringExpr.String);            457   331    44    51   457     *     *
   460 
   461       | Tree.AttrDesc   : WITH t^.AttrDesc DO                               459   332   442   459     *   442
   462             WritePath ( Object^.Formal.Path ); ! . ALL . ! WI (Type); ! . ! WI (Attr\   406   426   406   406   350   450
                                                                                     *     *
      \ibute);                                                                       *
   463          END;                                                               444
   464       END;                                                                  463
   465    END Expression;                                                          464   455
   466 
   467 PROCEDURE Tg2 (t, Formals: tTree)                                           397     *   461   348   397
   468 ; VAR Object : tTree                                                        309   462   467
   469 ; VAR FormalName : tIdent                                                   468     *   344
   470 ;  PROCEDURE Tg2Attrs ( AttrFormals : tTree )                               467     *     *   468
   471    ; VAR LNewFormalName : tIdent                                            469     *   469
   472    ; VAR LString1 , LString2 : tString                                      471     *     *   226
   473    ; BEGIN                                                                  398
   474        IF Tree . IsType ( AttrFormals , Tree . Formal )                     426   461   387   470     *   462
   475        THEN                                                                 426
   476          IF AttrFormals ^ . Formal . Name = FormalName                      474   474   474   408   469
   477          THEN (* Rename FormalName, possibly again. *)                      475
   478            ArrayToString ( "Puma_Rename_Of_" , LString1 ) ;                 229   472
   479            GetString ( FormalName , LString2 ) ;                             46   476   472
   480            Concatenate ( LString1 , LString2 ) ;                            231   478   479
   481            LNewFormalName := MakeIdent ( LString1 ) ;                       471   232   480
   482            !      ! WI ( LNewFormalName ) ;                                 462   481
   483            ! : ! PackSpec ( Formals ^ . Formal . TypeDesc ) ;                38   467   476   349
   484            ! RENAMES ! WI ( FormalName  ) ; ! ; !                             *   482   479
   485            FormalName := LNewFormalName ;                                   484   482
   486          ELSE                                                               428
   487          END (* IF *) ;                                                     465
   488            !      ! WI ( AttrFormals ^ . Formal . Name ) ;                  484   476   483   476
   489            ! : ! PackSpec ( AttrFormals ^ . Formal . TypeDesc ) ;           483   488   488   483
   490            ! RENAMES ! WI ( FormalName ) ;                                  484   488   485
   491            ! . ALL . ! WI ( Object ^ . Class . Name ) ;                     462   490   468   323   488
   492            ! . ! WI ( AttrFormals ^ . Formal . Name ) ; ! ; !               491   489   489   491
   493          Tg2Attrs ( AttrFormals ^ . Formal . Next ) ;                       470   492   492   392
   494        END (* IF *) ;                                                       487
   495      END Tg2Attrs ;                                                         494   493
   496    BEGIN (* Tg2 *)                                                          473
   497       IF (t^.Kind = Tree.NoPattern) OR (Formals^.Kind = Tree.NoFormal) THEN RETURN; \   476   467   418   474   417   418
                                                                                   483     *     *     *   477   392
      \END;                                                                        495
   498       CASE t^.OnePattern.Pattern^.Kind OF                                   399   497   360   365   497   399
   499       | Tree.Decompose:                                                     497    85
   500          !    DECLARE -- Renames !                                          324     *
   501          Object := t^.OnePattern.Pattern^.Decompose.Object ;                491   498   498   498   499     *
   502          FormalName := Formals ^ . Formal . Name ;                          490   497   493   492
   503            (* Formals ^ . Formal . Name might need to be renamed later. *) 
   504          Tg2Attrs ( Object ^ . Class . Formals ) ;                          495   501   491   502
   505          !    BEGIN -- DECLARE renames !                                    496   500     *
   506          Tg2 ( t^.OnePattern.Pattern^.Decompose.Patterns , Object ^ . Class . Formal\   467   501   501   501   501   429
                                                                                   504   504
      \s ) ;                                                                       504
   507       | Tree.VarDef, Tree.NilTest, Tree.Value, Tree.DontCare1Explicit, Tree.DontCare\   499   107     *   113     *   118
                                                                                     *   412     *
      \1Internal:                                                                  412
   508       ELSE RETURN;                                                          486   497
   509       END;                                                                  497
   510       Tg2 (t^.OnePattern.Next, Formals^.Formal.Next);                       506   506   506   493   506   502     *
   511    END Tg2;                                                                 509   510
   512 }
   513 
   514 PROCEDURE MacroAda (t: Tree)                                                470    38   510   507
   515 
   516 Spec (..) :- {                                                                *
   517         MacroAda (TreeNames);                                               514     *
   518 }; .
   519 TreeName (..) :- {                                                          317
   520         !# define begint! WI (Name); !(a) ( a ) := NULL ; !                   *     *   492   502     *     *   402
   521         !# define equalt! WI (Name); !(a, b)    ! WI (Name); !.IsEqual! WI (Name); !\   520     *   520   520   520     *
                                                                                     *     *     *     *     *
      \ (a, b)!                                                                      *     *
   522         MacroAda (Next);                                                    517   510
   523 }; .
   524 
   525 
   526 PROCEDURE PackSpec (t: Tree)                                                514   489   514   514
   527 
   528 Spec (..) :- {                                                              516
   529         !!
   530         !-- This file was mechanically generated by puma. !                   *    71     *     *     *     *     *
   531         !!
   532         !WITH Text_Io !                                                     461     *
   533         PackSpec (TreeNames); !;!                                           526   517
   534         WriteLine (Codes^.Codes.SpecWithLine);                               73     *     *     *
   535         WriteText (f, Codes^.Codes.SpecWith);                                47   459   534     *     *
   536         !!
   537         !PACKAGE ! WI (TrafoName); !!                                         *   521     *
   538         ! IS !                                                                *
   539         !!
   540         !  ! WriteLine (Codes^.Codes.ImportLine);                           534   535     *     *
   541         WriteText (f, Codes^.Codes.Import);                                 535   535   540     *     *
   542         !!
   543         !  ! WriteLine (Codes^.Codes.ExportLine);                           540   541     *     *
   544         WriteText (f, Codes^.Codes.Export);                                 541   541   543     *     *
   545         !!
   546         PackSpec (Public);                                                  533     *
   547         !!
   548         !  PROCEDURE Begin! WI (TrafoName); !;!                             526     *   537   537
   549         !  PROCEDURE Close! WI (TrafoName); !;!                             548     *   548   548
   550         !!
   551         !END ! WI (TrafoName); ! ;!                                         511   549   549
   552         !!
   553 }; .
   554 TreeName (..) :- {                                                          519
   555         !, ! WI (Name);                                                     551   521
   556         PackSpec (Next);                                                    546   522
   557 }; .
   558 Name (..) :- {                                                              555
   559         IF Object # NoTree                                                  497   506   426
   560         THEN                                                                497
   561            IF ( Object^.Kind = Tree.Predicate )                             559   559   498   526     *
   562               OR ( Object^.Kind = Tree.Function )                           497   561   561   561     *
   563            THEN                                                             560
   564              !FUNCTION !                                                      *
   565            ELSE                                                             508
   566              !PROCEDURE !                                                   549
   567            END (* IF *) ;                                                   551
   568            WI (Name);                                                       555   558
   569            IF ( Object^.Routine.InForm^.Kind = Tree.NoFormal )              561   562   153     *   562   562   497
   570               AND ( Object^.Routine.OutForm^.Kind = Tree.NoFormal )         417   569   569   153   569   569   569
   571            THEN (* Omit parentheses. *)                                     563
   572            ELSE                                                             565
   573              ! ( ! 
   574              ListCount := 0;                                                453
   575              PackSpec (Object^.Routine.InForm);                             556   570   570   569
   576              PackSpec (Object^.Routine.OutForm);                            575   575   575   570
   577              ! ) !
   578            END (* IF *) ;                                                   567
   579            IF Object^.Kind = Tree.Predicate THEN                            569   576   570   570   561   571
   580               !RETURN BOOLEAN !                                             508    66
   581            ELSIF Object^.Kind = Tree.Function THEN                            *   579   579   579   562   579
   582               !RETURN ! PackSpec (Object^.Function.ReturnForm^.Formal.TypeDesc);        580   576   581   581     *   510
                                                                                   489
   583            END;                                                             578
   584            ! ; !
   585         END;                                                                583
   586         PackSpec (Next);                                                    582   556
   587 }; .
   588 Formal (..) :- {                                                            582
   589         IF ListCount > 0 THEN !; ! END;                                     579   574   581   585
   590         WI (Name); !: !                                                     568   568
   591         IF Path^.Var.IsOutput THEN !IN OUT ! END;                           589   462     *     *   589     *     *   589
   592         PackSpec (TypeDesc);                                                586   582
   593         INC (ListCount);                                                    228   589
   594         PackSpec (Next);                                                    592   586
   595 }; .
   596 NodeTypes (..) :- {                                                         313
   597         WI (TreeName^.TreeName.Name); !.t! WI (TreeName^.TreeName.Name);    590   554     *   590   526     *     *     *
                                                                                     *
   598 }; .
   599 UserType (..) :- {                                                           87
   600         WI (Type);                                                          597   462
   601 }; .
   602 
   603 PROCEDURE TreeOperators ( t : Tree )                                        566     *   597   581
   604 
   605 TreeName (..) :- {                                                          597
   606         !  USE ! WI (Name); ! . Operators ; !                                 *   600   597     *
   607      (* @  FUNCTION "=" ( Left , Right : @ 
c  608         WI ( Name ) ; 
c  609         ! . t! WI ( Name ) ; ! ) RETURN BOOLEAN RENAMES !
c  610         WI ( Name ) ; @ . "=" ; @ !! 
c  611      *) 
   612         TreeOperators (Next);                                               603   594
   613 }; .
   614 
   615 
   616 PROCEDURE ForwardDecls (t: Tree)                                            603     *   603   603
   617 
   618 Procedure (..) :- {                                                           *
   619         IF NOT IsExtern                                                     591   297     *
   620         THEN                                                                591
   621         ListCount := 0;                                                     593
   622         !  PROCEDURE ! WI (Name);                                           616   606   606
   623         IF ( InForm^.Kind = Tree.NoFormal )                                 619   575   581   616   570
   624            AND ( OutForm^.Kind = Tree.NoFormal )                            570   576   623   623   623
   625         THEN (* Omit empty parentheses. *)                                  620
   626         ELSE                                                                572
   627           ! (! 
   628           PackSpec (InForm);                                                594   623
   629           PackSpec (OutForm);                                               628   624
   630           !) ! 
   631         END (* IF *) ;                                                      591
   632         !; !
   633         END (* IF *) ;                                                      631
   634         ForwardDecls (Next);                                                616   612
   635 }; .
   636 Function (..) :- {                                                          582
   637         IF NOT IsExtern                                                     623   619   619
   638         THEN                                                                625
   639         ListCount := 0;                                                     621
   640         !  FUNCTION ! WI (Name);                                            564   622   622
   641         IF ( InForm^.Kind = Tree.NoFormal )                                 637   628   624   624   624
   642            AND ( OutForm^.Kind = Tree.NoFormal )                            624   629   641   641   641
   643         THEN (* Omit empty parentheses. *)                                  638
   644         ELSE                                                                626
   645           ! (! 
   646           PackSpec (InForm);                                                629   641
   647           PackSpec (OutForm);                                               646   642
   648           !) ! 
   649         END (* IF *) ;                                                      633
   650         ! RETURN ! PackSpec (ReturnForm^.Formal.TypeDesc); ! ; !            582   647   582   588   592
   651         END (* IF *) ;                                                      649
   652         ForwardDecls (Next);                                                634   634
   653 }; .
   654 Predicate (..) :- {                                                         579
   655         IF NOT IsExtern                                                     641   637   637
   656         THEN                                                                643
   657         ListCount := 0;                                                     639
   658         !  FUNCTION ! WI (Name);                                            640   640   640
   659         IF ( InForm^.Kind = Tree.NoFormal )                                 655   646   642   642   642
   660            AND ( OutForm^.Kind = Tree.NoFormal )                            642   647   659   659   659
   661         THEN (* Omit empty parentheses. *)                                  656
   662         ELSE                                                                644
   663           ! (! 
   664           PackSpec (InForm);                                                650   659
   665           PackSpec (OutForm);                                               664   660
   666           !) ! 
   667         END (* IF *) ;                                                      651
   668         !RETURN BOOLEAN ; !                                                 650   580
   669         END (* IF *) ;                                                      667
   670         ForwardDecls (Next);                                                652   652
   671 }; .
   672 
   673 PREDICATE NeedsDeclareRenames (t: Rule)                                       *     *   616     *
   674 
   675 Rule (..) :- ( { IsElement (ORD ('w'), Options) } ) ;                       673    48     *    51
   676              ( { ( Statements^.Kind <> Tree.NoStatement )                     *   660   660     *
   677                  OR ( Exprs^.Kind <> Tree.NoExpr )                          562   453   676   676   418
   678                  OR ( Expr^.Kind <> Tree.NoExpr )                           677   457   677   677   677
   679                }
   680              ) ; 
   681           . 
   682 
   683 PROCEDURE PackBody (t: Tree)                                                622   457   673   678
   684 
   685 Spec (..) :- {                                                              528
   686         !!
   687         !-- This file was mechanically generated by puma. !                 530   530   530   530   530   530   530
   688         !!
   689         !WITH PumaSys , Text_Io !                                           532     *   532
   690         PackSpec (TreeNames); ! ; !                                         665   533
   691         WriteLine (Codes^.Codes.BodyWithLine);                              543   544     *     *
   692         WriteText (f, Codes^.Codes.BodyWith);                               544   544   691     *     *
   693         !!
   694         !PACKAGE BODY ! WI (TrafoName); !!                                  537     *   658   551
   695         !  IS !                                                             538
   696         !!
   697         !# define yyWrite(s) Text_Io . Put ( s ) !                          521     *     *   689     *     *
   698         !# define yyWriteNl Text_Io . New_Line !                            697     *   697     *
   699         !!
   700         !  ! WriteLine (Codes^.Codes.GlobalLine);                           691   692     *     *
   701         WriteText (f, Codes^.Codes.Global);                                 692   692   700     *     *
   702         !!
   703         @# include "yy@ WI (TrafoName); @.w"@                                 *
   704         !!
   705         !  -- Operator Visibility. !                                        450     *
   706         !!
   707         TreeOperators ( TreeNames ) ;                                       612   690
   708         !!
   709         !  -- Forward declarations of routines. !                             *     *     *     *
   710         !!
   711         ForwardDecls ( Routines ) ;                                         670     *
   712         !! 
   713         !  -- Utility routines used by Puma routine bodies. !                 *   709     *   687     *     *     *
   714         !! 
   715         !  PROCEDURE yyAbort (yyFunction: STRING ) !                        683     *     *     *
   716         !  IS BEGIN !                                                       695   505
   717         !    Text_Io . Put !                                                698   697
   718         @      (Text_Io . Standard_Output , "Error: module @ WI (TrafoName);      717     *
   719         @, routine " ); @                                                   713
   720         !    Text_Io . Put ( Text_Io . Standard_Output, yyFunction); !      718   717     *   718   715
   721         @    Text_Io . Put ( Text_Io . Standard_Output, " failed"); @       720   720     *   720
   722         !    Text_Io . New_Line ( Text_Io . Standard_Output ) ; !           721   698     *   721
   723         !    RAISE PumaSys . AbortPuma ; !                                    *   689     *
   724         !  END yyAbort ; !                                                  669   715
   725         !!
   726         !  -- Routine bodies. !                                             576   713
   727         !! 
   728         PackBody (Routines);                                                683   711
   729         !! 
   730         !  -- Standard routines. !                                            *   713
   731         !! 
   732         !  PROCEDURE Begin! WI (TrafoName); !!                              715   548   694   694
   733         !  IS BEGIN !                                                       716   716
   734         !    ! WriteLine (Codes^.Codes.BeginLine);                          700   701     *     *
   735         WriteText (f, Codes^.Codes.Begin);                                  701   701   734     *   732
   736         !!
   737         !  END Begin! WI (TrafoName); !;!                                   724   735   732   732
   738         !!
   739         !  PROCEDURE Close! WI (TrafoName); !!                              732   549   737   737
   740         !  IS BEGIN !                                                       733   733
   741         !    ! WriteLine (Codes^.Codes.CloseLine);                          734   735     *     *
   742         WriteText (f, Codes^.Codes.Close);                                  735   735   741     *   739
   743         !!
   744         !  END Close! WI (TrafoName); !;!                                   737   742   739   739
   745         !!
   746         !BEGIN -- ! WI (TrafoName); !!                                      740   744   744
   747         !  Text_Io . Set_Output ( Text_Io . Standard_Output ) ; !           722     *     *   722
   748         !  Begin! WI (TrafoName); !;!                                       737   746   746
   749         !END ! WI (TrafoName); ! ; !                                        744   748   748
   750         !!
   751 }; .
   752 Procedure (..) :- {                                                         618
   753         ListCount := 0;                                                     657
   754         !  PROCEDURE ! WI (Name);                                           739   749   658
   755         IF ( InForm^.Kind = Tree.NoFormal )                                 659   664   678   683   660
   756            AND ( OutForm^.Kind = Tree.NoFormal )                            660   665   755   755   755
   757         THEN (* Omit empty parentheses. *)                                  661
   758         ELSE                                                                662
   759           ! (! 
   760           PackSpec (InForm);                                                690   755
   761           PackSpec (OutForm);                                               760   756
   762           !) ! 
   763         END (* IF *) ;                                                      749
   764         !  IS !                                                             740
   765         IF LocalLine . Line <> 0 THEN                                       755     *    71   757
   766         !    ! WriteLine (LocalLine);                                       741   765
   767         WriteText (f, Local); !!                                            742   742     *
   768         !!
   769         !  BEGIN -- ! WI ( Name ) ; !!                                      746   754   754
   770         ELSE                                                                758
   771         !BEGIN -- ! WI ( Name ) ; !!                                        769   769   769
   772         END (* IF *);                                                       763
   773         RoutineKind := kProcedure;                                           55    55
   774         InFormals := InForm;                                                 61   760
   775         OutFormals := OutForm;                                               62   761
   776       IF IsElement (ORD ('n'), Options) THEN                                765   675   675   675   765
   777         Tg1 (InForm);                                                         *   774
   778       END;                                                                  772
   779       IF IsElement (ORD ('b'), Options) THEN                                776   776   776   776   776
   780         PackBody (Rules);                                                   728     *
   781         IF IsElement (ORD ('f'), Options) THEN                              779   779   779   779   779
   782            @    yyAbort ("@ WI (Name); @");@                                724
   783         END;                                                                778
   784       ELSE                                                                  770
   785         TemposDone := FALSE;                                                 66     *
   786         CommonTestElim (Decisions);                                           *     *
   787         IF IsElement (ORD ('f'), Options) AND NOT NeedsNoFinale (Decisions) THEN        781   781   781   781   756   655
                                                                                    50   786   781
   788            @    yyAbort ("@ WI (Name); @");@                                782
   789         END;                                                                783
   790       END;                                                                  789
   791         !  END ! WI (Name); !;!                                             790   771   771
   792         !!
   793         PackBody (Next);                                                    780   670
   794 }; .
   795 Function (..) :- {                                                          636
   796         ListCount := 0;                                                     753
   797         !  FUNCTION ! WI (Name);                                            658   791   791
   798         IF ( InForm^.Kind = Tree.NoFormal )                                 787   777   756   756   756
   799            AND ( OutForm^.Kind = Tree.NoFormal )                            787   775   798   798   798
   800         THEN (* Omit empty parentheses. *)                                  787
   801         ELSE                                                                784
   802           ! (! 
   803           PackSpec (InForm);                                                761   798
   804           PackSpec (OutForm);                                               803   799
   805           !) ! 
   806         END (* IF *) ;                                                      791
   807         ! RETURN ! PackSpec (ReturnForm^.Formal.TypeDesc); !!               668   804   650   650   650
   808         !  IS !                                                             764
   809         IF LocalLine . Line <> 0 THEN                                       798   766   765   800
   810         !    ! WriteLine (LocalLine);                                       766   809
   811         WriteText (f, Local); !!                                            767   767   767
   812         !!
   813         !  BEGIN -- ! WI ( Name ) ; !!                                      771   797   797
   814         ELSE                                                                801
   815         !BEGIN -- ! WI ( Name ) ; !!                                        813   813   813
   816         END (* IF *);                                                       806
   817         RoutineKind := kFunction;                                           773    55
   818         InFormals := InForm;                                                774   803
   819         OutFormals := OutForm;                                              775   804
   820         ReturnFormals := ReturnForm;                                         63   807
   821       IF IsElement (ORD ('b'), Options) THEN                                809   787   787   787   809
   822         PackBody (Rules);                                                   793   780
   823         @    yyAbort ("@ WI (Name); @");@                                   788
   824       ELSE                                                                  814
   825         TemposDone := FALSE;                                                785   785
   826         CommonTestElim (Decisions);                                         786   787
   827         IF NOT NeedsNoFinale (Decisions) THEN                               821   787   787   826   821
   828            @    yyAbort ("@ WI (Name); @");@                                823
   829         END;                                                                816
   830       END;                                                                  829
   831         !  END ! WI (Name); !;!                                             830   815   815
   832         !!
   833         PackBody (Next);                                                    822   793
   834 }; .
   835 Predicate (..) :- {                                                         654
   836         ListCount := 0;                                                     796
   837         !  FUNCTION ! WI (Name);                                            797   831   831
   838         IF ( InForm^.Kind = Tree.NoFormal )                                 827   818   799   799   799
   839            AND ( OutForm^.Kind = Tree.NoFormal )                            799   819   838   838   838
   840         THEN (* Omit empty parentheses. *)                                  827
   841         ELSE                                                                824
   842           ! (! 
   843           PackSpec (InForm);                                                807   838
   844           PackSpec (OutForm);                                               843   839
   845           !) ! 
   846         END (* IF *) ;                                                      831
   847         !RETURN BOOLEAN !                                                   807   668
   848         !  IS !                                                             808
   849         IF LocalLine . Line <> 0 THEN                                       838   810   809   840
   850         !    ! WriteLine (LocalLine);                                       810   849
   851         WriteText (f, Local); !!                                            811   811   811
   852         !!
   853         !  BEGIN -- ! WI ( Name ) ; !!                                      815   837   837
   854         ELSE                                                                841
   855         !BEGIN -- ! WI ( Name ) ; !!                                        853   853   853
   856         END (* IF *);                                                       846
   857         RoutineKind := kPredicate;                                          817    55
   858         InFormals := InForm;                                                818   843
   859         OutFormals := OutForm;                                              819   844
   860       IF IsElement (ORD ('n'), Options) THEN                                849   821   821   821   849
   861         Tg1 (InForm);                                                       777   858
   862       END;                                                                  856
   863       IF IsElement (ORD ('b'), Options) THEN                                860   860   860   860   860
   864         PackBody (Rules);                                                   833   822
   865         !    RETURN FALSE;!                                                 847   825
   866       ELSE                                                                  854
   867         TemposDone := FALSE;                                                825   865
   868         CommonTestElim (Decisions);                                         826   827
   869         IF NOT NeedsNoFinale (Decisions) THEN                               863   827   827   868   863
   870            !    RETURN FALSE;!                                              865   867
   871         END;                                                                862
   872       END;                                                                  871
   873         !  END ! WI (Name); !;!                                             872   855   855
   874         !!
   875         PackBody (Next);                                                    864   833
   876 }; .
   877 Rule (..) :- {                                                              675
   878         WithCount := 0;                                                     230
   879         !    ! WriteLine (Line);                                            850   849
   880         IF HasTempos                                                        869     *
   881         THEN                                                                869
   882         !    DECLARE -- Tempos!                                             505   388
   883         Declare ( t ) ;                                                       *   683
   884         !    BEGIN -- DECLARE Tempos!                                       855   882   882
   885         END;                                                                873
   886         !      LOOP!                                                          *
   887         Decls := VarDecls;                                                   64     *
   888         Match (Patterns, InFormals);                                        153   506   858
   889       IF NeedsDeclareRenames ( t )                                          880   673   883
   890       THEN                                                                  881
   891         Tg2 (Patterns, InFormals);                                          511   888   888
   892       END;                                                                  885
   893         PackBody (Statements);                                              875   676
   894         IF NOT HasRejectOrFail THEN                                         889   869     *   890
   895            AssignFormals (Exprs, OutFormals);                               248   677   859
   896            MatchExprs (Exprs);                                              167   895
   897            CASE RoutineKind OF                                              498   857   498
   898            | kProcedure: !        RETURN;!                                  773   870
   899 
   900            | kFunction :                                                    817
   901               AssignTempo (Expr);                                           327   678
   902               IF HasPatterns AND (Expr^.Kind # Tree.Compose)                894     *   839   901   839   839   400
   903                  AND NOT Tree . IsType ( t , Tree.DontCare1 )               902   894   902   474   889     *   412
   904               THEN                                                          894
   905                  !        ! WI (Tempo); ! := ! Expression (Expr); !;!       873   412   465   902
   906                  MatchExpr (Expr);                                          172   905
   907                  !        RETURN ! WI (Tempo); !;!                          898   905   905
   908               ELSE                                                          866
   909                  MatchExpr (Expr);                                          906   906
   910                  !        RETURN ! Expression (Expr); !;!                   907   905   909
   911               END;                                                          892
   912 
   913            | kPredicate: !        RETURN TRUE;!                             857   910     *
   914            END;                                                             911
   915         END;                                                                914
   916       IF NeedsDeclareRenames ( t )                                          902   889   903
   917       THEN                                                                  904
   918         Tg3 (Patterns);                                                       *   891
   919       END;                                                                  915
   920         !      END LOOP ; !                                                 919   886
   921         IF HasTempos THEN !    END ; -- DECLARE Tempos!                     916   880   917   920   884   884
   922         END;                                                                921
   923         !!
   924         PackBody (Next);                                                    893   875
   925 }; .
   926 ProcCall (..) :- {                                                            *
   927         !        ! WriteLine (Pos);                                         879     *
   928         AssignTempo (Call);                                                 901   414
   929         !        ! Expression (Call); !;!                                   910   928
   930         MatchExpr (Call);                                                   909   929
   931         PackBody (Next);                                                    924   924
   932 }; .
   933 Condition (..) :- {                                                           *
   934         !        ! WriteLine (Pos);                                         927   927
   935         AssignTempo (Expr);                                                 928   910
   936         !        IF NOT ( ! Expression (Expr); ! ) THEN EXIT ; END IF ;!    921   903   929   935   921   121   922     *
   937         MatchExpr (Expr);                                                   930   936
   938         PackBody (Next);                                                    931   931
   939 }; .
   940 Assignment (..) :- {                                                          *
   941         !        ! WriteLine (Pos);                                         934   934
   942         AssignTempo (Adr);                                                  935     *
   943         AssignTempo (Expr);                                                 942   937
   944         IF Object # NoTree THEN                                             936   582   559   936
   945           !        ! WritePath ( Object^.Formal.Path );                     462   944   807   591
   946         ELSE                                                                908
   947           !        ! Expression (Adr);                                      936   942
   948         END;                                                                936
   949         ! := ! Expression (Expr); ! ; !                                     947   943
   950         MatchExpr (Adr);                                                    937   947
   951         MatchExpr (Expr);                                                   950   949
   952         PackBody (Next);                                                    938   938
   953 }; .
   954 Reject (..) :- {                                                              *
   955         !        ! WriteLine (Pos);                                         941   941
   956         !        EXIT ; !                                                   936
   957 }; .
   958 Fail (..) :- {                                                                *
   959         !        ! WriteLine (Pos);                                         955   955
   960         !        RETURN ! IF RoutineKind = kPredicate THEN ! FALSE ! END; ! ; !   913   944   897   913   944   870   948
   961 }; .
   962 TargetStmt (..) :- {                                                          *
   963         !        ! WriteLine (Pos);                                         959   959
   964         !        ! PackBody (Stmt); !!                                      952     *
   965         PackBody (Next);                                                    964   952
   966 }; .
   967 Nl (..) :- {                                                                  *
   968         !        !WriteLine (Pos);                                          963   963
   969         !        yyWriteNl;!                                                698
   970         PackBody (Next);                                                    965   965
   971 }; .
   972 WriteStr (..) :- {                                                            *
   973         !        ! WriteLine (Pos);                                         968   968
   974         !        yyWrite (! WriteString (f, String); !);!                   697   459   851   459
   975         PackBody (Next);                                                    970   970
   976 }; .
   977 Ident (..) :-                                                                 *
   978 (*
c  979      VAR Var : tTree ; 
c  980      { Var := IdentifyVar (Decls, Attribute);
c  981        IF Var # NoTree 
c  982        THEN WritePath ( Var^.Formal.Path ); 
c  983        ELSE WI (Attribute); END;
c  984 *)
   985     { IF Object # NoTree                                                    960   945   944
   986       THEN                                                                  960
   987         WritePath (Object^.Formal.Path);                                    945   985   945   945
   988       ELSE                                                                  946
   989         WI (Attribute);                                                     907   462
   990       END;                                                                  960
   991       PackBody (Next);                                                      975   975
   992     } ; .
   993 Any (..) :- {                                                                 *
   994         WriteString (f, Code);                                              974   974     *
   995         PackBody (Next);                                                    991   991
   996 }; .
   997 Anys (..) :- {                                                                *
   998         PackBody (Layouts);                                                 995     *
   999         PackBody (Next);                                                    998   995
  1000 }; .
  1001 LayoutAny (..) :- {                                                           *
  1002         WriteString (f, Code);                                              994   994   994
  1003         PackBody (Next);                                                    999   999
  1004 }; .
  1005 Designator (..) :- {                                                          *
  1006         WritePath ( Object^.Formal.Path ); !. ALL . ! WI (Type); ! . ! WI (Attribute\   987   987   987   987   491   989
                                                                                   600     *   989
      \);
  1007         PackBody (Next);                                                   1003  1003
  1008 }; .
  1009 Field (..) :- {                                                               *
  1010         CantHappen ( "Ada, PackBody, Field" ) ;                              52
  1011 }; .
  1012 ConsType (..) :- {                                                            *
  1013         CantHappen ( "Ada, PackBody, ConsType" ) ;                         1010
  1014 }; .
  1015 Var (..) :- {                                                               591
  1016         CantHappen ( "Ada, PackBody, Var" ) ;                              1013
  1017 }; .
  1018 NodeTypes (..) :- {                                                         596
  1019         !t! WI (TreeName^.TreeName.Name);                                   916  1006   605     *   873
  1020 }; .
  1021 UserType (..) :- {                                                          599
  1022         WI (Type);                                                         1019  1006
  1023 }; .
  1024 
  1025 
  1026 PROCEDURE WritePathRecurse (t: Tree)                                        754     *  1019   903
  1027 
  1028 Field (..) :- {                                                            1009
  1029         WritePathRecurse (Next);                                           1026  1007
  1030         ! . ! WI (Name);                                                   1022  1019
  1031 }; .
  1032 ConsType (..) :- {                                                         1012
  1033         WritePathRecurse (Next);                                           1029  1029
  1034         ! . ALL . ! WI (Name);                                             1006  1030  1030
  1035 }; .
  1036 Var (..) :- {                                                              1015
  1037         WI (Name);                                                         1034  1034
  1038 }; .
  1039 
  1040 PROCEDURE WritePath (t: Tree)                                              1026  1006  1026  1026
  1041 
  1042 (* Special case to ignore ConsType at the right end of a path *) 
  1043 ConsType (..)                                                              1032
  1044   :- { WritePathRecurse ( Next ) ; } ; .                                   1033  1033
  1045 
  1046 Field (..)                                                                 1028
  1047 ; Var ( .. )                                                               1036
  1048   :- { WritePathRecurse ( t ) ; } ; .                                      1044  1040
  1049 
  1050 PROCEDURE Declare (t: Tree)                                                1040   883  1048  1040
  1051 
  1052 Formal (..) :- {                                                           1006
  1053         !      ! WI (Name); !: ! PackSpec (TypeDesc); !;!                  1037  1037   844   807
  1054         Declare (Next);                                                    1050  1044
  1055 }; .
  1056 Param (..) :-                                                                 *
  1057       VAR Var : tTree ;                                                     472  1047   470
  1058       { Var := IdentifyVar (Decls, Name);                                  1057    49   887  1053
  1059         !      ! WI (Name); !: ! PackSpec (Var^.Formal.TypeDesc); !;!      1053  1058  1053  1058  1052  1053
  1060         Declare (Next);                                                    1054  1054
  1061       } ; .
  1062 Rule (..) :- {                                                              877
  1063         IF HasTempos THEN                                                   985   921   986
  1064            Decls := VarDecls;                                              1058   887
  1065            Declare (Patterns);                                             1060   918
  1066            Declare (Exprs);                                                1065   896
  1067            IF RoutineKind = kFunction THEN                                 1063   960   900  1063
  1068               Declare (Expr);                                              1066   951
  1069               IF HasPatterns AND (Expr^.Kind # Tree.Compose) AND NOT Tree . IsType (\  1067   902   903  1068   902  1050
                                                                                   902     *   936     *   903
      \ t , Tree.DontCare1 ) THEN                                                 1050     *   903  1067
  1070                  !      ! WI (Tempo); ! : ! PackSpec (ReturnFormals^.Formal.TypeDesc\  1059   907  1059   820  1059  1059
      \); !;!
  1071               END;                                                          990
  1072            END;                                                            1071
  1073            Declare (Statements);                                           1068   893
  1074         END;                                                               1072
  1075 }; .
  1076 ProcCall (..) :- {                                                          926
  1077         Declare (Call);                                                    1073   930
  1078         Declare (Next);                                                    1077  1060
  1079 }; .
  1080 Condition (..) :- {                                                         933
  1081         Declare (Expr);                                                    1078  1069
  1082         Declare (Next);                                                    1081  1078
  1083 }; .
  1084 Assignment (..) :- {                                                        940
  1085         Declare (Adr);                                                     1082   950
  1086         Declare (Expr);                                                    1085  1081
  1087         Declare (Next);                                                    1086  1082
  1088 }; .
  1089 TargetStmt (..) :- {                                                        962
  1090         Declare (Parameters);                                              1087     *
  1091         Declare (Next);                                                    1090  1087
  1092 }; .
  1093 Statement (..) :- {                                                           *
  1094         Declare (Next);                                                    1091  1091
  1095 }; .
  1096 OnePattern (..) :- {                                                        510
  1097         IF (Pattern^.Pattern.Tempo # NoIdent) AND NOT Tree . IsType ( Pattern , Tree\  1069   506     *  1070    46  1069
                                                                                  1069  1069  1069     *     *
      \.DontCare1 ) THEN                                                          1069  1069
  1098            !      ! WI (Pattern^.Pattern.Tempo); ! : ! PackSpec (Pattern^.Pattern.Ty\  1070  1097     *  1097  1070     *
                                                                                     *
      \peDesc); !;!                                                               1070
  1099         END;                                                               1074
  1100         Declare (Pattern);                                                 1094  1098
  1101         Declare (Next);                                                    1100  1094
  1102 }; .
  1103 OneExpr (..) :- {                                                           386
  1104         Declare (Expr);                                                    1101  1086
  1105         Declare (Next);                                                    1104  1101
  1106 }; .
  1107 Decompose (..) :- {                                                         506
  1108         Declare (Patterns);                                                1105  1065
  1109 }; .
  1110 DontCare (..) :- {                                                          388
  1111         Declare (Tempos);                                                  1108   921
  1112 }; .
  1113 DontCare1 (..) :- {                                                        1097
  1114         IF Tempo # NoIdent THEN                                            1097  1098  1097  1097
  1115            !      ! WI (Tempo); ! : ! PackSpec (TypeDesc); !;!             1098  1114  1098  1098
  1116         END;                                                               1099
  1117 }; .
  1118 Value (..) :- {                                                             507
  1119         Declare (Expr);                                                    1111  1104
  1120 }; .
  1121 Compose (..) :- {                                                          1069
  1122         IF Tempo # NoIdent THEN                                            1114  1115  1114  1114
  1123            !      ! WI (Tempo); !: ! PackSpec (TypeDesc); !;!              1115  1122  1115  1115
  1124         END;                                                               1116
  1125         Declare (Exprs);                                                   1119  1066
  1126 }; .
  1127 Call (..) :- {                                                             1077
  1128         Declare (Expr);                                                    1125  1119
  1129         Declare (Exprs);                                                   1128  1125
  1130         Declare (Patterns);                                                1129  1108
  1131 }; .
  1132 Binary (..) :- {                                                            442
  1133         Declare (Lop);                                                     1130   443
  1134         Declare (Rop);                                                     1133   443
  1135 }; .
  1136 PreOperator (..) ;                                                          447
  1137 PostOperator (..) ;                                                         450
  1138 Parents (..) :- {                                                           455
  1139         Declare (Expr);                                                    1134  1128
  1140 }; .
  1141 Index (..) :- {                                                             453
  1142         Declare (Expr);                                                    1139  1139
  1143         Declare (Exprs);                                                   1142  1129
  1144 }; .
  1145 
  1146 
  1147 PROCEDURE Tg1 (t: Tree)                                                    1050   861  1069  1097
  1148 
  1149 Formal (..) :- {                                                           1070
  1150         TheName := Name;                                                     65  1059
  1151         Tg1 (TypeDesc);                                                    1147  1123
  1152         Tg1 (Next);                                                        1151  1105
  1153 }; .
  1154 NodeTypes (..) :- {                                                        1018
  1155         !    IF ! WI (TheName); ! = ! WI (TreeName^.TreeName.Name); ! . No!      1122  1123  1150     *  1019     *  1150
                                                                                     *
  1156         WI (TreeName^.TreeName.Name); ! THEN RETURN ! IF RoutineKind = kPredicate TH\  1155  1155     *  1155  1122   960
                                                                                  1155  1067   960
      \EN ! FALSE ! END; !; END IF ; !                                               *   960  1124     *     *
  1157 }; .
  1158 
  1159 
  1160 PROCEDURE Tg3 (t: Tree)                                                    1147   918  1147  1147
  1161 
  1162 OnePattern (..) :- {                                                       1096
  1163         Tg3 (Pattern);                                                     1160  1100
  1164         Tg3 (Next);                                                        1163  1152
  1165 }; .
  1166 Decompose (..) :- {                                                        1107
  1167         Tg3 ( Patterns ) ;                                                 1164  1130
  1168         !    END ; -- DECLARE renames !                                    1156   921   505
  1169 }; .
  1170 
  1171 PROCEDURE CommonTestElim2 (OneTest: OneTest, Decisions)                    1160     *     *     *   869
  1172 
  1173 TestValue (..), ThenPart : :-                                                 *     *
  1174    (NeedsMatch (Expr));                                                      50  1142
  1175    CommonTestElim (OneTest);                                                868  1171
  1176    !      LOOP !                                                            920
  1177    MatchExpr (OneTest^.TestValue.Expr);                                     951  1175  1173  1174
  1178    CommonTestElim (ThenPart);                                              1175  1173
  1179    !      EXIT ; !                                                          956
  1180    !      END LOOP ;!                                                      1168  1176
  1181    .
  1182 _, ThenPart : :-                                                              *  1178
  1183    CommonTestElim (OneTest);                                               1178  1177
  1184    CommonTestElim (ThenPart);                                              1183  1182
  1185    .
  1186 
  1187 PROCEDURE CommonTestElim (t: Tree)                                         1171  1184  1160  1160
  1188 
  1189 Decision (..) :- {                                                            *
  1190         IF Cases = 0 THEN                                                  1156     *  1156
  1191            IF NOT TemposDone AND (OneTest^.Kind = Tree.TestValue) AND NeedsTempo (Th\  1190  1097   867  1097  1183  1069
                                                                                  1187  1177     *    50
      \enPart, rule) THEN                                                         1184    59  1190
  1192               !    DECLARE -- Tempos !                                     1168  1111
  1193               Declare ( rule ) ;                                           1143  1191
  1194               !    BEGIN -- DECLARE Tempos !                                884  1192  1192
  1195               TemposDone := TRUE;                                          1191   913
  1196               CommonTestElim2 (OneTest, ThenPart);                         1171  1191  1191
  1197               !        END IF ; !                                          1180  1191
  1198               (* ^Is this really end IF? *) 
  1199               !    END ; -- DECLARE Tempos !                               1197  1194  1194
  1200            ELSE                                                             988
  1201               GetRule (ThenPart, rule);                                      50  1196  1193
  1202               Decls := rule^.Rule.VarDecls;                                1064  1201  1062  1064
  1203               CommonTestElim2 (OneTest, ThenPart);                         1196  1196  1201
  1204               !        END IF ; !                                          1199  1197
  1205               (* ^Is this really end IF? *)  
  1206            END;                                                            1204
  1207            TemposDone := FALSE;                                            1195  1156
  1208            CommonTestElim (ElsePart);                                      1187     *
  1209         ELSE                                                               1200
  1210            i := Cases; Case (t);                                             56  1190     *  1187
  1211         END;                                                               1206
  1212 }; .
  1213 Decided (..) :- {                                                             *
  1214         CommonTestElim (Rule);                                             1208  1202
  1215         IF Rule^.Rule.HasExit THEN                                         1204  1214     *     *  1191
  1216            TemposDone := FALSE;                                            1207  1207
  1217            CommonTestElim (ElsePart);                                      1214  1208
  1218         END;                                                               1211
  1219 }; .
  1220 TestKind (..) :- {                                                            *
  1221         !        IF (! WritePath ( Path ); !. ALL . Kind = !               1215  1040  1006  1034  1191
  1222         WI (TypeDesc^.NodeTypes.TreeName^.TreeName.Name); ! . ! WI (Name); !) THEN!    1156  1151  1154  1156     *  1156
                                                                                     *     *  1215
  1223 }; .
  1224 TestIsType (..) :- {                                                          *
  1225         !        IF ! WI (TypeDesc^.NodeTypes.TreeName^.TreeName.Name); ! . IsType (\  1221  1222  1222  1222  1222     *
                                                                                  1222  1097
      \ ! WritePath ( Path ); !, !                                                1221  1221
  1226         WI (TypeDesc^.NodeTypes.TreeName^.TreeName.Name); ! . ! WI (Name); ! ) THEN!   1225  1225  1225  1225     *  1225
                                                                                     *     *  1222
  1227 }; .
  1228 TestNil (..) :- {                                                             *
  1229         !        IF ! WritePath ( Path ); ! = NULL THEN !                  1225  1225  1225   520  1226
  1230 }; .
  1231 TestNonlin (..) :- {                                                          *
  1232         !        IF ( equal! PackBody ( TypeDesc); ! ( ! WritePath (Path );      1229   120  1007  1226  1229  1229
  1233         ! , ! WritePath ( Path2 ); ! ) ) THEN !                            1232     *  1229
  1234 }; .
  1235 TestValue (..) :- {                                                        1191
  1236         AssignTempo (Expr);                                                 943  1177
  1237         !        IF ( equal! PackBody ( TypeDesc); ! ( ! WritePath (Path );      1232  1232  1232  1232  1233  1232
  1238         ! , ! Expression (Expr); ! ) ) THEN !                               949  1236  1233
  1239 }; .
  1240 Rule (..) :- {                                                             1215
  1241         WithCount := 0;                                                     878
  1242         !        ! WriteLine (Line);                                        973   879
  1243         IF HasTempos AND NOT TemposDone THEN                               1237  1063  1191  1191  1216  1238
  1244         !    DECLARE -- Tempos  !                                          1199  1199
  1245         Declare ( t ) ;                                                    1193  1210
  1246         !    BEGIN -- DECLARE Tempos  !                                    1194  1244  1244
  1247         END;                                                               1218
  1248         IF HasExit THEN !       LOOP!                                      1243  1215  1243  1180
  1249         END;                                                               1247
  1250         Decls := VarDecls;                                                 1202  1202
  1251       IF NeedsDeclareRenames ( t )                                         1248   916  1245
  1252       THEN                                                                 1248
  1253         Tg2 (Patterns, InFormals);                                          891  1167   891
  1254       END;                                                                 1249
  1255         PackBody (Statements);                                             1237  1073
  1256         IF NOT HasRejectOrFail THEN                                        1251  1243   894  1252
  1257            AssignFormals (Exprs, OutFormals);                               895  1143   895
  1258            MatchExprs (Exprs);                                              896  1257
  1259            CASE RoutineKind OF                                              897  1156   897
  1260            | kProcedure: !        RETURN ; !                                898  1156
  1261 
  1262            | kFunction :                                                   1067
  1263               AssignTempo (Expr);                                          1236  1238
  1264               IF HasPatterns AND (Expr^.Kind # Tree.Compose) AND NOT Tree . IsType (\  1256  1069  1243  1263  1221  1191
                                                                                  1121     *  1256     *  1225
      \ t , Tree.DontCare1 ) THEN                                                 1251     *  1113  1256
  1265                  !        ! WI (Tempo); ! := ! Expression (Expr); ! ; !    1226  1123  1238  1264
  1266                  MatchExpr (Expr);                                         1177  1265
  1267                  !        RETURN ! WI (Tempo); ! ; !                       1260  1265  1265
  1268               ELSE                                                         1209
  1269                  MatchExpr (Expr);                                         1266  1266
  1270                  !        RETURN ! Expression (Expr); ! ; !                1267  1265  1269
  1271               END;                                                         1254
  1272 
  1273            | kPredicate: !        RETURN TRUE ; !                          1156  1270  1195
  1274            END;                                                            1271
  1275         END;                                                               1274
  1276       IF NeedsDeclareRenames ( t )                                         1264  1251  1264
  1277       THEN                                                                 1264
  1278         Tg3 (Patterns);                                                    1167  1253
  1279       END;                                                                 1275
  1280         IF HasExit THEN !     END LOOP ; !                                 1276  1248  1277  1279  1248
  1281         END;                                                               1280
  1282         IF HasTempos AND NOT TemposDone                                    1280  1243  1264  1264  1243
  1283         THEN                                                               1280
  1284           !    END ; -- DECLARE Tempos  !                                  1281  1246  1246
  1285         END;                                                               1284
  1286         !!
  1287 }; .
  1288 
  1289 
  1290 PROCEDURE Case (t: Tree)        (* reads GLOBAL i *)                       1187  1210  1276  1264
  1291 
  1292 Decision (..) :-                                                           1189
  1293      VAR n : CARDINAL ;                                                    1057     *    56
  1294      { !!
  1295         !        CASE ! WritePath ( OneTest^.OneTest.Path ); ! . ALL . Kind IS !       1259  1237  1203     *  1237  1221
                                                                                  1264   848
  1296         n := i;                                                            1293  1210
  1297         WHILE n > 0 DO                                                        *  1296   461
  1298            IF NOT IsEmpty (t^.Decision.OneTest^.TestIsType.TypeDesc^.NodeTypes.Types\  1282  1282    48  1290  1292  1295
                                                                                  1224  1237  1226    90
      \) THEN                                                                     1283
  1299               Case (t^.Decision.OneTest);                                  1290  1298  1298  1298
  1300               CommonTestElim (t^.Decision.ThenPart);                       1217  1299  1299  1203
  1301            END;                                                            1285
  1302            t := t^.Decision.ElsePart;                                      1300     *  1300  1217
  1303            DEC (n);                                                           *  1297
  1304         END;                                                               1301
  1305         !        WHEN OTHERS => NULL ; !                                      *     *  1229
  1306         !        END CASE ; !                                              1304  1295
  1307         !!
  1308         CommonTestElim (t);                                                1300  1302
  1309       } ; .
  1310 TestKind (..) :- {                                                         1220
  1311         !        WHEN ! WI (TypeDesc^.NodeTypes.TreeName^.TreeName.Name); ! . ! WI (\  1305  1267  1298  1298  1226     *
                                                                                  1226     *
      \Name); ! => !                                                                 *
  1312 }; .
  1313 TestIsType (..) :- {                                                       1298
  1314         WITH TypeDesc^.NodeTypes DO                                         689  1311  1311  1297
  1315            TheClass := LookupClass (TreeName^.TreeName.Classes, Minimum (Types));        60    49  1311     *     *    48
                                                                                  1298
  1316            !        WHEN ! WI (TreeName^.TreeName.Name); ! . ! WI (TheClass^.Class.N\  1311  1311  1315     *  1311     *
                                                                                  1315   506
      \ame);                                                                         *
  1317            Case (TypeDesc); ! => !                                         1299  1314
  1318         END;                                                               1306
  1319 }; .
  1320 NodeTypes (..) :- {                                                        1314
  1321         FOR j := Minimum (Types) + 1 TO Maximum (Types) DO                    *    56  1315  1315     *    48     *  1314
  1322            IF IsElement (j, Types) THEN                                    1298   863  1321  1321  1298
  1323               TheClass := LookupClass (TreeName^.TreeName.Classes, j); !!  1316  1315  1316     *  1315  1322
  1324               !        | ! WI (TreeName^.TreeName.Name); ! . ! WI (TheClass^.Class.N\  1316  1323     *  1316     *  1323
                                                                                  1316
      \ame);                                                                         *
  1325            END;                                                            1318
  1326         END;                                                               1325
  1327 }; .
  1328 
Cross reference: 

-"-
 " ); @                          720 
 " failed"                       721 
 "@ WI (Name); @"                782   788   823   828 
 "@ WriteS (f, SourceFile); @"    71 
 "Ada, PackBody, ConsType"      1013 
 "Ada, PackBody, Field"         1010 
 "Ada, PackBody, Var"           1016 
 "Error: module @ WI (TrafoNam\  719 
   e);
 "Puma_Rename_Of_"               478 
 "yy@ WI (TrafoName); @.w"       703 
 "yyW"                           229 

-'-
 'b'                             779   821   863 
 'f'                             781   787 
 'n'                             776   860 
 'w'                             675 

-0-
 0                                70   364   375   390   425   453   574   589 
                                 621   639   657   753   765   796   809   836 
                                 849   878  1190  1241  1297 

-1-
 1                               366   377   392  1321 

-A-
 a                               520   520   521   521 
 AbortPuma                       723 
 Ada                              36 
 Adr                             942   947   950  1085 
 ALL                              94   320   333   337   350   462   491  1006 
                                1034  1221  1295 
 AND                             417   570   624   642   660   756   787   799 
                                 839   902   903  1069  1069  1097  1191  1191 
                                1243  1264  1264  1282 
 Any                             993 
 Anys                            997 
 ArrayToString                    45   229   478 
 Assert                           52 
 Assertions                       52 
 AssertPos                        52 
 AssignFormal                    245   250   281 
 AssignFormals                   235   247   248   895  1257 
 Assignment                      940  1084 
 AssignSubFormal                 304   308   342 
 AssignSubFormals                190   264   294   305   306   323 
 AssignTempo                     119   178   182   202   207   208   212   215 
                                 219   221   268   327   901   928   935   942 
                                 943  1236  1263 
 AssignTempos                    174   179   180   203   216 
 AttrDesc                        147   199   273   332   461   461 
 AttrFormals                     470   474   476   488   489   492   493 
 Attribute                       462   989  1006 

-B-
 b                               521   521 
 BEGIN                            69    78   129   137   175   184   227   236 
                                 252   261   284   295   310   319   345   358 
                                 372   384   398   473   496   505   716   733 
                                 740   746   769   771   813   815   853   855 
                                 884  1194  1246 
 Begin                           548   732   735   737   748 
 begin                           276   288   336   349 
 BeginFormals                    242   283   289   292 
 BeginLine                       734 
 BeginSubFormals                 301   344   352   355 
 begint                          520 
 Binary                          157   157   206   206   271   330   442   442 
                                1132 
 BinaryCompound                  435   436 
 bodies                          713   726 
 BODY                            694 
 BodyWith                        692 
 BodyWithLine                    691 
 BOOLEAN                          66   580   668   847 
 by                              530   687   713 

-C-
 Call                            149   149   201   201   271   330   414   414 
                                 928   929   930  1077  1127 
 CantHappen                       52  1010  1013  1016 
 CantHappenPos                    52 
 CARDINAL                         56  1293 
 CASE                             84   138   185   270   329   399   498   897 
                                1259  1295  1306 
 Case                           1210  1290  1299  1317 
 Cases                          1190  1210 
 Class                            86    89    93    98   100   187   189   191 
                                 191   255   260   264   264   313   318   323 
                                 323   491   504   506  1316  1324 
 Classes                        1315  1323 
 Close                           549   739   742   744 
 CloseLine                       741 
 Code                            994  1002 
 Codes                           534   534   535   535   540   540   541   541 
                                 543   543   544   544   691   691   692   692 
                                 700   700   701   701   734   734   735   735 
                                 741   741   742   742 
 CommonTestElim                  786   826   868  1175  1178  1183  1184  1187 
                                1208  1214  1217  1300  1308 
 CommonTestElim2                1171  1196  1203 
 Compose                         139   140   186   186   253   254   257   261 
                                 265   311   312   400   400   902  1069  1121 
                                1264 
 Composer                        294   301   304   305   308   320   333   337 
                                 344   350   352 
 CompoundOperator                439 
 Concatenate                      45   231   480 
 Condition                       933  1080 
 ConsPatterns                    357   366   369   427 
 ConsTempos                      362   371   377   381   388 
 ConsType                       1012  1032  1043 

-D-
 DEC                            1303 
 Decided                        1213 
 Decision                       1189  1292  1298  1299  1300  1302 
 Decisions                       786   787   826   827   868   869  1171 
 declarations                    709 
 DECLARE                         257   261   265   315   319   324   500   505 
                                 882   884   921  1168  1192  1194  1199  1244 
                                1246  1284 
 Declare                         883  1050  1054  1060  1065  1066  1068  1073 
                                1077  1078  1081  1082  1085  1086  1087  1090 
                                1091  1094  1100  1101  1104  1105  1108  1111 
                                1119  1125  1128  1129  1130  1133  1134  1139 
                                1142  1143  1193  1245 
 Decls                            64   887  1058  1064  1202  1250 
 Decompose                        85    85   499   501   506  1107  1166 
 define                          520   521   697   698 
 Designator                     1005 
 DO                               85   103   105   118   149   157   186   201 
                                 206   254   287   312   348   360   386   404 
                                 414   437   442   461  1297  1314  1321 
 DontCare                        131   177   241   300   361   362   387   388 
                                1110 
 DontCare1                       412   903  1069  1097  1113  1264 
 DontCare1Explicit               115   144   196   275   335   412   507 
 DontCare1Internal               115   144   196   275   335   412   507 
 DontCareExplicit                116 
 DontCareInternal                116 

-E-
 ELSE                             95   267   278   326   339   363   378   389 
                                 407   423   428   486   508   565   572   626 
                                 644   662   758   770   784   801   814   824 
                                 841   854   866   908   946   988  1200  1209 
                                1268 
 ElsePart                       1208  1217  1302 
 ELSIF                           581 
 END                              72    73    82    97    98    99   101   107 
                                 108   109   110   113   121   123   124   126 
                                 130   131   134   154   155   160   171   172 
                                 176   177   180   192   204   209   220   221 
                                 233   240   244   248   265   266   269   279 
                                 281   290   291   292   299   303   306   324 
                                 325   328   340   342   353   354   355   359 
                                 364   367   368   369   375   380   381   385 
                                 390   393   394   395   409   410   430   432 
                                 433   440   444   463   464   465   487   494 
                                 495   497   509   511   551   567   578   583 
                                 585   589   591   631   633   649   651   667 
                                 669   724   737   744   749   763   772   778 
                                 783   789   790   791   806   816   829   830 
                                 831   846   856   862   871   872   873   885 
                                 892   911   914   915   919   920   921   922 
                                 936   948   960   990  1071  1072  1074  1099 
                                1116  1124  1156  1156  1168  1180  1197  1199 
                                1204  1206  1211  1218  1247  1249  1254  1271 
                                1274  1275  1279  1280  1281  1284  1285  1301 
                                1304  1306  1318  1325  1326 
 equal                           106   120  1232  1237 
 equalt                          521 
 EXIT                             98   107   113   121   936   956  1179 
 Export                          544 
 ExportLine                      543 
 Expr                            119   121   122   131   132   150   163   166 
                                 170   177   178   202   212   215   219   241 
                                 245   300   304   387   388   391   415   447 
                                 450   453   455   457   678   901   902   905 
                                 906   909   910   935   936   937   943   949 
                                 951  1068  1069  1081  1086  1104  1119  1128 
                                1139  1142  1174  1177  1236  1238  1263  1264 
                                1265  1266  1269  1270 
 Expression                      121   274   334   391   397   415   438   439 
                                 443   443   447   450   453   455   465   905 
                                 910   929   936   947   949  1238  1265  1270 
 Expressions                     383   392   395   425   429   453 
 Exprs                           140   151   167   191   203   216   264   323 
                                 416   425   453   677   895   896  1066  1125 
                                1129  1143  1257  1258 
 Extensions                       93 

-F-
 f                                51   459   535   541   544   692   701   735 
                                 742   767   811   851   974   994  1002 
 Fail                            958 
 FALSE                           785   825   865   867   870   960  1156  1207 
                                1216 
 Field                          1009  1028  1046 
 file                             71   530   687 
 FOR                            1321 
 Formal                           80    87    90   105   120   125   238   247 
                                 262   274   276   277   285   287   297   305 
                                 321   334   336   338   346   348   373   376 
                                 377   406   462   474   476   483   488   489 
                                 492   493   502   510   582   588   650   807 
                                 945   987  1006  1052  1059  1070  1149 
 FormalName                      469   476   479   484   485   490   502 
 Formals                          75    80    87    90   100   120   125   191 
                                 235   238   242   245   247   250   262   264 
                                 274   276   277   283   285   287   294   297 
                                 301   304   305   308   321   323   334   336 
                                 338   344   346   348   467   483   497   502 
                                 504   506   510 
 Forward                         709 
 ForwardDecls                    616   634   652   670   711 
 FROM                             42    43    44    45    46    47    48    49 
                                  50    51    52 
 FUNCTION                        564   640   658   797   837 
 Function                        562   581   582   636   795 

-G-
 generated                       530   687 
 GetRule                          50  1201 
 GetString                        46   479 
 GLOBAL                           40 
 Global                          701 
 GlobalLine                      700 

-H-
 HasExit                        1215  1248  1280 
 HasPatterns                     902  1069  1264 
 HasRejectOrFail                 894  1256 
 HasTempos                       880   921  1063  1243  1282 

-I-
 i                                56  1210  1296 
 Ident                           977 
 IdentifyVar                      49  1058 
 Idents                           46 
 IF                               70    79    87    93    94    96    98   104 
                                 106   107   113   113   120   121   130   131 
                                 152   176   177   237   241   253   285   296 
                                 300   311   346   359   361   364   373   375 
                                 385   387   390   405   416   426   474   476 
                                 497   559   561   569   579   589   591   619 
                                 623   637   641   655   659   755   765   776 
                                 779   781   787   798   809   821   827   838 
                                 849   860   863   869   880   889   894   902 
                                 916   921   936   936   944   960   985  1063 
                                1067  1069  1097  1114  1122  1155  1156  1156 
                                1190  1191  1197  1204  1215  1221  1225  1229 
                                1232  1237  1243  1248  1251  1256  1264  1276 
                                1280  1282  1298  1322 
 IMPORT                           42    43    44    45    46    47    48    49 
                                  50    51    52 
 Import                          541 
 ImportLine                      540 
 IN                              591 
 INC                             228   593 
 include                         703 
 Index                           165   166   167   214   215   216   272   331 
                                 452   453   453  1141 
 InForm                          569   575   623   628   641   646   659   664 
                                 755   760   774   777   798   803   818   838 
                                 843   858   861 
 InFormals                        61   774   818   858   888   891  1253 
 INTEGER                          58   357   357   371   371   383   383 
 IntToString                      45   230 
 IO                               43 
 IS                              538   695   716   733   740   764   808   848 
                                1295 
 IsElement                        48   675   776   779   781   787   821   860 
                                 863  1322 
 IsEmpty                          48  1298 
 IsEqual                         521 
 IsExtern                        619   637   655 
 IsNotEqual                       48    88 
 IsOutput                        591 
 IsType                           80    96   131   177   238   241   285   297 
                                 300   346   361   373   387   474   903  1069 
                                1097  1225  1264 

-J-
 j                                56  1321  1322  1323 

-K-
 kFunction                        55   817   900  1067  1262 
 Kind                             79    84    87    93    94   130   138   176 
                                 185   237   253   270   296   311   329   359 
                                 385   399   416   417   418   497   497   498 
                                 561   562   569   570   579   581   623   624 
                                 641   642   659   660   676   677   678   755 
                                 756   798   799   838   839   902  1069  1191 
                                1221  1264  1295 
 kPredicate                       55   857   913   960  1156  1273 
 kProcedure                       55   773   898  1260 

-L-
 LayoutAny                      1001 
 Layouts                         998 
 Line                             68    70    70    71    71   765   809   849 
                                 879  1242 
 line                             71 
 ListCount                        57   357   359   362   364   366   371   375 
                                 377   379   383   385   388   390   392   425 
                                 427   427   429   429   453   574   589   593 
                                 621   639   657   753   796   836 
 LNewFormalName                  471   481   482   485 
 Local                           767   811   851 
 LocalLine                       765   766   809   810   849   850 
 LookupClass                      49  1315  1323 
 LOOP                            886   920  1176  1180  1248  1280 
 Lop                             158   207   438   443  1133 
 LString1                        472   478   480   481 
 LString2                        472   479   480 

-M-
 MacroAda                         38   514   517   522 
 MakeIdent                        46   232   481 
 MakeWith                        225   233   256   314 
 Match                            75   100   125   126   153   888 
 MatchExpr                       122   132   136   150   158   159   163   166 
                                 170   172   906   909   930   937   950   951 
                                1177  1266  1269 
 MatchExprs                      128   133   134   140   151   167   896  1258 
 Maximum                          48  1321 
 mechanically                    530   687 
 Minimum                          48  1315  1321 

-N-
 n                              1293  1296  1297  1303 
 Name                             86    98   187   189   191   255   260   262 
                                 264   274   277   288   313   318   321   323 
                                 334   338   351   376   408   476   488   491 
                                 492   502   520   521   521   521   555   558 
                                 568   590   597   597   606   622   640   658 
                                 754   769   771   791   797   813   815   831 
                                 837   853   855   873  1019  1030  1034  1037 
                                1053  1058  1059  1150  1155  1156  1222  1222 
                                1225  1226  1226  1311  1311  1316  1316  1324 
                                1324 
 NeedsDeclareRenames             673   889   916  1251  1276 
 NeedsMatch                       50  1174 
 NeedsNoFinale                    50   787   827   869 
 NeedsTempo                       50  1191 
 NEW                             188   259   317 
 New_Line                        698   722 
 Next                            125   125   133   179   247   247   289   305 
                                 305   352   366   377   392   493   510   510 
                                 522   556   586   594   612   634   652   670 
                                 793   833   875   924   931   938   952   965 
                                 970   975   991   995   999  1003  1007  1029 
                                1033  1044  1054  1060  1078  1082  1087  1091 
                                1094  1101  1105  1152  1164 
 Nil                             143   195   271   330   402 
 NilTest                         112   113   507 
 Nl                              967 
 No                             1155 
 NoClass                          93 
 NodeTypes                        86    89    90   187   255   313   596  1018 
                                1154  1222  1225  1226  1298  1311  1314  1320 
 NoExpr                          130   176   237   296   385   416   418   677 
                                 678 
 NoFormal                        497   569   570   623   624   641   642   659 
                                 660   755   756   798   799   838   839 
 NoIdent                          46  1097  1114  1122 
 NoPattern                        79   359   417   497 
 NoStatement                     676 
 NOT                              80    96   106   120   238   297   619   637 
                                 655   787   827   869   894   903   936  1069 
                                1097  1191  1243  1256  1264  1282  1298 
 NoTree                           51   104   152   405   426   559   944   985 
 NULL                            113   402   520  1229  1305 

-O-
 Object                           86    89    93    98   100   104   105   152 
                                 153   187   189   191   191   255   260   264 
                                 264   313   318   323   323   405   406   426 
                                 462   468   491   501   501   504   506   559 
                                 561   562   569   570   575   576   579   581 
                                 582   944   945   985   987  1006 
 OF                               84   138   185   270   329   399   498   897 
                                1259 
 of                              709 
 OneExpr                         131   132   133   177   178   179   241   245 
                                 247   300   304   305   386  1103 
 OnePattern                       83   125   360   498   501   506   510  1096 
                                1162 
 OneTest                        1171  1171  1175  1177  1183  1191  1196  1203 
                                1295  1295  1298  1299 
 Operator                        438   443   447   450   705 
 Operators                       606 
 Optimize                         50 
 Options                          51   675   776   779   781   787   821   860 
                                 863 
 OR                               80    87   238   297   418   497   562   677 
                                 678 
 ORD                             675   776   779   781   787   821   860   863 
 OTHERS                         1305 
 OUT                             591 
 OutForm                         153   570   576   624   629   642   647   660 
                                 665   756   761   775   799   804   819   839 
                                 844   859 
 OutFormals                       62   775   819   859   895  1257 

-P-
 PACKAGE                         537   694 
 PackBody                         38   106   120   276   288   336   349   457 
                                 683   728   780   793   822   833   864   875 
                                 893   924   931   938   952   964   965   970 
                                 975   991   995   998   999  1003  1007  1232 
                                1237  1255 
 PackSpec                         38   483   489   526   533   546   556   575 
                                 576   582   586   592   594   628   629   646 
                                 647   650   664   665   690   760   761   803 
                                 804   807   843   844  1053  1059  1070  1098 
                                1115  1123 
 Param                          1056 
 Parameters                     1090 
 Parents                         169   170   218   219   272   331   455   455 
                                1138 
 Path                             94    96   106   107   113   121   406   462 
                                 591   945   987  1006  1221  1225  1229  1232 
                                1237  1295 
 Path2                          1233 
 Pattern                          77    83    83    84    85   103   107   113 
                                 118   361   362   365   365   498   501   506 
                                1097  1097  1097  1098  1098  1098  1098  1100 
                                1163 
 Patterns                        100   153   417   418   427   429   506   888 
                                 891   918  1065  1108  1130  1167  1253  1278 
 Pos                             927   934   941   955   959   963   968   973 
 Positions                        42 
 PostOperator                    162   211   272   331   449   450   450  1137 
 PREDICATE                       673 
 Predicate                       561   579   654   835 
 PreOperator                     162   163   211   212   271   330   446   447 
                                 447  1136 
 PrevWith                        294   301   304   305   308   320   333   337 
                                 344   350   352 
 ProcCall                        926  1076 
 PROCEDURE                        68    75   128   136   174   182   225   235 
                                 250   283   294   308   344   357   371   383 
                                 397   467   470   514   526   548   549   566 
                                 603   616   622   683   715   732   739   754 
                                1026  1040  1050  1147  1160  1171  1187  1290 
 Procedure                       618   752 
 PUBLIC                           38 
 Public                          546 
 Puma                            713 
 puma                            530   687 
 PumaSys                         689   723 
 Put                             697   717   720   721 

-R-
 RAISE                           723 
 Reject                          954 
 RENAMES                         484   490 
 Renames                         500 
 renames                         505  1168 
 RETURN                           81   116   130   131   176   177   232   239 
                                 243   298   302   359   362   366   377   379 
                                 385   388   392   497   508   580   582   650 
                                 668   807   847   865   870   898   907   910 
                                 913   960  1156  1260  1267  1270  1273 
 ReturnForm                      582   650   807   820 
 ReturnFormals                    63   820  1070 
 Rop                             159   208   439   443  1134 
 Routine                         153   569   570   575   576   726 
 routine                         713   719 
 RoutineKind                      55   773   817   857   897   960  1067  1156 
                                1259 
 Routines                        711   728 
 routines                        709   713   730 
 Rule                            673   675   877  1062  1202  1214  1215  1215 
                                1240 
 rule                             59  1191  1193  1201  1202 
 Rules                           780   822   864 

-S-
 s                               697   697 
 Semantics                        49 
 Sets                             48 
 Set_Output                      747 
 SourceFile                       51 
 Spec                            516   528   685 
 SpecWith                        535 
 SpecWithLine                    534 
 Standard                        730 
 Standard_Output                 718   720   721   722   747 
 Statement                      1093 
 Statements                      676   893  1073  1255 
 StdOutput                        43 
 Stmt                            964 
 STRING                          715 
 String                          459   974 
 String1                         226   229   231   232 
 String2                         226   230   231 
 StringExpr                      146   198   272   331   459   459 
 StringMem                        44 
 Strings                          45 
 Subcompose                      315   319   324 

-T-
 t                                75    79    83   125   128   130   131   132 
                                 133   136   138   140   149   157   163   166 
                                 167   170   174   176   177   178   179   182 
                                 185   186   201   206   212   215   216   219 
                                 235   237   241   245   247   250   253   254 
                                 258   268   270   274   294   296   300   304 
                                 305   308   311   312   316   327   329   334 
                                 357   359   360   371   373   376   377   383 
                                 385   386   397   399   400   404   412   414 
                                 436   442   447   447   450   450   453   453 
                                 455   457   459   461   467   497   498   501 
                                 506   510   514   526   597   603   616   673 
                                 683   883   889   903   916  1019  1026  1040 
                                1048  1050  1069  1147  1160  1187  1210  1245 
                                1251  1264  1276  1290  1298  1299  1300  1302 
                                1302  1308 
 TargetExpr                      145   197   272   331   457   457 
 TargetStmt                      962  1089 
 Tempo                           188   191   365   400   412   905   907  1070 
                                1097  1098  1114  1115  1122  1123  1265  1267 
 Tempos                          362   388   882   884   921  1111  1192  1194 
                                1199  1244  1246  1284 
 TemposDone                       66   785   825   867  1191  1195  1207  1216 
                                1243  1282 
 TestIsType                     1224  1298  1313 
 TestKind                       1220  1310 
 TestNil                        1228 
 TestNonlin                     1231 
 TestValue                      1173  1177  1191  1235 
 Texts                            47 
 Text_Io                         532   689   697   698   717   718   720   720 
                                 721   721   722   722   747   747 
 Tg1                             777   861  1147  1151  1152 
 Tg2                             467   506   510   511   891  1253 
 Tg2Attrs                        470   493   495   504 
 Tg3                             918  1160  1163  1164  1167  1278 
 TheClass                         60  1315  1316  1323  1324 
 THEN                             70    81    92    93    98   104   107   113 
                                 121   130   131   152   176   177   239   241 
                                 253   286   298   300   311   347   359   361 
                                 364   374   375   385   387   390   405   422 
                                 426   475   477   497   560   563   571   579 
                                 581   589   591   620   625   638   643   656 
                                 661   757   765   776   779   781   787   800 
                                 809   821   827   840   849   860   863   869 
                                 881   890   894   904   917   921   936   944 
                                 960   986  1063  1067  1069  1097  1114  1122 
                                1156  1156  1190  1191  1215  1222  1226  1229 
                                1233  1238  1243  1248  1252  1256  1264  1277 
                                1280  1283  1298  1322 
 TheName                          65  1150  1155 
 ThenPart                       1173  1178  1182  1184  1191  1196  1201  1203 
                                1300 
 This                            530   687 
 tIdent                           46    65    76   183   225   251   294   308 
                                 309   344   469   471 
 TO                             1321 
 tPosition                        42    68 
 TRAFO                            36 
 TrafoName                       537   548   549   551   694   732   737   739 
                                 744   746   748   749 
 TREE                             37 
 Tree                             37    51    79    80    80    85    87    93 
                                 103   112   115   115   116   116   118   130 
                                 131   131   139   142   143   144   144   145 
                                 146   147   149   157   162   162   165   169 
                                 176   177   177   186   194   195   196   196 
                                 197   198   199   201   206   211   211   214 
                                 218   237   238   238   241   241   253   271 
                                 271   271   271   271   272   272   272   272 
                                 272   273   275   275   285   285   296   297 
                                 297   300   300   311   330   330   330   330 
                                 330   331   331   331   331   331   332   335 
                                 335   346   346   359   361   361   373   373 
                                 385   387   387   400   402   404   412   412 
                                 414   416   417   418   435   442   446   449 
                                 452   455   457   459   461   474   474   497 
                                 497   499   507   507   507   507   507   514 
                                 526   561   562   569   570   579   581   603 
                                 616   623   624   641   642   659   660   676 
                                 677   678   683   755   756   798   799   838 
                                 839   902   903   903  1026  1040  1050  1069 
                                1069  1069  1097  1097  1147  1160  1187  1191 
                                1264  1264  1264  1290 
 TreeName                         76    86    86    86    96    98   183   187 
                                 187   187   188   251   255   255   255   258 
                                 258   259   309   313   313   313   316   316 
                                 317   519   554   597   597   597   597   605 
                                1019  1019  1155  1155  1156  1156  1222  1222 
                                1225  1225  1226  1226  1311  1311  1315  1315 
                                1316  1316  1323  1323  1324  1324 
 TreeNames                       517   533   690   707 
 TreeOperators                   603   612   707 
 TRUE                            913  1195  1273 
 tString                          45   226   472 
 tTree                            51    64    75    77   128   136   174   182 
                                 235   250   283   294   308   344   357   371 
                                 383   397   467   468   470  1057 
 Type                            462   600  1006  1022 
 TypeDesc                         86    87    89    90   106   120   187   255 
                                 276   288   313   336   349   483   489   582 
                                 592   650   807  1053  1059  1070  1098  1115 
                                1123  1151  1222  1225  1226  1232  1237  1298 
                                1311  1314  1317 
 Types                            89    90  1298  1315  1321  1321  1322 

-U-
 USE                             606 
 used                            713 
 UserType                         87   599  1021 
 Utility                         713 

-V-
 Value                           118   118   507  1118 
 VAR                              54    76    77   183   226   251   309   468 
                                 469   471   472  1057  1293 
 Var                             591  1015  1036  1047  1057  1058  1059 
 VarDecls                        887  1064  1202  1250 
 VarDef                          103   103   107   507 
 VarUse                          142   194   271   330   404   404 
 Visibility                      705 

-W-
 was                             530   687 
 WHEN                           1305  1311  1316 
 WHILE                          1297 
 WI                               51    96    98    98   188   188   189   258 
                                 258   258   259   260   262   262   274   277 
                                 288   316   316   316   317   318   320   320 
                                 321   321   333   333   334   337   337   338 
                                 350   350   351   365   376   400   408   412 
                                 438   439   443   447   450   462   462   482 
                                 484   488   490   491   492   520   521   521 
                                 521   537   548   549   551   555   568   590 
                                 597   597   600   606   622   640   658   694 
                                 732   737   739   744   746   748   749   754 
                                 769   771   791   797   813   815   831   837 
                                 853   855   873   905   907   989  1006  1006 
                                1019  1022  1030  1034  1037  1053  1059  1070 
                                1098  1115  1123  1155  1155  1156  1222  1222 
                                1225  1226  1226  1265  1267  1311  1311  1316 
                                1316  1324  1324 
 WITH                             85   103   105   118   149   157   186   201 
                                 206   254   287   312   348   360   386   404 
                                 414   436   442   461   532   689  1314 
 With                            251   256   258   262   264   309   314   316 
                                 321   323 
 WithCount                        58   228   230   878  1241 
 WN                               51    71 
 WriteLine                        68    73   534   540   543   691   700   734 
                                 741   766   810   850   879   927   934   941 
                                 955   959   963   968   973  1242 
 WriteNl                          43 
 WritePath                        94    96   106   107   113   121   406   462 
                                 945   987  1006  1040  1221  1225  1229  1232 
                                1233  1237  1295 
 WritePathRecurse               1026  1029  1033  1044  1048 
 WriteS                           43 
 WriteStr                        972 
 WriteString                      44   459   974   994  1002 
 WriteText                        47   535   541   544   692   701   735   742 
                                 767   811   851 

-Y-
 yyAbort                         715   724   782   788   823   828 
 yyFunction                      715   720 
 yyNode                          189   260   318 
 yyWrite                         697   974 
 yyWriteNl                       698   969 

-_-
 _                              1182 

end cross reference, 3204 occurrences of 361 identifiers.
