(* $Id: estra.mi,v 2.3 1992/08/07 15:47:31 grosch rel $ *)

MODULE	estra;

FROM ArgCheck	IMPORT	CheckArgs, TEST;
FROM CodeM2	IMPORT	MakeCodeM2;
FROM Errors	IMPORT	ErrorTable, SaveProc, WriteProc,
				InError, BeginErrors, CloseErrors;
FROM Info	IMPORT	SaveInfo, WriteInfo;
FROM IO		IMPORT	StdOutput, CloseIO;
FROM Match	IMPORT	MakeTables;
FROM Parser	IMPORT	Parser, CloseParser, ParsTabName;
FROM Path	IMPORT	InsertPath;
FROM Scanner	IMPORT	ScanTabName;
FROM Semantics	IMPORT	Semantic, Correct;
FROM System	IMPORT	Exit;
FROM Test	IMPORT	WriteTest;

(* ESTRA_ *)
FROM ArgCheck	IMPORT	TREE, GRAM;
FROM Grammar	IMPORT	WriteGrammar;
FROM Parser	IMPORT	AST;
FROM Test	IMPORT	WriteStepTime;
FROM Tree	IMPORT	WriteTree;
(* _ESTRA *)

VAR
  errors : INTEGER;

BEGIN
  SaveProc := SaveInfo;
  WriteProc := WriteInfo;
  InsertPath (ErrorTable);
  InsertPath (ParsTabName);
  InsertPath (ScanTabName);
  BeginErrors;
  CheckArgs;
  (* ESTRA_ *) WriteStepTime ('initialize'); (* _ESTRA *)
  errors := Parser (); CloseParser;
  (* ESTRA_ *) WriteStepTime ('Parser'); (* _ESTRA *)
  Semantic;
  (* ESTRA_ *) WriteStepTime ('Semantics'); (* _ESTRA *)
  IF Correct THEN
    MakeTables;
    (* ESTRA_ *) WriteStepTime ('MakeTables'); (* _ESTRA *)
    MakeCodeM2;
    (* ESTRA_ *) WriteStepTime ('MakeCodeM2'); (* _ESTRA *)
  END;
  CloseErrors;

  (* ESTRA_ *)
  IF TREE THEN WriteTree (StdOutput, AST); END;
  IF GRAM THEN WriteGrammar (StdOutput); END;
  (* _ESTRA *)

  IF TEST THEN
    WriteTest;
  END;

  CloseIO;

  IF InError THEN
    Exit (1);
  ELSE
    Exit (0);
  END;
END estra.
