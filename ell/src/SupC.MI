(*
 *	ell2 - a redesign of ell
 *
 *	$RCSfile: SupC.MI,v $
 *	
 *	purpose:	generate supported modules (C)
 *
 *	$Author: grosch $
 *	$Date: 1992/10/15 18:26:55 $
 *)

IMPLEMENTATION MODULE SupC;

.. $ WriteNl (file);
.. % WriteS (file, '%');
.. n WriteI (file, %, 0);
.. i WriteIdent (file, %);
.. s WriteS (file, %);

FROM ArgCheck	IMPORT	SourceFileName;
FROM Checks	IMPORT	CheckWriteOpen;
FROM IO		IMPORT	tFile, WriteC, WriteS, WriteI, WriteNl, WriteOpen, WriteClose;
FROM Strings	IMPORT	tString, Char, ArrayToString, Concatenate, Append, StringToArray;
FROM Idents	IMPORT	tIdent, NoIdent, WriteIdent, GetString, MakeIdent;
FROM Tree	IMPORT	ScannerName, ParserName;

CONST
  cErrDef = 'Errors.h';
  cErrImp = 'Errors.c';
  cDrvImp = 'Drv.c';
  cScaDef = '.h';
  cScaImp = '.c';

VAR
  PathS, String	: tString;
  PathA		: ARRAY [0..128] OF CHAR;

PROCEDURE ErrC;
  VAR file: tFile;
  BEGIN
    file := WriteOpen (cErrDef);
    CheckWriteOpen (file, cErrDef);

.	# ifndef yyErrors
.	# define yyErrors
.
.	# include "Positions.h"
.
.	# define xxNoText		0
.	# define xxSyntaxError		1	/* error codes		*/
.	# define xxExpectedTokens	2
.	# define xxRestartPoint		3
.	# define xxTokenInserted	4
.
.	# define xxFatal		1	/* error classes	*/
.	# define xxRestriction		2
.	# define xxError		3
.	# define xxWarning		4
.	# define xxRepair		5
.	# define xxNote			6
.	# define xxInformation		7
.
.	# define xxNone			0
.	# define xxInteger		1	/* info classes		*/
.	# define xxShort		2
.	# define xxLong			3
.	# define xxReal			4
.	# define xxBoolean		5
.	# define xxCharacter		6
.	# define xxString		7
.	# define xxSet			8
.	# define xxIdent		9
.
.	# if defined __STDC__ | defined __cplusplus
.	# define ARGS(parameters)	parameters
.	# else
.	# define ARGS(parameters)	()
.	# endif
.
.	extern void (* Errors_Exit) ();
.
.	extern void ErrorMessage  ARGS((short yyErrorCode, short yyErrorClass, tPosition yyPosition));
.	extern void ErrorMessageI ARGS((short yyErrorCode, short yyErrorClass, tPosition yyPosition, short yyInfoClass, char * yyInfo));
.	extern void Message  ARGS((char * yyErrorText, short yyErrorClass, tPosition yyPosition));
.	extern void MessageI ARGS((char * yyErrorText, short yyErrorClass, tPosition yyPosition, short yyInfoClass, char * yyInfo));
.
.	# endif

    WriteClose (file);

    file := WriteOpen (cErrImp);
    CheckWriteOpen (file, cErrImp);

.	# include "Errors.h"
.	# include <stdio.h>
.
.	# ifdef __cplusplus
.	extern "C" \{
.	#  include "System.h"
.	#  include "Sets.h"
.	#  include "Idents.h"
.	\}
.	# else
.	#  include "System.h"
.	#  include "Sets.h"
.	#  include "Idents.h"
.	# endif
.
.	static void yyExit () \{ Exit (1); \}
.
.	void (* Errors_Exit) () = yyExit;
.
.	static void WriteHead
.	# if defined __STDC__ | defined __cplusplus
.      \   (short yyErrorClass, tPosition yyPosition)
.	# else
.      \   (yyErrorClass, yyPosition) short yyErrorClass; tPosition yyPosition;
.	# endif
.	\{
.      \   WritePosition (stderr, yyPosition);
.      \   (void) fputs (": ", stderr);
.      \   switch (yyErrorClass) \{
.      \   case xxFatal		: (void) fputs ("Fatal       ", stderr); break;
.      \   case xxRestriction	: (void) fputs ("Restriction ", stderr); break;
.      \   case xxError		: (void) fputs ("Error       ", stderr); break;
.      \   case xxWarning	: (void) fputs ("Warning     ", stderr); break;
.      \   case xxRepair	: (void) fputs ("Repair      ", stderr); break;
.      \   case xxNote		: (void) fputs ("Note        ", stderr); break;
.      \   case xxInformation	: (void) fputs ("Information ", stderr); break;
.      \   default		: (void) fprintf (stderr, "Error class: %d ", yyErrorClass);
.      \   \}
.	\}
.
.	static void WriteTail
.	# if defined __STDC__ | defined __cplusplus
.      \   (short yyErrorClass)
.	# else
.      \   (yyErrorClass) short yyErrorClass;
.	# endif
.	\{
.. % WriteS (file, "%");
.      \   (void) fputc ('\\n', stderr);
.. % WriteS (file, '%');
.      \   if (yyErrorClass == xxFatal) Errors_Exit ();
.	\}
.
.	static void WriteCode
.	# if defined __STDC__ | defined __cplusplus
.      \   (short yyErrorCode)
.	# else
.      \   (yyErrorCode) short yyErrorCode;
.	# endif
.	\{
.      \   switch (yyErrorCode) \{
.      \   case xxNoText	: break;
.      \   case xxSyntaxError	: (void) fputs ("syntax error"		, stderr); break;
.      \   case xxExpectedTokens: (void) fputs ("expected tokens"	, stderr); break;
.      \   case xxRestartPoint	: (void) fputs ("restart point"		, stderr); break;
.      \   case xxTokenInserted	: (void) fputs ("token inserted "	, stderr); break;
.      \   default		: (void) fprintf (stderr, " error code: %d", yyErrorCode);
.      \   \}
.	\}
.
.	static void WriteInfo
.	# if defined __STDC__ | defined __cplusplus
.      \   (short yyInfoClass, char * yyInfo)
.	# else
.      \   (yyInfoClass, yyInfo) short yyInfoClass; char * yyInfo;
.	# endif
.	\{
.      \   (void) fputs (": ", stderr);
.      \   switch (yyInfoClass) \{
.      \   case xxInteger	: (void) fprintf (stderr, "%d", * (int *)	yyInfo); break;
.      \   case xxShort		: (void) fprintf (stderr, "%d", * (short *)	yyInfo); break;
.      \   case xxCharacter	: (void) fprintf (stderr, "%c", *		yyInfo); break;
.      \   case xxString	: (void) fputs	 (yyInfo, stderr);			 break;
.      \   case xxSet		: WriteSet	 (stderr, (tSet *)		yyInfo); break;
.      \   case xxIdent		: WriteIdent	 (stderr, * (tIdent *)		yyInfo); break;
.      \   default		: (void) fprintf (stderr, "info class: %d", yyInfoClass);
.      \   \}
.	\}
.
.	void ErrorMessage
.	# if defined __STDC__ | defined __cplusplus
.      \   (short yyErrorCode, short yyErrorClass, tPosition yyPosition)
.	# else
.      \   (yyErrorCode, yyErrorClass, yyPosition)
.      \   short yyErrorCode, yyErrorClass; tPosition yyPosition;
.	# endif
.	\{
.      \   WriteHead (yyErrorClass, yyPosition);
.      \   WriteCode (yyErrorCode);
.      \   WriteTail (yyErrorClass);
.	\}
.
.	void ErrorMessageI
.	# if defined __STDC__ | defined __cplusplus
.      \   (short yyErrorCode, short yyErrorClass, tPosition yyPosition, short yyInfoClass, char * yyInfo)
.	# else
.      \   (yyErrorCode, yyErrorClass, yyPosition, yyInfoClass, yyInfo)
.      \   short yyErrorCode, yyErrorClass; tPosition yyPosition; short yyInfoClass; char * yyInfo;
.	# endif
.	\{
.      \   WriteHead (yyErrorClass, yyPosition);
.      \   WriteCode (yyErrorCode);
.      \   WriteInfo (yyInfoClass, yyInfo);
.      \   WriteTail (yyErrorClass);
.	\}
.
.	void Message
.	# if defined __STDC__ | defined __cplusplus
.      \   (char * yyErrorText, short yyErrorClass, tPosition yyPosition)
.	# else
.      \   (yyErrorText, yyErrorClass, yyPosition)
.      \   char * yyErrorText; short yyErrorClass; tPosition yyPosition;
.	# endif
.	\{
.      \   WriteHead (yyErrorClass, yyPosition);
.      \   (void) fputs (yyErrorText, stderr);
.      \   WriteTail (yyErrorClass);
.	\}
.
.	void MessageI
.	# if defined __STDC__ | defined __cplusplus
.      \   (char * yyErrorText, short yyErrorClass, tPosition yyPosition, short yyInfoClass, char * yyInfo)
.	# else
.      \   (yyErrorText, yyErrorClass, yyPosition, yyInfoClass, yyInfo)
.      \   char * yyErrorText; short yyErrorClass; tPosition yyPosition; short yyInfoClass; char * yyInfo;
.	# endif
.	\{
.      \   WriteHead (yyErrorClass, yyPosition);
.      \   (void) fputs (yyErrorText, stderr);
.      \   WriteInfo (yyInfoClass, yyInfo);
.      \   WriteTail (yyErrorClass);
.	\}

    WriteClose (file);
  END ErrC;

PROCEDURE ParC;
  VAR file: tFile;
  BEGIN
    GetString		(ParserName, PathS);
    ArrayToString	(cDrvImp, String);
    Concatenate		(PathS, String);
    Append		(PathS, 0C);
    StringToArray	(PathS, PathA);
    file := WriteOpen	(PathA);
    CheckWriteOpen	(file, PathA);

.	# include "{i ParserName}.h"
.
.	main ()
.	\{
.      \   (void) {i ParserName} ();
.      \   Close{i ParserName}  ();
.      \   return 0;
.	\}

    WriteClose (file);
  END ParC;

PROCEDURE ScaC;
  VAR
    file	: tFile;
    ScanName	: tIdent;
    String	: tString;

  PROCEDURE Prefix;
    BEGIN
      IF ScannerName # NoIdent THEN
.	  {i ScannerName}_\
      END;
    END Prefix;

  BEGIN
    IF ScannerName = NoIdent THEN
       ArrayToString ("Scanner", String);
       ScanName := MakeIdent (String);
    ELSE
       ScanName := ScannerName;
    END;
    GetString		(ScanName, PathS);
    ArrayToString	(cScaDef, String);
    Concatenate		(PathS, String);
    Append		(PathS, 0C);
    StringToArray	(PathS, PathA);
    file := WriteOpen	(PathA);
    CheckWriteOpen	(file, PathA);

.	# ifndef	yy{i ScanName}
.	# define	yy{i ScanName}
.
.	# if defined __STDC__ | defined __cplusplus
.	# define ARGS(parameters)	parameters
.	# else
.	# define ARGS(parameters)	()
.	# endif
.
.	# include "Positions.h"
.
.	typedef	struct \{ tPosition Position; \} \
    Prefix;
.	tScanAttribute;
.
.	extern	\
    Prefix;
.	tScanAttribute	\
    Prefix;
.	Attribute	;
.	extern	int		\
    Prefix;
.	GetToken	();
.	extern	void		\
    Prefix;
.	ErrorAttribute	ARGS((int Token, \
    Prefix;
.	tScanAttribute * RepairAttribute));
.
.	# endif

    WriteClose (file);

    GetString		(ScanName, PathS);
    ArrayToString	(cScaImp, String);
    Concatenate		(PathS, String);
    Append		(PathS, 0C);
    StringToArray	(PathS, PathA);
    file := WriteOpen	(PathA);
    CheckWriteOpen	(file, PathA);

.	# include <stdio.h>
.	# include "{i ScanName}.h"
.
.	\
    Prefix;
.	tScanAttribute	\
    Prefix;
.	Attribute	= \{\{ 1, 0 \}\};
.
.	int \
    Prefix;
.	GetToken ()
.	\{
.      \   char ch;
.
.      \   do \{
.      \      ch = getchar ();
.. % WriteS (file, "%");
.      \      if (ch == '\\n') \{
.      \        \
    Prefix;
.	Attribute.Position.Column = 0;
.      \        \
    Prefix;
.	Attribute.Position.Line ++;
.      \      \} else \
    Prefix;
.	Attribute.Position.Column ++;
.      \   \} while (ch == ' ' || ch == '\\t' || ch == '\\n');
.. % WriteS (file, '%');
.      \   return ch == -1 ? 0 : ch;
.	\}
.
.	void \
    Prefix;
.	ErrorAttribute (Token, RepairAttribute)
.      \   int Token;
.      \   \
    Prefix;
.	tScanAttribute * RepairAttribute;
.	\{ \}

    WriteClose (file);
  END ScaC;

END SupC.
