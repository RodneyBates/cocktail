(*
 *	ell2 - a redesign of ell
 *
 *	$RCSfile: CodeM2.ESTRA,v $
 *	
 *	purpose:	generation of MODULA2 code
 *
 *	$Author: grosch $
 *	$Date: 1992/10/15 18:26:55 $
 *)

.. ^ Spaces;
.. $ WriteNl (file);
.. + INC (SpaCo%);
.. - DEC (SpaCo%);
.. % WriteS (file, '%');
.. n WriteI (file, %, 0);
.. i WriteIdent (file, %);
.. s WriteS (file, %);
.. c WriteI (file, Code (%), 0);
.. I WriteIndex (file, %);
.. R WriteRecIndex (file, %);

TRANSFORMATION	CodeM2

GLOBAL	{
FROM ArgCheck	IMPORT	DEF, IMP, SourceFileName;
FROM Checks	IMPORT	CheckWriteOpen, CheckOpenOutput;
FROM Codes	IMPORT	cNoIndex, vMaxRecSetIndex, vMaxSetIndex, EmptyRecSetIndex,
			Code, MaxCode, WriteIndex, WriteRecIndex, GetSet, GetRecSet;
FROM DynArray	IMPORT	MakeArray, ReleaseArray;
FROM Errors	IMPORT	ERROR;
FROM IO		IMPORT	tFile, WriteS, WriteI, WriteNl, WriteOpen, WriteClose;
FROM Idents	IMPORT	tIdent, NoIdent, WriteIdent, MaxIdent, GetString;
FROM Sets	IMPORT	tSet, MakeSet, ReleaseSet, Extract, IsEmpty, Assign, IsElement, Exclude;
FROM StringMem	IMPORT	WriteString;
FROM SYSTEM	IMPORT	TSIZE, ADR;
FROM System	IMPORT	OpenOutput, Write, Close;
FROM Scanner	IMPORT	Epsilon;
FROM Types	IMPORT	IsTerm, IsNonterm, Terminals;
FROM Strings	IMPORT	tString, Char, ArrayToString, Concatenate, Append, StringToArray;
FROM Tree	IMPORT	ScannerName, ParserName;

CONST
  cBitsPerBitset	= 32;
  cDefinition		= '.md';
  cImplementation	= '.mi';
  cTable		= '.Tab';

VAR
  file		: tFile;
  SpaCo		: INTEGER;
  vExport	: BOOLEAN;
  InDefault	: BOOLEAN;
  lSections	: Tree.tTree;
  PathS, String	: tString;
  PathA		: ARRAY [0..128] OF CHAR;

PROCEDURE Prefix;
  BEGIN
    IF ScannerName # NoIdent THEN
.	{i ScannerName}\
    ELSE
.	Scanner\
    END;
  END Prefix;

PROCEDURE Spaces;
  VAR i: INTEGER;
  BEGIN FOR i := 1 TO SpaCo DO WriteS (file, '  '); END; END Spaces;

PROCEDURE CodeIsElement (index: INTEGER; set: tSet);
  VAR
    todo: tSet;
    id: tIdent;
  BEGIN
    IF index = cNoIndex THEN
      MakeSet (todo, MaxIdent ());
      Assign (todo, set);
      Exclude (todo, Epsilon);
      IF NOT IsEmpty (todo) THEN
	LOOP
	  id := Extract (todo);
	  WriteS (file, '(xxToken = ');
	  WriteI (file, Code (id), 0);
	  WriteS (file, ' (* ');
	  WriteIdent (file, id);
	  WriteS (file, ' *))');
	  IF IsEmpty (todo) THEN EXIT END;
	  WriteS (file, ' OR ');
	END;
      END;
      ReleaseSet (todo);
    ELSE
      WriteS (file, '(');
      WriteI (file, index MOD cBitsPerBitset, 0);
      WriteS (file, ' IN xxVerticalSet');
      WriteI (file, index DIV cBitsPerBitset, 0);
      WriteS (file, ' [xxToken] (* ');
      WriteIndex (file, index);
      WriteS (file, ' *))');
    END;
  END CodeIsElement;

PROCEDURE CodeRecovery (recover, expect: INTEGER);
  BEGIN
    IF expect = cNoIndex THEN
.     xxUnexpected ({n recover}, xxGlobalRecoverySet); (* {R recover} *)
    ELSE
.     xxExpected ({n expect}, {n recover}, xxGlobalRecoverySet); (* {R expect} / {R recover} *)
    END;
  END CodeRecovery;

PROCEDURE WriteLabels (set: tSet);
  VAR
    todo: tSet;
    id: tIdent;
  BEGIN
    MakeSet (todo, MaxIdent ());
    Assign (todo, set);
    Spaces;
    WriteS (file, '| ');
    IF NOT IsEmpty (todo) THEN
      LOOP
	id := Extract (todo);
	WriteI (file, Code (id), 0);
	WriteS (file, ' (* ');
	WriteIdent (file, id);
	WriteS (file, ' *)');
	IF IsEmpty (todo) THEN EXIT END;
	WriteS (file, ', ');
      END;
    END;
    WriteS (file, ':');
    WriteNl (file);
    ReleaseSet (todo);
  END WriteLabels;

VAR
  NumberArray		: POINTER TO ARRAY [0..1000] OF INTEGER;
  NumberArraySize	: LONGINT;
  MaxNumberArray	: POINTER TO ARRAY [0..1000] OF INTEGER;
  MaxNumberArraySize	: LONGINT;

PROCEDURE ClearArray (VAR a: ARRAY OF INTEGER);
  VAR id: tIdent;
  BEGIN
    FOR id := 0 TO MaxIdent () DO a [id] := 0; END;
  END ClearArray;

PROCEDURE WriteAttributes;
  VAR
    id: tIdent;
    i, max: INTEGER;
  BEGIN
    FOR id := 0 TO MaxIdent () DO
      max := MaxNumberArray^ [id];
      IF max > 0 THEN
.	\
	FOR i := 1 TO max - 1 DO
.	  {i id}{n i}, \
	END;
.	{i id}{n max}: \
	IF IsTerm (id) THEN
	  Prefix;
.	  .tScanAttribute\
	ELSE
.	  tParsAttribute\
	END;
.	;
      END;
    END;
  END WriteAttributes;

PROCEDURE WriteParsTab;
  VAR
    bitset: BITSET;
    set: tSet;
    sets: ARRAY [0..cBitsPerBitset-1] OF tSet;
    size: INTEGER;
    code,i,bit: INTEGER;
    index: INTEGER;
  BEGIN
    GetString		(ParserName, PathS);
    ArrayToString	(cTable, String);
    Concatenate		(PathS, String);
    Append		(PathS, 0C);
    StringToArray	(PathS, PathA);
    file := OpenOutput	(PathA);
    CheckOpenOutput	(file, PathA);

    MakeSet (set, MaxCode ());
    FOR index := 0 TO vMaxRecSetIndex DO
      GetRecSet (index, set);
      FOR i := 0 TO MaxCode () DIV cBitsPerBitset - 1 DO
	bitset := {};
        FOR bit := 0 TO cBitsPerBitset - 1 DO
	  IF IsElement (i * cBitsPerBitset + bit, set) THEN INCL (bitset, bit); END;
	END;
	size := Write (file, ADR (bitset), TSIZE (BITSET));
      END;
        i := MaxCode () DIV cBitsPerBitset;
	bitset := {};
        FOR bit := 0 TO MaxCode () MOD cBitsPerBitset DO
	  IF IsElement (i * cBitsPerBitset + bit, set) THEN INCL (bitset, bit); END;
	END;
	size := Write (file, ADR (bitset), TSIZE (BITSET));
    END;
    ReleaseSet (set);

    FOR bit := 0 TO cBitsPerBitset - 1 DO
      MakeSet (sets [bit], MaxCode ());
    END;
    FOR i := 0 TO vMaxSetIndex DIV cBitsPerBitset DO
      FOR bit := 0 TO cBitsPerBitset - 1 DO
	index := i * cBitsPerBitset + bit;
	IF index <= vMaxSetIndex THEN
	  GetSet (index, sets [bit]);
        END;
      END;
      FOR code := 0 TO MaxCode () DO
	bitset := {};
	FOR bit := 0 TO cBitsPerBitset - 1 DO 
	  IF IsElement (code, sets [bit]) THEN INCL (bitset, bit); END;
	END;
	size := Write (file, ADR (bitset), TSIZE (BITSET));
      END;
    END;
    FOR bit := 0 TO cBitsPerBitset - 1 DO
      ReleaseSet (sets [bit]);
    END;

    Close (file);
  END WriteParsTab;
}

BEGIN	{
  vExport := FALSE;
  SpaCo := 0;
  InDefault := FALSE;
}

GRAMMAR Tree

grammar		= 
| Grammar	(sections, tokens, rules)

sections	=
| Sections0	()
| Sections	(section, sections)

section		=
| Export	(codes)
| Global	(codes)
| Local		(codes)
| Begin		(codes)
| Close		(codes)

codes		=
| Codes0	()
| Codes		(code, codes)

code		=
| Code		()

tokens		=
| Tokens0	()
| Tokens	(token, tokens)

token		=
| Token		(id, number)

id		=
| Id		()

number		=
| Number	()

rules		=
| Rules0	()
| Rules		(rule, rules)

rule		=
| Rule		(id, codes, expr)

expr		=
| Option	(expr)
| Times		(expr)
| Plus		(expr)
| List		(body: expr, sep: expr)
| Action	(codes)
| Leaf		(id)

expr		->
alternative	=
| Alternative0	()
| Alternative	(expr, alternative)

expr		->
sequence	=
| Sequence0	()
| Sequence	(expr, sequence)


FUNCTION	CODE			/ grammar /

  grammar
		{
		IF DEF THEN
		  CodeDef (grammar);
		END;
		IF IMP THEN
		  CodeImp (grammar);
		  WriteParsTab;
		END;
		}


/*
 *	generate definition of parser
 */

FUNCTION	CodeDef			/ grammar /

  Grammar	(sections, tokens, rules)
		{
		GetString	(ParserName, PathS);
		ArrayToString	(cDefinition, String);
		Concatenate	(PathS, String);
		Append		(PathS, 0C);
		StringToArray	(PathS, PathA);
		file := WriteOpen (PathA);
		CheckWriteOpen	(file, PathA);

.		DEFINITION MODULE {i ParserName};
.
		CodeExport (sections);
		IF NOT vExport THEN	(* Default EXPORT action *)
.		  IMPORT \
		Prefix;
.		  ;
.
.		  TYPE tParsAttribute = \
		Prefix;
.		  .tScanAttribute;
		END;
.
.		VAR
.	       \  ParsAttribute	: tParsAttribute;
.	       \  ParsTabName	: ARRAY [0..128] OF CHAR;
.
.		PROCEDURE {i ParserName} (): INTEGER;
.		PROCEDURE Close{i ParserName} ();
.		PROCEDURE xxTokenName (Token: CARDINAL; VAR Name: ARRAY OF CHAR);
.
.		END {i ParserName}.
		WriteClose (file);
		}


/*
 *	generate implementation of parser
 */

FUNCTION	CodeImp			/ grammar /

  Grammar	(sections, tokens, Rules (Rule (Id (), codes, expr), rules))
		DECLARE	{ VAR
		  i	: INTEGER;
		  set	: tSet;
		  id	: tIdent;
		  s	: tString;
		}
		{
		GetString	(ParserName, PathS);
		ArrayToString	(cImplementation, String);
		Concatenate	(PathS, String);
		Append		(PathS, 0C);
		StringToArray	(PathS, PathA);
		file := WriteOpen (PathA);
		CheckWriteOpen	(file, PathA);

.		IMPLEMENTATION MODULE {i ParserName};
.
.		IMPORT Positions, Errors, \
		Prefix;
.		  , Strings, System, SYSTEM;
.
		CodeGlobal (sections);
		lSections := sections;

.		CONST xxEof = 0;
.
.		TYPE
.	       \  xxtUnionPtr	= POINTER TO xxtUnion;
.	       \  xxtUnion	= RECORD GlobalRecoverySet: xxtUnionPtr; LocalRecoverySet: SHORTCARD; END;
.	       \  xxtSet	= ARRAY [0..{n MaxCode () DIV cBitsPerBitset}] OF BITSET;
.
.		VAR
.	       \  xxToken		: SHORTCARD;
.	       \  xxErrorCount		: INTEGER;
.	       \  xxIsInitialized	: BOOLEAN;
.	       \  xxIsRepairMode	: BOOLEAN;
		IF vMaxRecSetIndex = cNoIndex THEN
.	       \  xxHorizontalSet	: ARRAY [0..0] OF xxtSet;
		ELSE
.	       \  xxHorizontalSet	: ARRAY [0..{n vMaxRecSetIndex}] OF xxtSet;
		END;
		FOR i := 0 TO vMaxSetIndex DIV cBitsPerBitset DO
.	       \  xxVerticalSet{n i}	: ARRAY [0..{n MaxCode ()}] OF BITSET;
		END;
.		
.		PROCEDURE xxTokenName (Token: CARDINAL; VAR Name: ARRAY OF CHAR);
.	       \  PROCEDURE Copy (Source: ARRAY OF CHAR; VAR Target: ARRAY OF CHAR);
.	       \    VAR i, j: CARDINAL;
.	       \    BEGIN
.	       \      IF HIGH (Source) < HIGH (Target)
.	       \      THEN j := HIGH (Source); ELSE j := HIGH (Target); END;
.	       \      FOR i := 0 TO j DO Target [i] := Source [i]; END;
.	       \      IF HIGH (Target) > j THEN Target [j + 1] := CHR (0); END;
.	       \    END Copy;
.	       \  BEGIN
.	       \    CASE Token OF
		MakeSet (set, MaxIdent ());
		Terminals (set);
		Exclude (set, Epsilon);
		WHILE NOT IsEmpty (set) DO
		  id := Extract (set);
		  GetString (id, s);
		  IF (Char (s, 1) = "'") THEN
.. % WriteS (file, '%');
.	       \    | {c id}: Copy ({i id}, Name);
.. % WriteS (file, "%");
		  ELSIF (Char (s, 1) = '"') THEN
.	       \    | {c id}: Copy ({i id}, Name);
		  ELSE
.	       \    | {c id}: Copy ('{i id}', Name);
		  END;
		END;
		ReleaseSet (set);
.	       \    END;
.	       \  END xxTokenName;
.
.		PROCEDURE {i ParserName} (): INTEGER;
.+
.		BEGIN
.+
.		xxErrorCount := 0;
.		Begin{i ParserName};
.		xxToken := \
		Prefix;
.		  .GetToken (); xxIsRepairMode := FALSE;
.		yy{i Id.ident} (ParsAttribute, NIL);
.		IF xxToken # xxEof THEN xxRecoveryLiteral (xxEof, {n EmptyRecSetIndex}, NIL); END;
.		RETURN xxErrorCount;
.-
.		END {i ParserName};
.-
.
.		PROCEDURE xxIsElement (VAR Set: xxtSet; Element: SHORTCARD): BOOLEAN;
.	       \  BEGIN
.	       \    RETURN Element MOD {n cBitsPerBitset} IN Set [Element DIV {n cBitsPerBitset}];
.	       \  END xxIsElement;
.
.		PROCEDURE xxUnexpected (LocalRecoverySet: SHORTCARD; GlobalRecoverySet: xxtUnionPtr);
.	       \  BEGIN
.	       \    IF NOT xxIsRepairMode THEN
.	       \      INC (xxErrorCount);
.	       \      Errors.ErrorMessage (Errors.SyntaxError, Errors.Error, \
		Prefix;
.		        .Attribute.Position);
.	       \      xxSkipTokens (LocalRecoverySet, GlobalRecoverySet);
.	       \    END;
.	       \  END xxUnexpected;
.
.		PROCEDURE xxExpected (ExpectedSet: SHORTCARD; LocalRecoverySet: SHORTCARD; GlobalRecoverySet: xxtUnionPtr);
.	       \  VAR
.	       \    Token		: SHORTCARD;
.	       \    TokenArray		: ARRAY [0..127] OF CHAR;
.	       \    TokenString		: Strings.tString;
.	       \    ContinueString	: Strings.tString;
.	       \  BEGIN
.	       \    IF NOT xxIsRepairMode THEN
.	       \      INC (xxErrorCount);
.	       \      Errors.ErrorMessage (Errors.SyntaxError, Errors.Error, \
		Prefix;
.		        .Attribute.Position);
.	       \      Strings.AssignEmpty (ContinueString);
.	       \      FOR Token := 0 TO {n MaxCode ()} DO
.	       \        IF xxIsElement (xxHorizontalSet [ExpectedSet], Token) THEN
.	       \	  xxTokenName (Token, TokenArray);
.	       \	  Strings.ArrayToString (TokenArray, TokenString);
.	       \	  IF (Strings.Length (ContinueString) + Strings.Length (TokenString) + 1 <= Strings.cMaxStrLength) THEN
.	       \	    Strings.Concatenate (ContinueString, TokenString);
.	       \	    Strings.Append (ContinueString, ' ');
.	       \	  END;
.	       \        END;
.	       \      END;
.	       \      Errors.ErrorMessageI (Errors.ExpectedTokens, Errors.Information, \
		Prefix;
.		        .Attribute.Position, Errors.String, SYSTEM.ADR (ContinueString));
.	       \      xxSkipTokens (LocalRecoverySet, GlobalRecoverySet);
.	       \    END;
.	       \  END xxExpected;
.
.		PROCEDURE xxRecoveryLiteral (Expected: SHORTCARD; LocalRecoverySet: SHORTCARD; GlobalRecoverySet: xxtUnionPtr);
.	       \  VAR TokenString: ARRAY [0..127] OF CHAR;
.	       \  BEGIN
.	       \    IF NOT xxIsRepairMode THEN
.	       \      INC (xxErrorCount);
.	       \      Errors.ErrorMessage (Errors.SyntaxError, Errors.Error, \
		Prefix;
.		        .Attribute.Position);
.	       \      xxTokenName (Expected, TokenString);
.	       \      Errors.ErrorMessageI (Errors.ExpectedTokens, Errors.Information, \
		Prefix;
.			.Attribute.Position, Errors.Array, SYSTEM.ADR (TokenString));
.	       \      xxSkipTokens (LocalRecoverySet, GlobalRecoverySet);
.	       \    END;
.	       \    IF xxToken # Expected THEN
.	       \      xxTokenName (Expected, TokenString);
.	       \      Errors.ErrorMessageI (Errors.TokenInserted, Errors.Repair, \
		Prefix;
.			.Attribute.Position, Errors.Array, SYSTEM.ADR (TokenString));
.	       \    ELSE
.	       \      IF xxToken # xxEof THEN xxToken := \
		Prefix;
.		        .GetToken (); END;
.	       \      xxIsRepairMode := FALSE;
.	       \    END;
.	       \  END xxRecoveryLiteral;
.
.		PROCEDURE xxRecoveryTerminal (Expected: SHORTCARD; LocalRecoverySet: SHORTCARD; GlobalRecoverySet: xxtUnionPtr; VAR RepairAttribute: \
		Prefix;
.		  .tScanAttribute);
.	       \  VAR TokenString: ARRAY [0..127] OF CHAR;
.	       \  BEGIN
.	       \    IF NOT xxIsRepairMode THEN
.	       \      INC (xxErrorCount);
.	       \      Errors.ErrorMessage (Errors.SyntaxError, Errors.Error, \
		Prefix;
.		        .Attribute.Position);
.	       \      xxTokenName (Expected, TokenString);
.	       \      Errors.ErrorMessageI (Errors.ExpectedTokens, Errors.Information, \
		Prefix;
.			.Attribute.Position, Errors.Array, SYSTEM.ADR (TokenString));
.	       \      xxSkipTokens (LocalRecoverySet, GlobalRecoverySet);
.	       \    END;
.	       \    IF xxToken # Expected THEN
.	       \      xxTokenName (Expected, TokenString);
.	       \      Errors.ErrorMessageI (Errors.TokenInserted, Errors.Repair, \
		Prefix;
.			.Attribute.Position, Errors.Array, SYSTEM.ADR (TokenString));
.	       \      \
		Prefix;
.		        .ErrorAttribute (Expected, RepairAttribute);
.	       \    ELSE
.	       \      RepairAttribute := \
		Prefix;
.		        .Attribute;
.	       \      IF xxToken # xxEof THEN xxToken := \
		Prefix;
.		        .GetToken (); END;
.	       \      xxIsRepairMode := FALSE;
.	       \    END;
.	       \  END xxRecoveryTerminal;
.
.		PROCEDURE xxSkipTokens (LocalRecoverySet: SHORTCARD; GlobalRecoverySet: xxtUnionPtr);
.	       \  VAR RecoverySet: xxtSet;
.	       \      TokensSkipped: BOOLEAN;
.	       \  BEGIN
.	       \    RecoverySet := xxHorizontalSet [LocalRecoverySet];
.	       \    INCL (RecoverySet [0], xxEof);
.	       \    WHILE GlobalRecoverySet # NIL DO
		FOR i := 0 TO MaxCode () DIV cBitsPerBitset DO
.	       \      RecoverySet [{n i}] := RecoverySet [{n i}] + xxHorizontalSet [GlobalRecoverySet^.LocalRecoverySet] [{n i}];
		END;
.	       \      GlobalRecoverySet := GlobalRecoverySet^.GlobalRecoverySet;
.	       \    END;
.	       \    TokensSkipped := FALSE;
.	       \    WHILE NOT xxIsElement (RecoverySet, xxToken) DO
.	       \      xxToken := \
		Prefix;
.		        .GetToken ();
.	       \      TokensSkipped := TRUE;
.	       \    END;
.	       \    IF TokensSkipped THEN
.	       \      Errors.ErrorMessage (Errors.RestartPoint, Errors.Information, \
		Prefix;
.		        .Attribute.Position);
.	       \    END;
.	       \    xxIsRepairMode := TRUE;
.	       \  END xxSkipTokens;
.
.		PROCEDURE Begin{i ParserName};
.	       \  VAR
.	       \    xxTableFile: System.tFile;
.	       \    xxSize: CARDINAL;
.	       \  BEGIN
.	       \    IF xxIsInitialized THEN RETURN; END;
		CodeBegin (sections);
.	       \    xxTableFile := System.OpenInput (ParsTabName);
.	       \    IF xxTableFile < 0 THEN
.	       \      Errors.ErrorMessage (Errors.ReadParseTable, Errors.Fatal, Positions.NoPosition);
.	       \    END;
		IF vMaxRecSetIndex # cNoIndex THEN
.	       \    xxSize := System.Read (xxTableFile, SYSTEM.ADR (xxHorizontalSet), SIZE (xxHorizontalSet));
.	       \    IF xxSize # SIZE (xxHorizontalSet) THEN
.	       \      Errors.ErrorMessage (Errors.ReadParseTable, Errors.Fatal, Positions.NoPosition);
.	       \    END;
		END;
		FOR i := 0 TO vMaxSetIndex DIV cBitsPerBitset DO
.	       \    xxSize := System.Read (xxTableFile, SYSTEM.ADR (xxVerticalSet{n i}), SIZE (xxVerticalSet{n i}));
.	       \    IF xxSize # SIZE (xxVerticalSet{n i}) THEN
.	       \      Errors.ErrorMessage (Errors.ReadParseTable, Errors.Fatal, Positions.NoPosition);
.	       \    END;
		END;
.	       \    System.Close (xxTableFile);
.	       \    xxIsInitialized := TRUE;
.	       \  END Begin{i ParserName};
.
.		PROCEDURE Close{i ParserName};
.	       \  BEGIN
		CodeClose (sections);
.	       \  END Close{i ParserName};
.
		NumberArraySize := MaxIdent () + 1;
		MaxNumberArraySize := MaxIdent () + 1;
		MakeArray (NumberArray, NumberArraySize, TSIZE (INTEGER));
		MakeArray (MaxNumberArray, MaxNumberArraySize, TSIZE (INTEGER));
		CodeRules (Rules);
		ReleaseArray (NumberArray, NumberArraySize, TSIZE (INTEGER));
		ReleaseArray (MaxNumberArray, MaxNumberArraySize, TSIZE (INTEGER));

.		BEGIN
.	       \  xxIsInitialized := FALSE;
.	       \  ParsTabName := '{i ParserName}{s cTable}';
.		END {i ParserName}.

		WriteClose (file);
		}

  Grammar	(sections, tokens, Rules0 ())
		{
		ERROR ('CodeM2.ESTRA: no rules');
		}


/*
 *	generate recursive descent procedure
 */

FUNCTION	CodeRules		/rules, expr/

  Rules0	() {}

  Rules		(Rule (Id (), codes, expr), rules)
		{
		ClearArray (MaxNumberArray^);
		SetNumbers (expr, TRUE);
.		PROCEDURE yy{i Id.ident} (VAR {i Id.ident}0: tParsAttribute; xxGlobalRecoverySet: xxtUnionPtr);
.+
.		VAR
.+
		  WriteAttributes;
		  IF Rule.iscalling THEN
.		    xxUnion: xxtUnion;
		  END;
		  CodeLocal (lSections);
		  CodeCodes (codes);
.-
.		BEGIN
.+
		  IF Rule.iscalling THEN
.		    xxUnion.GlobalRecoverySet := xxGlobalRecoverySet;
		  END;
		  CodeRules (expr);
.-
.		END yy{i Id.ident};
.-
.
		CodeRules (rules);
		}

  Option	(expr)
		{
.		LOOP
.+
.		  IF \
		    CodeIsElement (Option.index, Option.first);
.		  \ THEN
.+
		    InDefault := FALSE;
		    CodeRules (expr);
.		    EXIT;
.-
.		  ELSIF \
		    CodeIsElement (Option.followindex, Option.follow);
.		  \ OR xxIsRepairMode THEN EXIT; END;
		  CodeRecovery (Option.recindex, Option.expindex);
.-
.		END;
		}

  Times		(expr)
		{
.		LOOP
.+
.		  IF \
		    CodeIsElement (Times.index, Times.first);
.		  \ THEN
.+
		    InDefault := FALSE;
		    CodeRules (expr);
.-
.		  ELSIF \
		    CodeIsElement (Times.followindex, Times.follow);
.		  \ OR xxIsRepairMode THEN EXIT;
.		  ELSE
.		  \ 
		    CodeRecovery (Times.recindex, Times.expindex);
.		  END;
.-
.		END;
		}

  Plus		(expr)
		{
.		LOOP
.+
		  CodeRules (expr);
.		  IF NOT (\
		    CodeIsElement (Plus.index, Plus.first);
.		    ) THEN
.+
.		    IF \
		      CodeIsElement (Plus.followindex, Plus.follow);
.		    \ THEN EXIT; END;
		    CodeRecovery (Plus.recindex, Plus.expindex);
.		    IF NOT (\
		      CodeIsElement (Plus.index, Plus.first);
.		      ) THEN EXIT; END;
.-
.		  END;
.-
.		END;
		}

  List		(body: expr, sep: expr)
		{
.		LOOP
.+
		  CodeRules (body);
.		  IF NOT (\
		    CodeIsElement (sep.index, sep.first);
.		    ) THEN
.+
.		    IF \
		      CodeIsElement (List.followindex, List.follow);
.		    \ THEN EXIT; END;
		    CodeRecovery (List.recindex, List.expindex);
.		    IF NOT (\
		      CodeIsElement (sep.index, sep.first);
.		    \ OR \
		      CodeIsElement (List.index, List.first);
.		      ) THEN EXIT; END;
.-
.		  END;
		  CodeRules (sep);
.-
.		END;
		}

  Action	(Codes0 ()) {}

  Action	(codes) { CodeCodes (codes); }

  Leaf		(Id ())
		CONDITION	{ IsTerm (Id.ident) & Leaf.sure & NOT Id.isstring }
		{
		IF InDefault THEN
.		  IF xxToken # {c Id.ident} (* {i Id.ident} *) THEN
.	         \  xxRecoveryTerminal ({c Id.ident}, {n Leaf.recindex}, xxGlobalRecoverySet, {i Id.ident}{n Leaf.number}); (* {R Leaf.recindex} *)
.		  ELSE
.	         \  {i Id.ident}{n Leaf.number} := \
		Prefix;
.		      .Attribute;
.	         \  xxToken := \
		Prefix;
.		      .GetToken (); xxIsRepairMode := FALSE;
.		  END;
		  InDefault := FALSE;
		ELSE
.		  {i Id.ident}{n Leaf.number} := \
		Prefix;
.		    .Attribute;
.		  xxToken := \
		Prefix;
.		    .GetToken (); xxIsRepairMode := FALSE;
		END;
		}

  Leaf		(Id ())
		CONDITION	{ IsTerm (Id.ident) & Leaf.sure & Id.isstring }
		{
		IF InDefault THEN
.		  IF xxToken # {c Id.ident} (* {i Id.ident} *) THEN
.	         \  xxRecoveryLiteral ({c Id.ident}, {n Leaf.recindex}, xxGlobalRecoverySet); (* {R Leaf.recindex} *)
.		  ELSE
.	         \  xxToken := \
		Prefix;
.		      .GetToken (); xxIsRepairMode := FALSE;
.		  END;
		  InDefault := FALSE;
		ELSE
.		  xxToken := \
		Prefix;
.		    .GetToken (); xxIsRepairMode := FALSE;
		END;
		}

  Leaf		(Id ())
		CONDITION	{ IsTerm (Id.ident) & NOT Leaf.sure & NOT Id.isstring }
		{
.		IF xxToken # {c Id.ident} (* {i Id.ident} *) THEN
.	       \  xxRecoveryTerminal ({c Id.ident}, {n Leaf.recindex}, xxGlobalRecoverySet, {i Id.ident}{n Leaf.number}); (* {R Leaf.recindex} *)
.		ELSE
.	       \  {i Id.ident}{n Leaf.number} := \
		Prefix;
.		    .Attribute;
.	       \  xxToken := \
		Prefix;
.		    .GetToken (); xxIsRepairMode := FALSE;
.		END;
		}

  Leaf		(Id ())
		CONDITION	{ IsTerm (Id.ident) & NOT Leaf.sure & Id.isstring }
		{
.		IF xxToken # {c Id.ident} (* {i Id.ident} *) THEN
.	       \  xxRecoveryLiteral ({c Id.ident}, {n Leaf.recindex}, xxGlobalRecoverySet); (* {R Leaf.recindex} *)
.		ELSE
.	       \  xxToken := \
		Prefix;
.		    .GetToken (); xxIsRepairMode := FALSE;
.		END;
		}

  Leaf		(Id ())
		CONDITION	{ IsNonterm (Id.ident) }
		{
.		xxUnion.LocalRecoverySet := {n Leaf.recindex}; yy{i Id.ident} ({i Id.ident}{n Leaf.number}, SYSTEM.ADR (xxUnion)); (* {R Leaf.recindex} *)
		}

  Sequence0	() {}

  Sequence	(expr, sequence)
		{
		CodeRules (expr);
		CodeRules (sequence);
		}

  alternative	CONDITION	{ alternative.case }
		{
.		LOOP
.+
.		  CASE xxToken OF
		  CodeAltCase (alternative);
.		  END;
.-
.		END;
		}

  alternative	CONDITION	{ NOT alternative.case }
		{
		CodeAltIf (alternative, FALSE);
		}


FUNCTION	CodeAltCase			/ alternative /

  Alternative0	()
		{
.		ELSE
.+
.		  IF xxIsRepairMode THEN
.+
		    InDefault := TRUE;
		    CodeRules (Alternative0.default);
		    InDefault := FALSE;
.		    EXIT;
.-
.		  END;
		  CodeRecovery (Alternative0.recindex, Alternative0.expindex);
.-
		}

  Alternative	(expr, alternative)
		{
		WriteLabels (expr.fifo);
.+
		CodeRules (expr);
.		EXIT;
.-
		CodeAltCase (alternative);
		}


FUNCTION	CodeAltIf	started: BOOLEAN ->	/ alternative /

  Alternative0	()
		{
.		ELSE
.+
		  CodeRecovery (Alternative0.recindex, Alternative0.expindex);
		  InDefault := TRUE;
		  CodeRules (Alternative0.default);
		  InDefault := FALSE;
.-
.		END;
		}

  Alternative	(expr, Alternative0 ())
		{
		IF NOT started THEN
.		  IF \
	            CodeIsElement (Alternative.index, expr.first);
.	          \ THEN
		ELSE
.		  ELSE 
		END;
.+
		CodeRules (expr);
.-
.		END;
		}

  Alternative	(expr, alternative)
		{
		IF NOT started THEN
.		  IF \
		ELSE
.		  ELSIF \
		END;
	        CodeIsElement (Alternative.index, expr.fifo);
.	      \ THEN
.+
		CodeRules (expr);
.-
		CodeAltIf (alternative, TRUE);
		}


/*
 *	set numbers for attribute access
 */

FUNCTION	SetNumbers	start: BOOLEAN	->	/expr/

Option		(expr)
		{
		IF start THEN ClearArray (NumberArray^); END;
		SetNumbers (expr, FALSE);
		}

Times		(expr)
		{
		IF start THEN ClearArray (NumberArray^); END;
		SetNumbers (expr, FALSE);
		}

Plus		(expr)
		{
		IF start THEN ClearArray (NumberArray^); END;
		SetNumbers (expr, FALSE);
		}

List		(body: expr, sep: expr)
		{
		IF start THEN ClearArray (NumberArray^); END;
		SetNumbers (body, FALSE);
		SetNumbers (sep, FALSE);
		}

Action		(codes) {}

Sequence0	() {}

Sequence	(expr, sequence)
		{
		IF start THEN ClearArray (NumberArray^); END;
		SetNumbers (expr, FALSE);
		SetNumbers (sequence, FALSE);
		}

Alternative0	() { }

Alternative	(expr, alternative)
		{
		IF start THEN ClearArray (NumberArray^); END;
		SetNumbers (expr, FALSE);
		SetNumbers (alternative, start);
		}

Leaf		(Id ())
		CONDITION	{ Id.isstring }
		{
		Leaf.number := 0;
		}

Leaf		(Id ())
		CONDITION	{ NOT Id.isstring }
		{
		IF start THEN ClearArray (NumberArray^); END;
		Leaf.number := NumberArray^ [Id.ident] + 1;
		NumberArray^ [Id.ident] := Leaf.number;
		IF Leaf.number > MaxNumberArray^ [Id.ident] THEN
		  MaxNumberArray^ [Id.ident] := Leaf.number;
		END;
		}


/*
 *		common functions
 */

FUNCTION	CodeExport		/ sections /


  Sections	(Export (codes), sections)
		{
		vExport := TRUE;
		CodeCodes (codes);
		CodeExport (sections);
		}

  Sections	(section, sections)
		CONDITION	{ section^.Kind # Tree.Export }
		{
		CodeExport (sections);
		}

  Sections0	() {}


FUNCTION	CodeGlobal		/ sections /


  Sections	(Global (codes), sections)
		{
		CodeCodes (codes);
		CodeGlobal (sections);
		}

  Sections	(section, sections)
		CONDITION	{ section^.Kind # Tree.Global }
		{
		CodeGlobal (sections);
		}

  Sections0	() {}


FUNCTION	CodeLocal		/ sections /


  Sections	(Local (codes), sections)
		{
		CodeCodes (codes);
		CodeLocal (sections);
		}

  Sections	(section, sections)
		CONDITION	{ section^.Kind # Tree.Local }
		{
		CodeLocal (sections);
		}

  Sections0	() {}


FUNCTION	CodeBegin		/ sections /


  Sections	(Begin (codes), sections)
		{
		CodeCodes (codes);
		CodeBegin (sections);
		}

  Sections	(section, sections)
		CONDITION	{ section^.Kind # Tree.Begin }
		{
		CodeBegin (sections);
		}

  Sections0	() {}


FUNCTION	CodeClose		/ sections /


  Sections	(Close (codes), sections)
		{
		CodeCodes (codes);
		CodeClose (sections);
		}

  Sections	(section, sections)
		CONDITION	{ section^.Kind # Tree.Close }
		{
		CodeClose (sections);
		}

  Sections0	() {}


FUNCTION	CodeCodes		/ codes /

  Codes		(Code (), codes)
		{
.. ^
.		(* '{s SourceFileName}' line {n Code.pos.Line} *)
		WriteString (file, Code.ref);
		CodeCodes2 (codes);
.
.. ^ Spaces;
		}

  Codes0	() {}


FUNCTION	CodeCodes2		/ codes /

  Codes		(Code (), codes)
		{
		WriteString (file, Code.ref);
		CodeCodes2 (codes);
		}

  Codes0	() {}
