
(* $Id: Scanner.mi,v 2.11 1992/09/24 13:14:00 grosch rel $ *)

(* Modified Rodney M. Bates 
   Mar 94 to compile under WRL 
   Mar 96 to fix a bug in PROCEDURE input 
   Mar 96 to add functions UpperCase and LowerCase, to exploit
          the arrays yyToUpper and yyToLower, already there.
   Apr 96 to add yyTotalLineCount and TotalLineCount. 
*) 

IMPLEMENTATION MODULE Scanner;
 
IMPORT SYSTEM, Checks, System, General, Positions, IO, DynArray, Strings, Source;
(* line 27 "../src/modula.rex" *)

FROM Strings	IMPORT tString;
FROM Idents	IMPORT NoIdent, MakeIdent;
FROM Errors	IMPORT ErrorMessage, Error, IllegalChar, UnclosedComment,
		       UnclosedString;

VAR NestingLevel	: CARDINAL;

CONST
  TokIntConst		=  2	;
  TokCharConst		=  4	;
  TokRealConst		=  6	;
  TokStringConst	=  7	;
  TokNotEqual		=  8	;	(* '#', '<>'		*)
  TokLParent		=  9	;	(* '('			*)
  TokRParent		= 10	;	(* ')'			*)
  TokTimes		= 11	;	(* '*'			*)
  TokPlus		= 12	;	(* '+'			*)
  TokComma		= 13	;	(* ','			*)
  TokMinus		= 14	;	(* '-'			*)
  TokDot		= 15	;	(* '.'			*)
  TokRange		= 16	;	(* '..'			*)
  TokDivide		= 17	;	(* '/'			*)
  TokColon		= 18	;	(* ':'			*)
  TokAssign		= 19	;	(* ':='			*)
  TokSemiColon		= 20	;	(* ';'			*)
  TokLess		= 21	;	(* '<'			*)
  TokLessEqual		= 22	;	(* '<='			*)
  TokEqual		= 24	;	(* '='			*)
  TokGreater		= 25	;	(* '>'			*)
  TokGreaterEqual	= 26	;	(* '>='			*)
  TokLBracket		= 27	;	(* '['			*)
  TokRBracket		= 28	;	(* ']'			*)
  TokArrow		= 29	;	(* '^'			*)
  TokLBrace		= 30	;	(* '{'			*)
  TokBar		= 31	;	(* '|'			*)
  TokRBrace		= 32	;	(* '}'			*)

  TokAnd		= 34	;	(* AND, '&'		*)
  TokArray		= 35	;	(* ARRAY		*)
  TokBegin		= 36	;	(* BEGIN		*)
  TokBy			= 37	;	(* BY			*)
  TokCase		= 38	;	(* CASE			*)
  TokConst		= 39	;	(* CONST		*)
  TokDefinition		= 40	;	(* DEFINITION		*)
  TokDiv		= 41	;	(* DIV			*)
  TokDo			= 42	;	(* DO			*)
  TokElse		= 43	;	(* ELSE			*)
  TokElsif		= 44	;	(* ELSIF		*)
  TokEnd		= 45	;	(* END			*)
  TokExit		= 46	;	(* EXIT			*)
  TokExport		= 47	;	(* EXPORT		*)
  TokFor		= 48	;	(* FOR			*)
  TokFrom		= 49	;	(* FROM			*)
  TokIf			= 50	;	(* IF			*)
  TokImplementation	= 51	;	(* IMPLEMENTATION	*)
  TokImport		= 52	;	(* IMPORT		*)
  TokIn			= 53	;	(* IN			*)
  TokLoop		= 54	;	(* LOOP			*)
  TokMod		= 55	;	(* MOD			*)
  TokModule		= 56	;	(* MODULE		*)
  TokNot		= 57	;	(* NOT, '~'		*)
  TokOf			= 58	;	(* OF			*)
  TokOr			= 59	;	(* OR			*)
  TokPointer		= 60	;	(* POINTER		*)
  TokProcedure		= 61	;	(* PROCEDURE		*)
  TokQualified		= 62	;	(* QUALIFIED		*)
  TokRecord		= 63	;	(* RECORD		*)
  TokRepeat		= 64	;	(* REPEAT		*)
  TokReturn		= 65	;	(* RETURN		*)
  TokSet		= 66	;	(* SET			*)
  TokThen		= 67	;	(* THEN			*)
  TokTo			= 68	;	(* TO			*)
  TokType		= 69	;	(* TYPE			*)
  TokUntil		= 70	;	(* UNTIL		*)
  TokVar		= 71	;	(* VAR			*)
  TokWhile		= 72	;	(* WHILE		*)
  TokWith		= 73	;	(* WITH			*)
  TokForeign		= 74	;	(* FOREIGN		*)

PROCEDURE ErrorAttribute (Token: CARDINAL; VAR Attribute: tScanAttribute);
BEGIN
  CASE Token OF
  | TokIdent		: Attribute.Ident	:= NoIdent;
  ELSE ;
  END;
END ErrorAttribute;

 
CONST
   yyTabSpace		= 8;
   yyDNoState		= 0;
   yyFileStackSize	= 16;
   yyInitBufferSize	= 1024 * 8 + 256;
yyFirstCh	= 0C;
yyLastCh	= 177C;
yyEolCh	= 12C;
yyEobCh	= 177C;
yyDStateCount	= 233;
yyTableSize	= 832;
yyEobState	= 30;
yyDefaultState	= 31;
STD	= 1;
Comment	= 3;
Str1	= 5;
Str2	= 7;
 
TYPE
   yyTableElmt		= SHORTCARD;
   yyStateRange		= yyTableElmt [0 .. yyDStateCount];
   yyTableRange		= yyTableElmt [0 .. yyTableSize];
   yyCombType		= RECORD Check, Next: yyStateRange; END;
   yyCombTypePtr	= POINTER TO yyCombType;
   yytChBufferPtr	= POINTER TO ARRAY [0 .. 1000000] OF CHAR;
   yyChRange		= [yyFirstCh .. yyLastCh];
   yyFileStackPtrTyp    = SHORTCARD;
   yyFileStackSubscript = yyFileStackPtrTyp [1 .. yyFileStackSize];

VAR
   yyBasePtr		: ARRAY yyStateRange	OF LONGCARD	;
   yyDefault		: ARRAY yyStateRange	OF yyStateRange	;
   yyComb		: ARRAY yyTableRange	OF yyCombType	;
   yyEobTrans		: ARRAY yyStateRange	OF yyStateRange	;
   yyToLower, yyToUpper	: ARRAY yyChRange	OF CHAR		;

   yyStateStack		: POINTER TO ARRAY [0 .. 1000000] OF yyStateRange;
   yyStateStackSize	: LONGINT;
   yyStartState		: yyStateRange;
   yyPreviousStart	: yyStateRange;
   yyCh			: CHAR;
 
   yySourceFile		: System.tFile;
   yyEof		: BOOLEAN;
   yyChBufferPtr	: yytChBufferPtr;
   yyChBufferStart	: INTEGER;
   yyChBufferSize	: LONGINT;
   yyChBufferIndex	: INTEGER;
   yyBytesRead		: INTEGER;
   yyLineCount		: SHORTCARD; (* Number of the current line,
                                        of the current file. *) 
   yyTotalLineCount	: CARDINAL;  (* Number of lines already read,
                                        of all files. *) 
   yyLineStart		: INTEGER;

   yyFileStackPtr	: yyFileStackPtrTyp;
   yyFileStack		: ARRAY yyFileStackSubscript OF RECORD
   			     SourceFile		: System.tFile;
			     Eof		: BOOLEAN;
   			     ChBufferPtr	: yytChBufferPtr;
			     ChBufferStart	: INTEGER;
			     ChBufferSize	: LONGINT;
   			     ChBufferIndex	: INTEGER;
   			     BytesRead		: INTEGER;
   			     LineCount		: SHORTCARD;
   			     LineStart		: INTEGER;
			  END;

PROCEDURE GetToken (): INTEGER;
   VAR
      yyState		: yyStateRange;
      yyTablePtr	: yyCombTypePtr;
      yyRestartFlag	: BOOLEAN;
      yyi, yySource, yyTarget : INTEGER;
      yyChBufferFree	: LONGINT;

(* line 116 "../src/modula.rex" *)
 VAR Word: tString; 
BEGIN
   LOOP
      yyState		:= yyStartState;
      TokenLength 	:= 0;
 
      (* ASSERT yyChBuffer [yyChBufferIndex] = first character *)
 
      LOOP		(* eventually restart after sentinel *)
	 LOOP		(* execute as many state transitions as possible *)
	    					(* determine next state *)
	    yyTablePtr := yyCombTypePtr (yyBasePtr [yyState] +
	       VAL(LONGCARD,ORD (yyChBufferPtr^ [yyChBufferIndex]) )
               * VAL(LONGCARD, SYSTEM.TSIZE (yyCombType)) );
	    IF yyTablePtr^.Check # yyState THEN
	       yyState := yyDefault [yyState];
	       IF yyState = yyDNoState THEN EXIT; END;
	    ELSE
	       yyState := yyTablePtr^.Next;
	       INC (TokenLength);
	       yyStateStack^ [TokenLength] := yyState;	(* push state *)
	       INC (yyChBufferIndex);		(* get next character *)
	    END;
	 END;
 
	 LOOP					(* search for last final state *)
CASE yyStateStack^ [TokenLength] OF
|232
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 140 "../src/modula.rex" *)
INC (NestingLevel); yyStart (Comment);
yyRestartFlag := FALSE; EXIT;
|231
:
(* line 141 "../src/modula.rex" *)
DEC (NestingLevel);
			    IF NestingLevel = 0 THEN yyStart (STD); END;
yyRestartFlag := FALSE; EXIT;
|11
,22
,35
,230
,233
:
(* line 143 "../src/modula.rex" *)

yyRestartFlag := FALSE; EXIT;
|14
:
(* line 145 "../src/modula.rex" *)

yyRestartFlag := FALSE; EXIT;
|12
,23
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 151 "../src/modula.rex" *)
RETURN TokIntConst		;
yyRestartFlag := FALSE; EXIT;
|21
:
DEC (yyChBufferIndex, 2);
DEC (TokenLength, 2);
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 151 "../src/modula.rex" *)
RETURN TokIntConst		;
yyRestartFlag := FALSE; EXIT;
|20
:
DEC (yyChBufferIndex, 2);
DEC (TokenLength, 2);
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 151 "../src/modula.rex" *)
RETURN TokIntConst		;
yyRestartFlag := FALSE; EXIT;
|17
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 151 "../src/modula.rex" *)
RETURN TokIntConst		;
yyRestartFlag := FALSE; EXIT;
|19
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 151 "../src/modula.rex" *)
RETURN TokIntConst		;
yyRestartFlag := FALSE; EXIT;
|18
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 153 "../src/modula.rex" *)
RETURN TokCharConst		;
yyRestartFlag := FALSE; EXIT;
|15
,24
,25
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 155 "../src/modula.rex" *)
RETURN TokRealConst;
yyRestartFlag := FALSE; EXIT;
|229
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 157 "../src/modula.rex" *)
yyStart (Str1);
yyRestartFlag := FALSE; EXIT;
|10
,36
:
(* line 158 "../src/modula.rex" *)

yyRestartFlag := FALSE; EXIT;
|228
:
(* line 159 "../src/modula.rex" *)
yyStart (STD); RETURN TokStringConst;
yyRestartFlag := FALSE; EXIT;
|227
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 161 "../src/modula.rex" *)
yyStart (Str2);
yyRestartFlag := FALSE; EXIT;
|9
,37
:
(* line 162 "../src/modula.rex" *)

yyRestartFlag := FALSE; EXIT;
|226
:
(* line 163 "../src/modula.rex" *)
yyStart (STD); RETURN TokStringConst;
yyRestartFlag := FALSE; EXIT;
|225
:
(* line 165 "../src/modula.rex" *)
yyTab;
yyRestartFlag := FALSE; EXIT;
|224
:
(* line 166 "../src/modula.rex" *)
ErrorMessage (UnclosedString, Error, Attribute.Position);
			    yyEol (0); yyStart (STD); RETURN TokStringConst;
yyRestartFlag := FALSE; EXIT;
|223
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 169 "../src/modula.rex" *)
RETURN TokNotEqual		;
yyRestartFlag := FALSE; EXIT;
|222
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 170 "../src/modula.rex" *)
RETURN TokAnd		;
yyRestartFlag := FALSE; EXIT;
|221
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 171 "../src/modula.rex" *)
RETURN TokLParent		;
yyRestartFlag := FALSE; EXIT;
|220
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 172 "../src/modula.rex" *)
RETURN TokRParent		;
yyRestartFlag := FALSE; EXIT;
|219
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 173 "../src/modula.rex" *)
RETURN TokTimes		;
yyRestartFlag := FALSE; EXIT;
|218
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 174 "../src/modula.rex" *)
RETURN TokPlus		;
yyRestartFlag := FALSE; EXIT;
|217
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 175 "../src/modula.rex" *)
RETURN TokComma		;
yyRestartFlag := FALSE; EXIT;
|216
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 176 "../src/modula.rex" *)
RETURN TokMinus		;
yyRestartFlag := FALSE; EXIT;
|214
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 177 "../src/modula.rex" *)
RETURN TokDot		;
yyRestartFlag := FALSE; EXIT;
|215
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 178 "../src/modula.rex" *)
RETURN TokRange		;
yyRestartFlag := FALSE; EXIT;
|213
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 179 "../src/modula.rex" *)
RETURN TokDivide		;
yyRestartFlag := FALSE; EXIT;
|211
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 180 "../src/modula.rex" *)
RETURN TokColon		;
yyRestartFlag := FALSE; EXIT;
|212
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 181 "../src/modula.rex" *)
RETURN TokAssign		;
yyRestartFlag := FALSE; EXIT;
|210
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 182 "../src/modula.rex" *)
RETURN TokSemiColon		;
yyRestartFlag := FALSE; EXIT;
|207
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 183 "../src/modula.rex" *)
RETURN TokLess		;
yyRestartFlag := FALSE; EXIT;
|209
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 184 "../src/modula.rex" *)
RETURN TokLessEqual		;
yyRestartFlag := FALSE; EXIT;
|208
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 185 "../src/modula.rex" *)
RETURN TokNotEqual		;
yyRestartFlag := FALSE; EXIT;
|206
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 186 "../src/modula.rex" *)
RETURN TokEqual		;
yyRestartFlag := FALSE; EXIT;
|204
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 187 "../src/modula.rex" *)
RETURN TokGreater		;
yyRestartFlag := FALSE; EXIT;
|205
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 188 "../src/modula.rex" *)
RETURN TokGreaterEqual	;
yyRestartFlag := FALSE; EXIT;
|203
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 189 "../src/modula.rex" *)
RETURN TokLBracket		;
yyRestartFlag := FALSE; EXIT;
|202
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 190 "../src/modula.rex" *)
RETURN TokRBracket		;
yyRestartFlag := FALSE; EXIT;
|201
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 191 "../src/modula.rex" *)
RETURN TokArrow		;
yyRestartFlag := FALSE; EXIT;
|200
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 192 "../src/modula.rex" *)
RETURN TokLBrace		;
yyRestartFlag := FALSE; EXIT;
|199
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 193 "../src/modula.rex" *)
RETURN TokBar		;
yyRestartFlag := FALSE; EXIT;
|198
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 194 "../src/modula.rex" *)
RETURN TokRBrace		;
yyRestartFlag := FALSE; EXIT;
|197
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 195 "../src/modula.rex" *)
RETURN TokNot		;
yyRestartFlag := FALSE; EXIT;
|196
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 197 "../src/modula.rex" *)
RETURN TokAnd		;
yyRestartFlag := FALSE; EXIT;
|194
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 198 "../src/modula.rex" *)
RETURN TokArray		;
yyRestartFlag := FALSE; EXIT;
|189
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 199 "../src/modula.rex" *)
RETURN TokBegin		;
yyRestartFlag := FALSE; EXIT;
|185
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 200 "../src/modula.rex" *)
RETURN TokBy			;
yyRestartFlag := FALSE; EXIT;
|183
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 201 "../src/modula.rex" *)
RETURN TokCase		;
yyRestartFlag := FALSE; EXIT;
|180
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 202 "../src/modula.rex" *)
RETURN TokConst		;
yyRestartFlag := FALSE; EXIT;
|175
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 203 "../src/modula.rex" *)
RETURN TokDefinition		;
yyRestartFlag := FALSE; EXIT;
|166
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 204 "../src/modula.rex" *)
RETURN TokDiv		;
yyRestartFlag := FALSE; EXIT;
|164
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 205 "../src/modula.rex" *)
RETURN TokDo			;
yyRestartFlag := FALSE; EXIT;
|162
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 206 "../src/modula.rex" *)
RETURN TokElse		;
yyRestartFlag := FALSE; EXIT;
|161
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 207 "../src/modula.rex" *)
RETURN TokElsif		;
yyRestartFlag := FALSE; EXIT;
|157
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 208 "../src/modula.rex" *)
RETURN TokEnd		;
yyRestartFlag := FALSE; EXIT;
|155
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 209 "../src/modula.rex" *)
RETURN TokExit		;
yyRestartFlag := FALSE; EXIT;
|153
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 210 "../src/modula.rex" *)
RETURN TokExport		;
yyRestartFlag := FALSE; EXIT;
|40
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 211 "../src/modula.rex" *)
RETURN TokFor		;
yyRestartFlag := FALSE; EXIT;
|147
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 212 "../src/modula.rex" *)
RETURN TokFrom		;
yyRestartFlag := FALSE; EXIT;
|144
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 213 "../src/modula.rex" *)
RETURN TokIf			;
yyRestartFlag := FALSE; EXIT;
|143
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 214 "../src/modula.rex" *)
RETURN TokImplementation	;
yyRestartFlag := FALSE; EXIT;
|132
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 215 "../src/modula.rex" *)
RETURN TokImport		;
yyRestartFlag := FALSE; EXIT;
|127
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 216 "../src/modula.rex" *)
RETURN TokIn			;
yyRestartFlag := FALSE; EXIT;
|125
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 217 "../src/modula.rex" *)
RETURN TokLoop		;
yyRestartFlag := FALSE; EXIT;
|118
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 218 "../src/modula.rex" *)
RETURN TokMod		;
yyRestartFlag := FALSE; EXIT;
|121
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 219 "../src/modula.rex" *)
RETURN TokModule		;
yyRestartFlag := FALSE; EXIT;
|115
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 220 "../src/modula.rex" *)
RETURN TokNot		;
yyRestartFlag := FALSE; EXIT;
|112
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 221 "../src/modula.rex" *)
RETURN TokOf			;
yyRestartFlag := FALSE; EXIT;
|111
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 222 "../src/modula.rex" *)
RETURN TokOr			;
yyRestartFlag := FALSE; EXIT;
|109
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 223 "../src/modula.rex" *)
RETURN TokPointer		;
yyRestartFlag := FALSE; EXIT;
|103
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 224 "../src/modula.rex" *)
RETURN TokProcedure		;
yyRestartFlag := FALSE; EXIT;
|94
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 225 "../src/modula.rex" *)
RETURN TokQualified		;
yyRestartFlag := FALSE; EXIT;
|85
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 226 "../src/modula.rex" *)
RETURN TokRecord		;
yyRestartFlag := FALSE; EXIT;
|81
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 227 "../src/modula.rex" *)
RETURN TokRepeat		;
yyRestartFlag := FALSE; EXIT;
|77
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 228 "../src/modula.rex" *)
RETURN TokReturn		;
yyRestartFlag := FALSE; EXIT;
|71
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 229 "../src/modula.rex" *)
RETURN TokSet		;
yyRestartFlag := FALSE; EXIT;
|68
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 230 "../src/modula.rex" *)
RETURN TokThen		;
yyRestartFlag := FALSE; EXIT;
|65
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 231 "../src/modula.rex" *)
RETURN TokTo			;
yyRestartFlag := FALSE; EXIT;
|64
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 232 "../src/modula.rex" *)
RETURN TokType		;
yyRestartFlag := FALSE; EXIT;
|60
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 233 "../src/modula.rex" *)
RETURN TokUntil		;
yyRestartFlag := FALSE; EXIT;
|55
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 234 "../src/modula.rex" *)
RETURN TokVar		;
yyRestartFlag := FALSE; EXIT;
|52
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 235 "../src/modula.rex" *)
RETURN TokWhile		;
yyRestartFlag := FALSE; EXIT;
|48
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 236 "../src/modula.rex" *)
RETURN TokWith		;
yyRestartFlag := FALSE; EXIT;
|44
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 237 "../src/modula.rex" *)
RETURN TokForeign		;
yyRestartFlag := FALSE; EXIT;
|13
,38
,39
,41
,42
,43
,45
,46
,47
,49
,50
,51
,53
,54
,56
,57
,58
,59
,61
,62
,63
,66
,67
,69
,70
,72
,73
,74
,75
,76
,78
,79
,80
,82
,83
,84
,86
,87
,88
,89
,90
,91
,92
,93
,95
,96
,97
,98
,99
,100
,101
,102
,104
,105
,106
,107
,108
,110
,113
,114
,116
,117
,119
,120
,122
,123
,124
,126
,128
,129
,130
,131
,133
,134
,135
,136
,137
,138
,139
,140
,141
,142
,145
,146
,148
,149
,150
,151
,152
,154
,156
,158
,159
,160
,163
,165
,167
,168
,169
,170
,171
,172
,173
,174
,176
,177
,178
,179
,181
,182
,184
,186
,187
,188
,190
,191
,192
,193
,195
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart - TokenLength);
(* line 239 "../src/modula.rex" *)

			   GetWord (Word);
			   Attribute.Ident := MakeIdent (Word);
			   RETURN TokIdent;
yyRestartFlag := FALSE; EXIT;
|34
:
(* BlankAction *)
WHILE yyChBufferPtr^ [yyChBufferIndex] = ' ' DO INC (yyChBufferIndex); END;
yyRestartFlag := FALSE; EXIT;
|33
:
(* TabAction *)
DEC (yyLineStart, 7 - (yyChBufferIndex - yyLineStart - 2) MOD 8);
yyRestartFlag := FALSE; EXIT;
|32
:
(* EolAction *)
INC (yyLineCount);
yyLineStart := yyChBufferIndex - 1;
yyRestartFlag := FALSE; EXIT;
|1
,2
,3
,4
,5
,6
,7
,8
,16
,26
,27
,28
,29
:
	    (* non final states *)
		  DEC (yyChBufferIndex);	(* return character *)
		  DEC (TokenLength)		(* pop state *)
 
| 31:
		  Attribute.Position.Line   := yyLineCount;
		  Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart);
		  INC (yyChBufferIndex);
		  TokenLength := 1;
(* line 120 "../src/modula.rex" *)
 ErrorMessage (IllegalChar, Error, Attribute.Position); 
	          yyRestartFlag := FALSE; EXIT;

	    |  yyDNoState	:		(* automatic initialization *)
		  yyGetTables;
		  yyStateStack^ [0] := yyDefaultState; (* stack underflow sentinel *)
		  IF yyFileStackPtr = 0 THEN
		     yyInitialize;
		     yySourceFile := System.StdInput;
		  END;
	          yyRestartFlag := FALSE; EXIT;

| 30:
		  DEC (yyChBufferIndex);	(* undo last state transition *)
		  DEC (TokenLength);		(* get previous state *)
		  IF TokenLength = 0 THEN
		     yyState := yyStartState;
		  ELSE
		     yyState := yyStateStack^ [TokenLength];
		  END;

		  IF yyChBufferIndex # yyChBufferStart + yyBytesRead THEN
		     yyState := yyEobTrans [yyState];	(* end of buffer sentinel in buffer *)
		     IF yyState # yyDNoState THEN
			INC (yyChBufferIndex);
			INC (TokenLength);
			yyStateStack^ [TokenLength] := yyState;
			yyRestartFlag := TRUE; EXIT;
		     END;
		  ELSE				(* end of buffer reached *)

		     (* copy initial part of token in front of input buffer *)

		     yySource := yyChBufferIndex - TokenLength - 1;
		     yyTarget := General.MaxAlign - TokenLength MOD General.MaxAlign - 1;
		     IF yySource # yyTarget THEN
			FOR yyi := 1 TO TokenLength DO
			   yyChBufferPtr^ [yyTarget + yyi] := yyChBufferPtr^ [yySource + yyi];
			END;
			DEC (yyLineStart, yySource - yyTarget);
			yyChBufferStart := yyTarget + TokenLength + 1;
		     ELSE
			yyChBufferStart := yyChBufferIndex;
		     END;

		     IF NOT yyEof THEN		(* read buffer and restart *)
			yyChBufferFree 
                          := VAL( LONGINT 
                                , General.Exp2 
                                  (General.Log2 
                                     (yyChBufferSize - 4 - VAL(LONGINT,General.MaxAlign) -VAL(LONGINT, TokenLength))
                                  )
                                );
			IF yyChBufferFree < yyChBufferSize DIV 8 THEN
			   DynArray.ExtendArray (yyChBufferPtr, yyChBufferSize, SYSTEM.TSIZE (CHAR));
			   IF yyChBufferPtr = NIL THEN yyErrorMessage (1); END;
			   yyChBufferFree 
                             := VAL ( LONGINT
                                    , General.Exp2 
                                        (General.Log2 
                                           (yyChBufferSize - 4 - VAL(LONGINT,General.MaxAlign) - VAL(LONGINT,TokenLength))
                                        )
                                    );
			   IF yyStateStackSize < yyChBufferSize THEN
			      DynArray.ExtendArray (yyStateStack, yyStateStackSize, SYSTEM.TSIZE (yyStateRange));
			      IF yyStateStack = NIL THEN yyErrorMessage (1); END;
			   END;
			END;
			yyChBufferIndex := yyChBufferStart;
			yyBytesRead := Source.GetLine 
                                 (yySourceFile
                                  , SYSTEM.ADR (yyChBufferPtr^ [yyChBufferIndex])
                                  , VAL ( CARDINAL , yyChBufferFree )
                                  );
			IF yyBytesRead <= 0 THEN yyBytesRead := 0; yyEof := TRUE; END;
			yyChBufferPtr^ [yyChBufferStart + yyBytesRead    ] := yyEobCh;
			yyChBufferPtr^ [yyChBufferStart + yyBytesRead + 1] := 0C;
			yyRestartFlag := TRUE; EXIT;
		     END;

		     IF TokenLength = 0 THEN	(* end of file reached *)
			Attribute.Position.Line   := yyLineCount;
			Attribute.Position.Column := VAL(SHORTCARD,yyChBufferIndex - yyLineStart);
			CloseFile;
			IF yyFileStackPtr = 0 THEN
(* line 122 "../src/modula.rex" *)

  IF yyStartState = Comment THEN
    ErrorMessage (UnclosedComment, Error, Attribute.Position);
  END;

			END;
			IF yyFileStackPtr = 0 THEN RETURN EofToken; END;
			yyRestartFlag := FALSE; EXIT;
		     END;
		  END;
	    ELSE
	       yyErrorMessage (0);
	    END;
	 END;
	 IF yyRestartFlag THEN ELSE EXIT; END;
      END;
   END;
   END GetToken;
 
PROCEDURE BeginFile (FileName: ARRAY OF CHAR);
   BEGIN
      IF yyStateStack^ [0] = yyDNoState THEN	(* have tables been read in ? *)
	 yyGetTables;
	 yyStateStack^ [0] := yyDefaultState;	(* stack underflow sentinel *)
      END;
      yyInitialize;
      yySourceFile := Source.BeginSource (FileName);
      IF yySourceFile < 0 THEN yyErrorMessage (5); END;
   END BeginFile;

PROCEDURE yyInitialize;
   BEGIN
      IF yyFileStackPtr >= yyFileStackSize THEN yyErrorMessage (3); END;
      INC (yyFileStackPtr);			(* push file *)
      WITH yyFileStack [yyFileStackPtr] DO
	 SourceFile	:= yySourceFile		;
	 Eof		:= yyEof		;
	 ChBufferPtr	:= yyChBufferPtr	;
	 ChBufferStart	:= yyChBufferStart	;
	 ChBufferSize	:= yyChBufferSize	;
	 ChBufferIndex	:= yyChBufferIndex	;
	 BytesRead	:= yyBytesRead		;
	 LineCount	:= yyLineCount		;
	 LineStart	:= yyLineStart		;
      END;
						(* initialize file state *)
      yyChBufferSize	:= yyInitBufferSize;
      DynArray.MakeArray (yyChBufferPtr, yyChBufferSize, SYSTEM.TSIZE (CHAR));
      IF yyChBufferPtr = NIL THEN yyErrorMessage (1); END;
      yyChBufferStart	:= General.MaxAlign;
      yyChBufferPtr^ [yyChBufferStart - 1] := yyEolCh; (* begin of line indicator *)
      yyChBufferPtr^ [yyChBufferStart    ] := yyEobCh; (* end of buffer sentinel *)
      yyChBufferPtr^ [yyChBufferStart + 1] := 0C;
      yyChBufferIndex	:= yyChBufferStart;
      yyEof		:= FALSE;
      yyBytesRead	:= 0;
      yyLineCount	:= 1;
      yyTotalLineCount	:= 0;
      yyLineStart	:= yyChBufferStart - 1;
   END yyInitialize;

PROCEDURE CloseFile;
   BEGIN
      IF yyFileStackPtr = 0 THEN yyErrorMessage (4); END;
      Source.CloseSource (yySourceFile);
      DynArray.ReleaseArray (yyChBufferPtr, yyChBufferSize, SYSTEM.TSIZE (CHAR));
      WITH yyFileStack [yyFileStackPtr] DO	(* pop file *)
	 yySourceFile	:= SourceFile		;
	 yyEof		:= Eof			;
	 yyChBufferPtr	:= ChBufferPtr		;
	 yyChBufferStart:= ChBufferStart	;
	 yyChBufferSize	:= ChBufferSize		;
	 yyChBufferIndex:= ChBufferIndex	;
	 yyBytesRead	:= BytesRead		;
	 yyLineCount	:= LineCount		;
	 yyLineStart	:= LineStart		;
      END;
      DEC (yyFileStackPtr);		
   END CloseFile;

PROCEDURE GetWord (VAR Word: Strings.tString);
   VAR i, WordStart	: INTEGER;
   BEGIN
      WordStart := yyChBufferIndex - TokenLength - 1;
      FOR i := 1 TO TokenLength DO
	 Word.Chars [VAL(Strings.tStringIndex,i)] 
           := yyChBufferPtr^ [WordStart + i];
      END;
      Word.Length := VAL(SHORTCARD,TokenLength);
   END GetWord;
 
PROCEDURE GetLower (VAR Word: Strings.tString);
   VAR i, WordStart	: INTEGER;
   BEGIN
      WordStart := yyChBufferIndex - TokenLength - 1;
      FOR i := 1 TO TokenLength DO
	 Word.Chars [VAL(Strings.tStringIndex,i)] 
           := yyToLower [yyChBufferPtr^ [WordStart + i]];
      END;
      Word.Length := VAL(SHORTCARD,TokenLength);
   END GetLower;
 
PROCEDURE GetUpper (VAR Word: Strings.tString);
   VAR i, WordStart	: INTEGER;
   BEGIN
      WordStart := yyChBufferIndex - TokenLength - 1;
      FOR i := 1 TO TokenLength DO
	 Word.Chars [VAL(Strings.tStringIndex,i)] 
           := yyToUpper [yyChBufferPtr^ [WordStart + i]];
      END;
      Word.Length := VAL(SHORTCARD,TokenLength);
   END GetUpper;
 
PROCEDURE yyStart (State: yyStateRange);
   BEGIN
      yyPreviousStart	:= yyStartState;
      yyStartState	:= State;
   END yyStart;
 
PROCEDURE yyPrevious;
   VAR s	: yyStateRange;
   BEGIN
      s		      := yyStartState;
      yyStartState    := yyPreviousStart;
      yyPreviousStart := s;
   END yyPrevious;
 
PROCEDURE yyEcho;
   VAR i	: INTEGER;
   BEGIN
      FOR i := yyChBufferIndex - TokenLength TO yyChBufferIndex - 1 DO
	 IO.WriteC (IO.StdOutput, yyChBufferPtr^ [i]);
      END;
   END yyEcho;
 
PROCEDURE yyLess (n: INTEGER);
   BEGIN
      DEC (yyChBufferIndex, TokenLength - n);
      TokenLength := n;
   END yyLess;
 
PROCEDURE yyTab;
   BEGIN
      DEC (yyLineStart, yyTabSpace - 1 - (yyChBufferIndex - yyLineStart - 2) MOD yyTabSpace);
   END yyTab;

PROCEDURE yyTab1 (a: INTEGER);
   BEGIN
      DEC (yyLineStart, yyTabSpace - 1 - (yyChBufferIndex - yyLineStart - TokenLength + a - 1) MOD yyTabSpace);
   END yyTab1;

PROCEDURE yyTab2 (a, b: INTEGER);
   BEGIN
      DEC (yyLineStart, yyTabSpace - 1 - (yyChBufferIndex - yyLineStart - TokenLength + a - 1) MOD yyTabSpace);
   END yyTab2;

PROCEDURE yyEol (Column: INTEGER);
   BEGIN
      INC (yyLineCount);
      INC (yyTotalLineCount);
      yyLineStart := yyChBufferIndex - 1 - Column;
   END yyEol;

PROCEDURE output (c: CHAR);
   BEGIN
      IO.WriteC (IO.StdOutput, c);
   END output;

PROCEDURE unput (c: CHAR);
   BEGIN
      DEC (yyChBufferIndex);
      yyChBufferPtr^ [yyChBufferIndex] := c;
   END unput;

PROCEDURE input (): CHAR;
   BEGIN
      IF yyChBufferIndex = yyChBufferStart + yyBytesRead THEN
	 IF NOT yyEof THEN
	    DEC (yyLineStart, yyBytesRead);
	    DEC (yyLineStart, yyChBufferStart); (* RMB *)
	    yyChBufferIndex := 0;
	    yyChBufferStart := 0;
	    yyBytesRead := Source.GetLine 
                    (yySourceFile, yyChBufferPtr
                    , VAL(CARDINAL,General.Exp2 (General.Log2 (yyChBufferSize)))
                    );
	    IF yyBytesRead <= 0 THEN yyBytesRead := 0; yyEof := TRUE; END;
	    yyChBufferPtr^ [yyBytesRead    ] := yyEobCh;
	    yyChBufferPtr^ [yyBytesRead + 1] := 0C;
	 END;
      END;
      IF yyChBufferIndex = yyChBufferStart + yyBytesRead THEN
	 RETURN 0C;
      ELSE
	 INC (yyChBufferIndex);
	 RETURN yyChBufferPtr^ [yyChBufferIndex - 1];
      END
   END input;

(* VISIBLE: *) 
PROCEDURE UpperCase ( Ch : CHAR ) : CHAR ; 
   BEGIN
     RETURN yyToUpper [ Ch ]; 
   END UpperCase;

(* VISIBLE: *) 
PROCEDURE LowerCase ( Ch : CHAR ) : CHAR ; 
   BEGIN
     RETURN yyToLower [ Ch ]; 
   END LowerCase;

(* VISIBLE *) 
PROCEDURE TotalLineCount ( ) : CARDINAL ;  
   BEGIN
     RETURN yyTotalLineCount 
   END TotalLineCount;  

PROCEDURE BeginScanner;
   BEGIN
(* line 118 "../src/modula.rex" *)
 NestingLevel := 0; 
   END BeginScanner;
 
PROCEDURE CloseScanner;
   BEGIN
   END CloseScanner;
 
PROCEDURE yyGetTables;
   VAR
      BlockSize, j, n	: CARDINAL;
      TableFile	: System.tFile;
      i		: yyStateRange;
      Base	: ARRAY yyStateRange OF yyTableRange;
   BEGIN
      BlockSize	:= 64000 DIV SYSTEM.TSIZE (yyCombType);
      TableFile := System.OpenInput (ScanTabName);
      Checks.ErrorCheck ("yyGetTables.OpenInput", TableFile);
      IF (yyGetTable (TableFile, SYSTEM.ADR (Base      )) DIV SYSTEM.TSIZE (yyTableElmt) - 1 
         # yyDStateCount) OR
         (yyGetTable (TableFile, SYSTEM.ADR (yyDefault )) DIV SYSTEM.TSIZE (yyTableElmt) - 1 
         # yyDStateCount) OR
         (yyGetTable (TableFile, SYSTEM.ADR (yyEobTrans)) DIV SYSTEM.TSIZE (yyTableElmt) - 1 
         # yyDStateCount)
	 THEN
	 yyErrorMessage (2);
      END;
      n := 0;
      j := 0;
      WHILE j <= yyTableSize DO
         INC (n, yyGetTable (TableFile, SYSTEM.ADR (yyComb [VAL(SHORTCARD,j)])) DIV SYSTEM.TSIZE (yyCombType));
         INC (j, BlockSize);
      END;
      IF n # yyTableSize + 1 THEN yyErrorMessage (2); END;
      System.Close (TableFile);

      FOR i := 0 TO yyDStateCount DO
	 yyBasePtr [i] := LONGCARD (SYSTEM.ADR (yyComb [Base [i]]));
      END;
   END yyGetTables;
 
PROCEDURE yyGetTable (TableFile: System.tFile; Address: SYSTEM.ADDRESS): CARDINAL;
   VAR
      N		: INTEGER;
      Length	: yyTableElmt;
   BEGIN
      N := System.Read (TableFile, SYSTEM.ADR (Length), SYSTEM.TSIZE (yyTableElmt));
      Checks.ErrorCheck ("yyGetTable.Read1", N);
      N := System.Read (TableFile, Address, VAL(INTEGER,Length));
      Checks.ErrorCheck ("yyGetTable.Read2", N);
      RETURN VAL(CARDINAL,Length);
   END yyGetTable;
 
PROCEDURE yyErrorMessage (ErrorCode: SHORTCARD);
   BEGIN
      Positions.WritePosition (IO.StdError, Attribute.Position);
      CASE ErrorCode OF
   | 0: IO.WriteS (IO.StdError, ": Scanner: internal error");
   | 1: IO.WriteS (IO.StdError, ": Scanner: out of memory");
   | 2: IO.WriteS (IO.StdError, ": Scanner: table mismatch");
   | 3: IO.WriteS (IO.StdError, ": Scanner: too many nested include files");
   | 4: IO.WriteS (IO.StdError, ": Scanner: file stack underflow (too many calls of CloseFile)");
   | 5: IO.WriteS (IO.StdError, ": Scanner: cannot open input file");
      END;
      IO.WriteNl (IO.StdError); Exit;
   END yyErrorMessage;
 
PROCEDURE yyExit;
   BEGIN
      IO.CloseIO; System.Exit (1);
   END yyExit;

BEGIN
   ScanTabName		:= "Scanner.Tab";
   Exit			:= yyExit;
   yyFileStackPtr	:= 0;
   yyStartState		:= 1;			(* set up for auto init *)
   yyPreviousStart	:= 1;
   yyBasePtr [yyStartState] := LONGCARD (SYSTEM.ADR (yyComb [0]));
   yyDefault [yyStartState] := yyDNoState;
   yyComb [0].Check	:= yyDNoState;
   yyChBufferPtr	:= SYSTEM.ADR (yyComb [0]);	(* dirty trick *)
   yyChBufferIndex	:= 1;				(* dirty trick *)
   yyStateStackSize	:= yyInitBufferSize;
   DynArray.MakeArray (yyStateStack, yyStateStackSize, SYSTEM.TSIZE (yyStateRange));
   yyStateStack^ [0]	:= yyDNoState;
   
   FOR yyCh := yyFirstCh TO yyLastCh DO yyToLower [yyCh] := yyCh; END;
   yyToUpper := yyToLower;
   FOR yyCh := 'A' TO 'Z' DO
      yyToLower [yyCh] := CHR (ORD (yyCh) - ORD ('A') + ORD ('a'));
   END;
   FOR yyCh := 'a' TO 'z' DO
      yyToUpper [yyCh] := CHR (ORD (yyCh) - ORD ('a') + ORD ('A'));
   END;
END Scanner.
