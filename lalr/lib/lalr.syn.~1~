usage: lalr [-c|-m] [-b][-d][-e][-h][-l][-p][-s][-g][-v] [-cs][n] <file>

 c  generate C source code
 m  generate Modula-2 source code (default)

 a  generate all = -d -e -p -s
 b  run the preprocessor bnf and feed its output into lalr
 d  generate definition module
 e  generate module for error handling 
 p  generate parser driver
 s  generate mini scanner
 g  generate # line directives
 v  verbose: produce debugging information in file _Debug (long and slow)
 f  fast   : produce debugging information in file _Debug (short and fast)

 cs reduce the number of case labels in switch or case statements by mapping
    so-called read-reduce to reduce states
    (increases run time a little bit but decreases code size,
    might be necessary due to compiler restrictions)
<n> generate switch or case statements with at most n case labels
    (might be necessary due to compiler restrictions)

 t  print statistics about the generated parser
 h  print further help information
 l  print complete (error) listing
