(* $Id: rex.lalr,v 3.3 1992/08/07 15:11:08 grosch rel $ *)

(* $Log: rex.lalr,v $
 * Revision 3.3  1992/08/07  15:11:08  grosch
 * allow several scanner and parsers; extend module Errors
 *
 * Revision 3.2  1992/01/30  13:29:56  grosch
 * redesign of interface to operating system
 *
 * Revision 3.1  1991/11/21  14:42:27  grosch
 * fixed bug: interference of right context between constant and non-constant RE
 * new version of RCS on SPARC
 *
 * Revision 3.0  91/04/04  18:08:06  grosch
 * introduced partitioning of character set
 * 
 *)

(* Ich, Doktor Josef Grosch, Informatiker, March 1991 *)

GLOBAL {

FROM SYSTEM	IMPORT
   ADDRESS	, ADR		;

FROM Errors	IMPORT
   ErrorMessageI;

FROM Tree0	IMPORT
   tTree0	, Tree0Root	,
   mNode	, mRule		, mPattern	,
   mCh		, mSet		, mString	, mList		,
   mAlternative	, mSequence	, mRepetition	, mOption	;

FROM Tree	IMPORT
   tTree	;

FROM Sets	IMPORT
   tSet		, MakeSet	, ReleaseSet	, WriteSet	,
   Assign	, Union		, Include	, Exclude	,
   Complement	;

FROM Strings	IMPORT
   tString	, ArrayToString	, IntToString	;

FROM Lists	IMPORT
   tList	;

FROM StringMem	IMPORT
   tStringRef	, PutString	;

FROM Idents	IMPORT
   tIdent	, MakeIdent	, GetString	, GetStringRef	, NoIdent	;

FROM DefTable	IMPORT
   NoDef	, DefRange	, tKind		, GetKind	,
   MakeIdentDef	, MakeStartDef	, GetDef	, GetIdentDef	,
   GetStartDef	;

FROM GenTabs	IMPORT
   StartStateCount, RuleCount	, PatternCount	, LeftJustUsed	;

FROM Dfa	IMPORT
   BlankCh	, TabCh		, EolCh		, LastCh	;

FROM ScanGen	IMPORT
   Export	, Global	, Local		, Begin		,
   Close	, Eof		, Position	, NoPosition	,
   ExportLine	, GlobalLine	, LocalLine	, BeginLine	,
   CloseLine	, EofLine	, DefaultLine	, Default	,
   BlankText	, TabText	, EolText	, RexLib	,
   ScannerName	, InitScanGen	;

CONST
   IdentUndefined	= 10	;
   ImproperUse		= 11	;
   IdentDefBefore	= 12	;
   Error		= 3	;
   String		= 7	;

TYPE
   tParsAttribute = RECORD
      CASE : INTEGER OF
      | 1: Scan		: Scanner.tScanAttribute;
      | 2: Tree		: tTree0	;
      | 3: IsLeftJust	: BOOLEAN	;
	   Position	: Positions.tPosition;
      | 4: Set		: tSet		;
      END;
   END;

VAR
   Number	: SHORTCARD	;
   ch		: CHAR		;
   bool		: BOOLEAN	;
   string	: tString	;
   stringref	: tStringRef	;
   Text		: tList		;
   set		: tSet		;
   tree		: tTree0	;
   tree1	: tTree		;
   Definition	: DefRange	;
   Kind		: tKind		;
   Identifier	: tIdent	;
   nNode	,
   EOLTree	: tTree0	;

PROCEDURE AppendRule (Tree: tTree0; Ch: CHAR; Text: tList): tTree0;
   VAR
      Set	: tSet	;
      t		: tTree0;
   BEGIN
      MakeSet (Set, StartStateCount);
      Complement (Set);
      Exclude (Set, 0);
      t := mCh (Ch);
      INC (PatternCount);
      t := mPattern (Set, t, nNode, PatternCount, Positions.NoPosition);
      t := mList (nNode, t);
      INC (RuleCount);
      t := mRule (t, Text, 0, NoPosition, RuleCount);
      RETURN mList (Tree, t);
   END AppendRule;
}

BEGIN { nNode := mNode (); }

TOKEN

   Ident	= 1
   Number	= 2
   String	= 3
   Char		= 4
   TargetCode	= 5
   SCANNER	= 37
   'EXPORT'	= 32
   'GLOBAL'	= 6
   'LOCAL'	= 31
   'BEGIN'	= 7
   'CLOSE'	= 8
   EOF		= 34
   DEFAULT	= 36
   DEFINE	= 9
   START	= 10
   RULES	= 11
   NOT		= 30
   '.'		= 12
   ','		= 13
   '='		= 14
   ':'		= 15
   ':-'		= 35
   '#'		= 33
   '/'		= 16
   '|'		= 17
   '+'		= 18
   '-'		= 19
   '*'		= 20
   '?'		= 21
   '('		= 22
   ')'		= 23
   '['		= 24
   ']'		= 25
   '{'		= 26
   '}'		= 27
   '<'		= 28
   '>'		= 29

OPER

   LEFT	'|'
   LEFT	SEQUENCE
   LEFT	'+' '*' '?' '[' '-'
   LEFT	'(' '{'
   LEFT	Ident Char String Number

RULE

input		: init name code define start rules
		.
init		:
		{ StartStateCount := 0;
		  RuleCount	  := 0;
		  PatternCount	  := 0;
		  LeftJustUsed	  := FALSE;
		  EOLTree	  := mCh (EolCh);

		  ArrayToString ("ANY", string);
		  MakeSet (set, ORD (LastCh));
		  Complement (set);
		  Exclude (set, ORD (EolCh));
		  MakeIdentDef (MakeIdent (string), ADDRESS (mSet (set)), 1, FALSE);

		  ArrayToString ("STD", string);
		  MakeStartDef (MakeIdent (string), StartStateCount + 1);
		  INC (StartStateCount, 2);				}
		.
name		:		{ ScannerName := NoIdent; }
		| SCANNER	{ ArrayToString ("Scanner", string); ScannerName := MakeIdent (string); }
		| SCANNER Ident { ScannerName := $2.Scan.Ident; }
		.
code		:
		| code 'EXPORT'	TargetCode { Export  := $3.Scan.Text;	ExportLine	:= $3.Scan.Position.Line; }
		| code 'GLOBAL'	TargetCode { Global  := $3.Scan.Text;	GlobalLine	:= $3.Scan.Position.Line; }
		| code 'LOCAL'	TargetCode { Local   := $3.Scan.Text;	LocalLine	:= $3.Scan.Position.Line; }
		| code 'BEGIN'	TargetCode { Begin   := $3.Scan.Text;	BeginLine	:= $3.Scan.Position.Line; }
		| code 'CLOSE'	TargetCode { Close   := $3.Scan.Text;	CloseLine	:= $3.Scan.Position.Line; }
		| code DEFAULT	TargetCode { Default := $3.Scan.Text;	DefaultLine	:= $3.Scan.Position.Line; }
		| code EOF	TargetCode { Eof     := $3.Scan.Text;	EofLine		:= $3.Scan.Position.Line; }
		.
define		: { InitScanGen; }
		| DEFINE definitionList { InitScanGen; }
		.
start		:
		| START identListDef
		.
rules		: RULES ruleList
		{ Tree0Root := $2.Tree;
		  Tree0Root := AppendRule (Tree0Root, BlankCh, BlankText);
		  Tree0Root := AppendRule (Tree0Root, TabCh  , TabText  );
		  Tree0Root := AppendRule (Tree0Root, EolCh  , EolText  );	}
		.
definitionList	:
		| definitionList definition
		.
ruleList	:
		{ $$.Tree := nNode;					}

		| ruleList rule
		{ $$.Tree := mList ($1.Tree, $2.Tree);			}
		.
identListDef	: IdentDef
		| identListDef IdentDef
		| identListDef ',' IdentDef
		.
IdentDef	: Ident
		{ Definition := GetDef ($1.Scan.Ident);
		  IF Definition = NoDef THEN
		     MakeStartDef ($1.Scan.Ident, StartStateCount + 1);
		     INC (StartStateCount, 2);
		  ELSE
		     GetString ($1.Scan.Ident, string);
		     ErrorMessageI (IdentDefBefore, Error, $1.Scan.Position,
			String, ADR (string));
		  END;							}
		.
identListUse	: IdentUse
		{ MakeSet ($$.Set, StartStateCount);
		  Include ($$.Set, $1.Scan.Number);
		  Include ($$.Set, $1.Scan.Number + 1);			}

		| identListUse IdentUse
		{ $$.Set := $1.Set;
		  Include ($$.Set, $2.Scan.Number);
		  Include ($$.Set, $2.Scan.Number + 1);			}

		| identListUse ',' IdentUse
		{ $$.Set := $1.Set;
		  Include ($$.Set, $3.Scan.Number);
		  Include ($$.Set, $3.Scan.Number + 1);			}
		.
IdentUse	: Ident
		{ $$.Scan.Number := 0;
		  Definition := GetDef ($1.Scan.Ident);
		  IF Definition = NoDef THEN
		     GetString ($1.Scan.Ident, string);
		     ErrorMessageI (IdentUndefined, Error, $1.Scan.Position,
			String, ADR (string));
		  ELSIF GetKind (Definition) # Start THEN
		     GetString ($1.Scan.Ident, string);
		     ErrorMessageI (ImproperUse, Error, $1.Scan.Position,
			String, ADR (string));
		  ELSE
		     GetStartDef (Definition, Identifier, $$.Scan.Number);
		  END;							}
		.
definition	: Ident '=' regExpr '.'
		{ Definition := GetDef ($1.Scan.Ident);
		  IF Definition = NoDef THEN
		     MakeIdentDef ($1.Scan.Ident, ADDRESS ($3.Tree), 0, FALSE);
		  ELSE
		     GetString ($1.Scan.Ident, string);
		     ErrorMessageI (IdentDefBefore, Error, $1.Scan.Position,
			String, ADR (string));
		  END;							}
		.
rule		: patternList ':' TargetCode
		{ INC (RuleCount);
		  $$.Tree := mRule ($1.Tree, $3.Scan.Text, $3.Scan.Position.Line, Position, RuleCount); }
		| patternList ':-' TargetCode
		{ INC (RuleCount);
		  $$.Tree := mRule ($1.Tree, $3.Scan.Text, $3.Scan.Position.Line, NoPosition, RuleCount); }
		.
patternList	: pattern
		{ $$.Tree := mList (nNode, $1.Tree);			}

		| patternList ',' pattern
		{ $$.Tree := mList ($1.Tree, $3.Tree);			}
		.
pattern		: startStates leftJust regExpr rightContext rightJust
		{ IF $4.Tree = nNode THEN
		     tree := $5.Tree;
		  ELSE
		     IF $5.Tree = nNode THEN
			tree := $4.Tree;
		     ELSE
			tree := mSequence ($4.Tree, $5.Tree);
		     END;
		  END;

		  IF $2.IsLeftJust THEN
		     FOR Number := 1 TO SHORTCARD (StartStateCount) BY 2 DO
			Exclude ($1.Set, Number);
		     END;
		  END;

		  INC (PatternCount);
		  $$.Tree := mPattern ($1.Set, $3.Tree, tree,
		     PatternCount, $2.Position); 			}
		.
startStates	:
		{ MakeSet ($$.Set, StartStateCount);
		  Complement ($$.Set);
		  Exclude ($$.Set, 0);					}

		| '#' identListUse '#'
		{ $$.Set := $2.Set;					}

		| NOT '#' identListUse '#'
		{ $$.Set := $3.Set;
		  Complement ($$.Set);
		  Exclude ($$.Set, 0);					}
		.
leftJust	:
		{ $$.IsLeftJust := FALSE;
		  $$.Position	:= Scanner.Attribute.Position;		}

		| '<'
		{ $$.IsLeftJust := TRUE;
		  LeftJustUsed  := TRUE;
		  $$.Position	:= Scanner.Attribute.Position;		}
		.
rightContext	:
		{ $$.Tree := nNode;					}

		| '/' regExpr
		{ $$.Tree := $2.Tree;					}
		.
rightJust	:
		{ $$.Tree := nNode;					}

		| '>'
		{ $$.Tree := EOLTree;					}
		.
regExpr		: regExpr '|' regExpr
		{ $$.Tree := mAlternative ($1.Tree, $3.Tree);		}

		| regExpr regExpr
		{ $$.Tree := mSequence ($1.Tree, $2.Tree);		}
							PREC SEQUENCE

		| regExpr '+'
		{ $$.Tree := mRepetition ($1.Tree);			}

		| regExpr '*'
		{ $$.Tree := mOption (mRepetition ($1.Tree));		}

		| regExpr '?'
		{ $$.Tree := mOption ($1.Tree);				}

		| regExpr '[' Number ']'
		{ $$.Tree := nNode;
		  FOR Number := 1 TO $3.Scan.Number DO
		     $$.Tree := mSequence ($1.Tree, $$.Tree);
		  END;							}

		| regExpr '[' Number '-' Number ']'
		{ $$.Tree := nNode;
		  tree := mOption ($1.Tree);
		  FOR Number := $3.Scan.Number + 1 TO $5.Scan.Number DO
		     $$.Tree := mSequence (tree, $$.Tree);
		  END;
		  FOR Number := 1 TO $3.Scan.Number DO
		     $$.Tree := mSequence ($1.Tree, $$.Tree);
		  END;							}

		| '(' regExpr ')'
		{ $$.Tree := $2.Tree;					}

		| charSet
		{ $$.Tree := mSet ($1.Set);				}

		| Char
		{ $$.Tree := mCh ($1.Scan.Ch);				}

		| Ident
		{ Definition := GetDef ($1.Scan.Ident);
		  IF Definition # NoDef THEN
		     IF GetKind (Definition) = Ident THEN
			GetIdentDef (Definition, Identifier, tree1, Number, bool);
			$$.Tree := ADDRESS (tree1);
		     ELSE
			GetString ($1.Scan.Ident, string);
			ErrorMessageI (ImproperUse, Error, $1.Scan.Position,
			   String, ADR (string));
			$$.Tree := nNode;
		     END;
		  ELSE
		     stringref := GetStringRef ($1.Scan.Ident);
		     $$.Tree := mString (stringref);
		  END;							}

		| String
		{ $$.Tree := mString ($1.Scan.String);			}

		| Number
		{ IntToString ($1.Scan.Number, string);
		  $$.Tree := mString (PutString (string));		}
		.
charSet		: '-' charSet
		{ $$.Set := $2.Set;
		  Complement ($$.Set);					}

		| '{' rangeList '}'
		{ $$.Set := $2.Set;					}
		.
rangeList	:
		{ MakeSet ($$.Set, ORD (LastCh));			}

		| rangeList range
		{ $$.Set := $1.Set;
		  Union ($$.Set, $2.Set);
		  ReleaseSet ($2.Set);					}
		.
range		: Char
		{ MakeSet ($$.Set, ORD (LastCh));
		  Include ($$.Set, ORD ($1.Scan.Ch));			}

		| Char '-' Char
		{ MakeSet ($$.Set, ORD (LastCh));
		  FOR ch := $1.Scan.Ch TO $3.Scan.Ch DO
		     Include ($$.Set, ORD (ch));
		  END;							}
		.
